import builtins
from dataclasses import dataclass
from typing import Dict, List
import betterproto


class AbilityInvokeArgument(betterproto.Enum):
    ABILITY_NONE = 0
    ABILITY_META_MODIFIER_CHANGE = 1
    ABILITY_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2
    ABILITY_META_SPECIAL_FLOAT_ARGUMENT = 3
    ABILITY_META_OVERRIDE_PARAM = 4
    ABILITY_META_CLEAR_OVERRIDE_PARAM = 5
    ABILITY_META_REINIT_OVERRIDEMAP = 6
    ABILITY_META_GLOBAL_FLOAT_VALUE = 7
    ABILITY_META_CLEAR_GLOBAL_FLOAT_VALUE = 8
    ABILITY_META_ABILITY_ELEMENT_STRENGTH = 9
    ABILITY_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10
    ABILITY_META_SET_KILLED_SETATE = 11
    ABILITY_META_SET_ABILITY_TRIGGER = 12
    ABILITY_META_ADD_NEW_ABILITY = 13
    ABILITY_META_REMOVE_ABILITY = 14
    ABILITY_META_SET_MODIFIER_APPLY_ENTITY = 15
    ABILITY_META_MODIFIER_DURABILITY_CHANGE = 16
    ABILITY_META_ELEMENT_REACTION_VISUAL = 17
    ABILITY_META_SET_POSE_PARAMETER = 18
    ABILITY_META_UPDATE_BASE_REACTION_DAMAGE = 19
    ABILITY_META_TRIGGER_ELEMENT_REACTION = 20
    ABILITY_META_LOSE_HP = 21
    ABILITY_ACTION_TRIGGER_ABILITY = 50
    ABILITY_ACTION_SET_CRASH_DAMAGE = 51
    ABILITY_ACTION_EFFECT = 52
    ABILITY_ACTION_SUMMON = 53
    ABILITY_ACTION_BLINK = 54
    ABILITY_ACTION_CREATE_GADGET = 55
    ABILITY_ACTION_APPLY_LEVEL_MODIFIER = 56
    ABILITY_ACTION_GENERATE_ELEM_BALL = 57
    ABILITY_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58
    ABILITY_ACTION_SERVER_MONSTER_LOG = 59
    ABILITY_ACTION_CREATE_TILE = 60
    ABILITY_ACTION_DESTROY_TILE = 61
    ABILITY_ACTION_FIRE_AFTER_IMAGE = 62
    ABILITY_MIXIN_AVATAR_STEER_BY_CAMERA = 100
    ABILITY_MIXIN_MONSTER_DEFEND = 101
    ABILITY_MIXIN_WIND_ZONE = 102
    ABILITY_MIXIN_COST_STAMINA = 103
    ABILITY_MIXIN_ELITE_SHIELD = 104
    ABILITY_MIXIN_ELEMENT_SHIELD = 105
    ABILITY_MIXIN_GLOBAL_SHIELD = 106
    ABILITY_MIXIN_SHIELD_BAR = 107
    ABILITY_MIXIN_WIND_SEED_SPAWNER = 108
    ABILITY_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109
    ABILITY_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110
    ABILITY_MIXIN_SCENE_PROP_SYNC = 111
    ABILITY_MIXIN_WIDGET_MP_SUPPORT = 112


class AbilityScalarType(betterproto.Enum):
    UNKNOW = 0
    FLOAT = 1
    INT = 2
    BOOL = 3
    TRIGGER = 4
    STRING = 5
    UINT = 6


class AccountType(betterproto.Enum):
    ACCOUNT_MIHOYO_GUEST = 0
    ACCOUNT_MIHOYO = 1
    ACCOUNT_XIAOMI = 11
    ACCOUNT_COOLPAD = 12
    ACCOUNT_YYB = 13
    ACCOUNT_BILI = 14
    ACCOUNT_HUAWEI = 15
    ACCOUNT_MEIZU = 16
    ACCOUNT360 = 17
    ACCOUNT_OPPO = 18
    ACCOUNT_VIVO = 19
    ACCOUNT_UC = 20
    ACCOUNT_WANDOJIA = 21
    ACCOUNT_LENOVO = 22
    ACCOUNT_JINLI = 23
    ACCOUNT_BAIDU = 25
    ACCOUNT_DANGLE = 26


class ActionReasonType(betterproto.Enum):
    ACTION_REASON_NONE = 0
    ACTION_REASON_QUEST_ITEM = 1
    ACTION_REASON_QUEST_REWARD = 2
    ACTION_REASON_TRIFLE = 3
    ACTION_REASON_SHOP = 4
    ACTION_REASON_PLAYER_UPGRADE_REWARD = 5
    ACTION_REASON_ADD_AVATAR = 6
    ACTION_REASON_GADGET_ENV_ANIMAL = 7
    ACTION_REASON_MONSTER_ENV_ANIMAL = 8
    ACTION_REASON_COMPOUND = 9
    ACTION_REASON_COOK = 10
    ACTION_REASON_GATHER = 11
    ACTION_REASON_MAIL_ATTACHMENT = 12
    ACTION_REASON_CITY_LEVELUP_RETURN = 15
    ACTION_REASON_CITY_LEVELUP_REWARD = 17
    ACTION_REASON_AREA_EXPLORE_REWARD = 18
    ACTION_REASON_UNLOCK_POINT_REWARD = 19
    ACTION_REASON_DUNGEON_FIRST_PASS = 20
    ACTION_REASON_DUNGEON_PASS = 21
    ACTION_REASON_CHANGE_ELEM_TYPE = 23
    ACTION_REASON_FETTER_OPEN = 25
    ACTION_REASON_DAILY_TASK_SCORE = 26
    ACTION_REASON_DAILY_TASK_HOST = 27
    ACTION_REASON_RAND_TASK_HOST = 28
    ACTION_REASON_EXPEDITION = 29
    ACTION_REASON_GACHA = 30
    ACTION_REASON_COMBINE = 31
    ACTION_REASON_RAND_TASK_GUEST = 32
    ACTION_REASON_DAILY_TASK_GUEST = 33
    ACTION_REASON_FORGE_OUTPUT = 34
    ACTION_REASON_FORGE_RETURN = 35
    ACTION_REASON_INIT_AVATAR = 36
    ACTION_REASON_MONSTER_DIE = 37
    ACTION_REASON_GM = 38
    ACTION_REASON_OPEN_CHEST = 39
    ACTION_REASON_GADGET_DIE = 40
    ACTION_REASON_MONSTER_CHANGE_HP = 41
    ACTION_REASON_SUBFIELD_DROP = 42
    ACTION_REASON_PUSH_TIPS_REWARD = 43
    ACTION_REASON_ACTIVITY_MONSTER_DROP = 44
    ACTION_REASON_ACTIVITY_GATHER = 45
    ACTION_REASON_ACTIVITY_SUBFIELD_DROP = 46
    ACTION_REASON_TOWER_SCHEDULE_REWARD = 47
    ACTION_REASON_TOWER_FLOOR_STAR_REWARD = 48
    ACTION_REASON_TOWER_FIRST_PASS_REWARD = 49
    ACTION_REASON_TOWER_DAILY_REWARD = 50
    ACTION_REASON_HIT_CLIENT_TRIVIAL_ENTITY = 51
    ACTION_REASON_OPEN_WORLD_BOSS_CHEST = 52
    ACTION_REASON_MATERIAL_DELETE_RETURN = 53
    ACTION_REASON_SIGN_IN_REWARD = 54
    ACTION_REASON_OPEN_BLOSSOM_CHEST = 55
    ACTION_REASON_RECHARGE = 56
    ACTION_REASON_BONUS_ACTIVITY_REWARD = 57
    ACTION_REASON_TOWER_COMMEMORATIVE_REWARD = 58
    ACTION_REASON_TOWER_SKIP_FLOOR_REWARD = 59
    ACTION_REASON_RECHARGE_BONUS = 60
    ACTION_REASON_RECHARGE_CARD = 61
    ACTION_REASON_RECHARGE_CARD_DAILY = 62
    ACTION_REASON_RECHARGE_CARD_REPLACE = 63
    ACTION_REASON_RECHARGE_CARD_REPLACE_FREE = 64
    ACTION_REASON_RECHARGE_PLAY_REPLACE = 65
    ACTION_REASON_MP_PLAY_TAKE_REWARD = 66
    ACTION_REASON_ACTIVITY_WATCHER = 67
    ACTION_REASON_SALESMAN_DELIVER_ITEM = 68
    ACTION_REASON_SALESMAN_REWARD = 69
    ACTION_REASON_REBATE = 70
    ACTION_REASON_MCOIN_EXCHANGE_HCOIN = 71
    ACTION_REASON_DAILY_TASK_EXCHANGE_LEGENDARY_KEY = 72
    ACTION_REASON_UNLOCK_PERSON_LINE = 73
    ACTION_REASON_FETTER_LEVEL_REWARD = 74
    ACTION_REASON_BUY_RESIN = 75
    ACTION_REASON_RECHARGE_PACKAGE = 76
    ACTION_REASON_DELIVERY_DAILY_REWARD = 77
    ACTION_REASON_CITY_REPUTATION_LEVEL = 78
    ACTION_REASON_CITY_REPUTATION_QUEST = 79
    ACTION_REASON_CITY_REPUTATION_REQUEST = 80
    ACTION_REASON_CITY_REPUTATION_EXPLORE = 81
    ACTION_REASON_OFFERGING_LEVEL = 82
    ACTION_REASON_ROUTINE_HOST = 83
    ACTION_REASON_ROUTINE_GUEST = 84
    ACTION_REASON_TREASURE_MAP_SPOT_TOKEN = 89
    ACTION_REASON_TREASURE_MAP_BONUS_LEVEL_REWARD = 90
    ACTION_REASON_TREASURE_MAP_MP_REWARD = 91
    ACTION_REASON_CONVERT = 92
    ACTION_REASON_OVERFLOW_TRANSFORM = 93
    ACTION_REASON_ACTIVITY_AVATAR_SELECTION_REWARD = 96
    ACTION_REASON_ACTIVITY_WATCHER_BATCH = 97
    ACTION_REASON_HIT_TREE_DROP = 98
    ACTION_REASON_GET_HOME_LEVELUP_REWARD = 99
    ACTION_REASON_HOME_DEFAULT_FURNITURE = 100
    ACTION_REASON_ACTIVITY_COND = 101
    ACTION_REASON_BATTLE_PASS_NOTIFY = 102
    ACTION_REASON_RELIQUARY_DECOMPOSE = 103
    ACTION_REASON_RECHARGE_GOOGLE_GIFT_GARD = 104
    ACTION_REASON_RECHARGE_CONCERT_PRODUCT = 105
    ACTION_REASON_RECHARGE_CONCERT_PRODUCT_REPLACE = 106
    ACTION_REASON_SEND_CONCERT_PRODUCT_BY_MUIP = 107
    ACTION_REASON_RECHARGE_APPLE_GIFT_GARD = 108
    ACTION_REASON_PLAYER_USE_ITEM = 1001
    ACTION_REASON_DROP_ITEM = 1002
    ACTION_REASON_WEAPON_UPGRADE = 1011
    ACTION_REASON_WEAPON_PROMOTE = 1012
    ACTION_REASON_WEAPON_AWAKEN = 1013
    ACTION_REASON_RELIC_UPGRADE = 1014
    ACTION_REASON_ABILITY = 1015
    ACTION_REASON_DUNGEON_STATUE_DROP = 1016
    ACTION_REASON_OFFLINE_MSG = 1017
    ACTION_REASON_AVATAR_UPGRADE = 1018
    ACTION_REASON_AVATAR_PROMOTE = 1019
    ACTION_REASON_QUEST_ACTION = 1021
    ACTION_REASON_CITY_LEVELUP = 1022
    ACTION_REASON_UPGRADE_SKILL = 1024
    ACTION_REASON_UNLOCK_TALENT = 1025
    ACTION_REASON_UPGRADE_PROUD_SKILL = 1026
    ACTION_REASON_PLAYER_LEVEL_LIMIT_UP = 1027
    ACTION_REASON_DUNGEON_DAILY = 1028
    ACTION_REASON_ITEM_GIVING = 1030
    ACTION_REASON_FORGE_COST = 1031
    ACTION_REASON_INVESTIGATION_REWARD = 1032
    ACTION_REASON_INVESTIGATION_TARGET_REWARD = 1033
    ACTION_REASON_GADGET_INTERACT = 1034
    ACTION_REASON_SEA_LAMP_CI_MATERIAL = 1036
    ACTION_REASON_SEA_LAMP_CONTRIBUTION_REWARD = 1037
    ACTION_REASON_SEA_LAMP_PHASE_REWARD = 1038
    ACTION_REASON_SEA_LAMP_FLY_LAMP = 1039
    ACTION_REASON_AUTO_RECOVER = 1040
    ACTION_REASON_ACTIVITY_EXPIRE_ITEM = 1041
    ACTION_REASON_SUB_COIN_NEGATIVE = 1042
    ACTION_REASON_BARGAIN_DEDUCT = 1043
    ACTION_REASON_BATTLE_PASS_PAID_REWARD = 1044
    ACTION_REASON_BATTLE_PASS_LEVEL_REWARD = 1045
    ACTION_REASON_TRIAL_AVATAR_ACTIVITY_FIRST_PASS_REWARD = 1046
    ACTION_REASON_BUY_BATTLE_PASS_LEVEL = 1047
    ACTION_REASON_GRANT_BIRTHDAY_BENEFIT = 1048
    ACTION_REASON_ACHIEVEMENT_REWARD = 1049
    ACTION_REASON_ACHIEVEMENT_GOAL_REWARD = 1050
    ACTION_REASON_FIRST_SHARE_TO_SOCIAL_NETWORK = 1051
    ACTION_REASON_DESTROY_MATERIAL = 1052
    ACTION_REASON_CODEX_LEVELUP_REWARD = 1053
    ACTION_REASON_HUNTING_OFFER_REWARD = 1054
    ACTION_REASON_USE_WIDGET_ANCHOR_POINT = 1055
    ACTION_REASON_USE_WIDGET_BONFIRE = 1056
    ACTION_REASON_UNGRADE_WEAPON_RETURN_MATERIAL = 1057
    ACTION_REASON_USE_WIDGET_ONEOFF_GATHER_POINT_DETECTOR = 1058
    ACTION_REASON_USE_WIDGET_CLIENT_COLLECTOR = 1059
    ACTION_REASON_USE_WIDGET_CLIENT_DETECTOR = 1060
    ACTION_REASON_TAKE_GENERAL_REWARD = 1061
    ACTION_REASON_ASTER_TAKE_SPECIAL_REWARD = 1062
    ACTION_REASON_REMOVE_CODEX_BOOK = 1063
    ACTION_REASON_OFFERING_ITEM = 1064
    ACTION_REASON_USE_WIDGET_GADGET_BUILDER = 1065
    ACTION_REASON_EFFIGY_FIRST_PASS_REWARD = 1066
    ACTION_REASON_EFFIGY_REWARD = 1067
    ACTION_REASON_REUNION_FIRST_GIFT_REWARD = 1068
    ACTION_REASON_REUNION_SIGN_IN_REWARD = 1069
    ACTION_REASON_REUNION_WATCHER_REWARD = 1070
    ACTION_REASON_SALESMAN_MP_REWARD = 1071
    ACTION_REASION_AVATAR_PROMOTE_REWARD = 1072
    ACTION_REASON_BLESSING_REDEEM_REWARD = 1073
    ACTION_MIRACLE_RING_REWARD = 1074
    ACTION_REASON_EXPEDITION_REWARD = 1075
    ACTION_REASON_TREASURE_MAP_REMOVE_DETECTOR = 1076
    ACTION_REASON_MECHANICUS_DUNGEON_TICKET = 1077
    ACTION_REASON_MECHANICUS_LEVELUP_GEAR = 1078
    ACTION_REASON_MECHANICUS_BATTLE_SETTLE = 1079
    ACTION_REASON_REGION_SEARCH_REWARD = 1080
    ACTION_REASON_UNLOCK_COOP_CHAPTER = 1081
    ACTION_REASON_TAKE_COOP_REWARD = 1082
    ACTION_REASON_FLEUR_FAIR_DUNGEON_REWARD = 1083
    ACTION_REASON_ACTIVITY_SCORE = 1084
    ACTION_REASON_CHANNELLER_SLAB_ONEOFF_DUNGEON_REWARD = 1085
    ACTION_REASON_FURNITURE_MAKE_START = 1086
    ACTION_REASON_FURNITURE_MAKE_TAKE = 1087
    ACTION_REASON_FURNITURE_MAKE_CANCEL = 1088
    ACTION_REASON_FURNITURE_MAKE_FAST_FINISH = 1089
    ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD = 1090
    ACTION_REASON_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD = 1091
    ACTION_REASON_HOME_LIMITED_SHOP_BUY = 1092
    ACTION_REASON_HOME_COIN_COLLECT = 1093
    ACTION_REASON_SUMMER_TIME_SENTRY_TOWER_REWARD = 1094
    ACTION_REASON_SUMMER_TIME_SPRINT_BOAT_REWARD = 1095
    ACTION_REASON_SUMMER_TIME_BOSS_REWARD = 1096
    ACTION_REASON_SUMMER_TIME_BOMB_REWARD = 1097
    ACTION_REASON_HOME_FETTER_COLLECT = 1098
    ACTION_REASON_ECHO_SHELL_REWARD = 1099
    ACTION_REASON_HOME_EVENT_REWARD = 1100
    ACTION_REASON_BLITZ_RUSH_DUNGEON_REWARD = 1101
    ACTION_REASON_FURNITURE_MAKE_RETURN = 1102
    ACTION_REASON_HOME_PLANT_BOX_GATHER = 1103
    ACTION_REASON_HOME_PLANT_SEED = 1104
    ACTION_REASON_HOME_PLANT_GATHER = 1105
    ACTION_REASON_CHESS_DUNGEON_REWARD = 1106
    ACTION_REASON_GROUP_LINK_BUNDLE_FINISH = 1107
    ACTION_REASON_LUNA_RITE_SACRIFICE = 1108
    ACTION_REASON_LUNA_RITE_TAKE_SACRIFICE_REWARD = 1109
    ACTION_REASON_FISH_BITE = 1110
    ACTION_REASON_FISH_SUCC = 1111
    ACTION_REASON_PLANT_FLOWER_REWARD = 1112
    ACTION_REASON_PLANT_FLOWER_DELIVER_ITEM = 1113
    ACTION_REASON_PLANT_FLOWER_GIVE_FLOWER = 1114
    ACTION_REASON_PLANT_FLOWER_RECV_FLOWER = 1115
    ACTION_REASON_ROGUE_CHALLENGE_SETTLE = 1116
    ACTION_REASON_ROGUE_TAKE_FIRST_PASS_REWARD = 1117
    ACTION_REASON_ROGUE_UPGRADE_SHIKIGAMI = 1118
    ACTION_REASON_ROGUE_REFRESH_CARD = 1119


class AsterLittleStageState(betterproto.Enum):
    ASTER_LITTLE_STAGE_NONE = 0
    ASTER_LITTLE_STAGE_UNSTARTED = 1
    ASTER_LITTLE_STAGE_STARTED = 2
    ASTER_LITTLE_STAGE_FINISHED = 3


class AuthkeySignType(betterproto.Enum):
    AUTHKEY_SIGN_TYPE_NONE = 0
    AUTHKEY_SIGN_TYPE_DEFAULT = 1
    AUTHKEY_SIGN_TYPE_RSA = 2


class AvatarExpeditionState(betterproto.Enum):
    AVATAR_EXPEDITION_NONE = 0
    AVATAR_EXPEDITION_DOING = 1
    AVATAR_EXPEDITION_FINISH_WAIT_REWARD = 2
    AVATAR_EXPEDITION_CALLBACK_WAIT_REWARD = 3
    AVATAR_EXPEDITION_LOCKED = 4


class AvatarType(betterproto.Enum):
    AVATAR_TYPE_NONE = 0
    AVATAR_TYPE_FORMAL = 1
    AVATAR_TYPE_TRIAL = 2
    AVATAR_TYPE_MIRROR = 3


class BargainResultType(betterproto.Enum):
    BARGAIN_COMPLETE_SUCC = 0
    BARGAIN_SINGLE_FAIL = 1
    BARGAIN_COMPLETE_FAIL = 2


class BattlePassUnlockStatus(betterproto.Enum):
    BATTLE_PASS_UNLOCK_INVALID = 0
    BATTLE_PASS_UNLOCK_FREE = 1
    BATTLE_PASS_UNLOCK_PAID = 2


class BlossomScheduleState(betterproto.Enum):
    BLOSSOM_SCHEDULE_NONE = 0
    BLOSSOM_SCHEDULE_INIT = 1
    BLOSSOM_SCHEDULE_IN_PROGRESS = 2
    BLOSSOM_SCHEDULE_REWARD = 3


class ChangeEnergyReason(betterproto.Enum):
    CHANGE_ENERGY_NONE = 0
    CHANGE_ENERGY_SKILL_START = 1


class ChangHpReason(betterproto.Enum):
    CHANGE_HP_NONE = 0
    CHANGE_HP_SUB_AVATAR = 1
    CHANGE_HP_SUB_MONSTER = 2
    CHANGE_HP_SUB_GEAR = 3
    CHANGE_HP_SUB_ENVIR = 4
    CHANGE_HP_SUB_FALL = 5
    CHANGE_HP_SUB_DRAWN = 6
    CHANGE_HP_SUB_ABYSS = 7
    CHANGE_HP_SUB_ABILITY = 8
    CHANGE_HP_SUB_SUMMON = 9
    CHANGE_HP_SUB_SCRIPT = 10
    CHANGE_HP_SUB_GM = 11
    CHANGE_HP_SUB_KILL_SELF = 12
    CHANGE_HP_SUB_CLIMATE_COLD = 13
    CHANGE_HP_SUB_STORM_LIGHTNING = 14
    CHANGE_HP_SUB_KILL_SERVER_GADGET = 15
    CHANGE_HP_SUB_REPLACE = 16
    CHANGE_HP_SUB_PLAYER_LEAVE = 17
    CHANGE_HP_BY_LUA = 51
    CHANGE_HP_ADD_ABILITY = 101
    CHANGE_HP_ADD_ITEM = 102
    CHANGE_HP_ADD_REVIVE = 103
    CHANGE_HP_ADD_UPGRADE = 104
    CHANGE_HP_ADD_STATUE = 105
    CHANGE_HP_ADD_BACKGROUND = 106
    CHANGE_HP_ADD_GM = 107
    CHANGE_HP_ADD_TRIAL_AVATAR_ACTIVITY = 108
    CHANGE_HP_ADD_ROUGUELIKE_SPRING = 109


class ChannelIdType(betterproto.Enum):
    CHANNEL_ID_NONE = 0
    CHANNEL_ID_MIHOYO = 1
    CHANNEL_ID_XIAOMI = 11
    CHANNEL_ID_COOLPAD = 12
    CHANNEL_ID_YYB = 13
    CHANNEL_ID_BILI = 14
    CHANNEL_ID_HUAWEI = 15
    CHANNEL_ID_MEIZU = 16
    CHANNEL_ID360 = 17
    CHANNEL_ID_OPPO = 18
    CHANNEL_ID_VIVO = 19
    CHANNEL_ID_UC = 20
    CHANNEL_ID_LENOVO = 22
    CHANNEL_ID_JINLI = 23
    CHANNEL_ID_BAIDU = 25
    CHANNEL_ID_DANGLE = 26


class ChapterState(betterproto.Enum):
    CHAPTER_STATE_INVALID = 0
    CHAPTER_STATE_UNABLE_TO_BEGIN = 1
    CHAPTER_STATE_BEGIN = 2
    CHAPTER_STATE_END = 3


class ChatChannel(betterproto.Enum):
    CHANNEL_TEAM = 0
    CHANNEL_FRIEND = 1
    CHANNEL_NONE = 2
    CHANNEL_HIDEANDSEEK = 3
    CHANNEL_ALL = 10
    CHANNEL_TEST = 100


class ClientReconnectReason(betterproto.Enum):
    CLIENT_RECONNNECT_NONE = 0
    CLIENT_RECONNNECT_QUIT_MP = 1


class ClientType(betterproto.Enum):
    CLIENT_PRODUCT = 0
    CLIENT_DEV = 1


class CodexType(betterproto.Enum):
    CODEX_NONE = 0
    CODEX_QUEST = 1
    CODEX_WEAPON = 2
    CODEX_ANIMAL = 3
    CODEX_MATERIAL = 4
    CODEX_BOOKS = 5
    CODEX_PUSHTIPS = 6
    CODEX_VIEW = 7
    CODEX_RELIQUARY = 8


class CombatTypeArgument(betterproto.Enum):
    COMBAT_NONE = 0
    COMBAT_EVT_BEING_HIT = 1
    COMBAT_ANIMATOR_STATE_CHANGED = 2
    COMBAT_FACE_TO_DIR = 3
    COMBAT_SET_ATTACK_TARGET = 4
    COMBAT_RUSH_MOVE = 5
    COMBAT_ANIMATOR_PARAMETER_CHANGED = 6
    ENTITY_MOVE = 7
    SYNC_ENTITY_POSITION = 8
    COMBAT_STEER_MOTION_INFO = 9
    COMBAT_FORCE_SET_POS_INFO = 10
    COMBAT_COMPENSATE_POS_DIFF = 11
    COMBAT_MONSTER_DO_BLINK = 12
    COMBAT_FIXED_RUSH_MOVE = 13
    COMBAT_SYNC_TRANSFORM = 14
    COMBAT_LIGHT_CORE_MOVE = 15


class CreateGadgetReason(betterproto.Enum):
    CREATE_GADGET_NONE = 0
    CREATE_GADGET_PLAYER = 1
    CREATE_GADGET_MISSION = 2
    CREATE_GADGET_GM = 3


class CreateReason(betterproto.Enum):
    CREATE_NONE = 0
    CREATE_QUEST = 1
    CREATE_ENERGY = 2


class DealAddFriendResultType(betterproto.Enum):
    DEAL_ADD_FRIEND_REJECT = 0
    DEAL_ADD_FRIEND_ACCEPT = 1


class DraftInviteFailReason(betterproto.Enum):
    DRAFT_FAIL_UNKNOWN = 0
    DRAFT_ACTIVITY_NOT_OPEN = 1
    DRAFT_ACTIVITY_PLAY_NOT_OPEN = 2
    DRAFT_SCENE_NOT_MEET = 3
    DRAFT_WORLD_NOT_MEET = 4
    DRAFT_PLAY_LIMIT_NOT_MEET = 5


class DropSubfieldType(betterproto.Enum):
    DROP_SUBFIELD_NONE = 0
    DROP_SUBFIELD_ONE = 1


class DungeonCandidateTeamDismissReason(betterproto.Enum):
    DUNGEON_CANDIDATE_TPDR_NORMAL = 0
    DUNGEON_CANDIDATE_TPDR_DIE = 1
    DUNGEON_CANDIDATE_TPDR_DISCONNECT = 2


class DungeonCandidateTeamInviteState(betterproto.Enum):
    DUNGEON_CANDIDATE_TEAM_INVITE_STATE_NONE = 0
    DUNGEON_CANDIDATE_TEAM_INVITE_STATE_SEND = 1
    DUNGEON_CANDIDATE_TEAM_INVITE_STATE_ACCEPT = 2
    DUNGEON_CANDIDATE_TEAM_INVITE_STATE_REFUSE = 3


class DungeonCandidateTeamPlayerLeaveReason(betterproto.Enum):
    DUNGEON_CANDIDATE_TPLR_NORMAL = 0
    DUNGEON_CANDIDATE_TPLR_DIE = 1
    DUNGEON_CANDIDATE_TPLR_BE_KICK = 2
    DUNGEON_CANDIDATE_DISCONNECT = 3


class DungeonCandidateTeamPlayerState(betterproto.Enum):
    IDLE = 0
    CHANGING_AVATAR = 1
    READY = 2


class DungeonDataType(betterproto.Enum):
    DUNGEON_DATA_NONE = 0
    DUNGEON_DATA_END_TIME = 1
    DUNGEON_DATA_MONSTER_DIE_COUNT = 2
    DUNGEON_DATA_LEVEL_CONFIG_ID = 3
    DUNGEON_DATA_TOWER_MONTHLY_LEVEL_CONFIG_ID = 4
    DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID = 5


class DungeonEntryBlockReason(betterproto.Enum):
    DUNGEON_ENTRY_REASON_NONE = 0
    DUNGEON_ENTRY_REASON_LEVEL = 1
    DUNGEON_ENTRY_REASON_QUEST = 2
    DUNGEON_ENTRY_REASON_MULIPLE = 3


class DungeonRestartReason(betterproto.Enum):
    DUNGEON_RESTART_REASON_NONE = 0
    DUNGEON_RESTART_REASON_DAILY_RESTART = 1
    DUNGEON_RESTART_REASON_DIE_RETRY = 2


class ENetReason(betterproto.Enum):
    ENET_TIMEOUT = 0
    ENET_CLIENT_CLOSE = 1
    ENET_CLIENT_REBIND_FAIL = 2
    ENET_CLIENT_SHUTDOWN = 3
    ENET_SERVER_RELOGIN = 4
    ENET_SERVER_KICK = 5
    ENET_SERVER_SHUTDOWN = 6
    ENET_NOT_FOUND_SESSION = 7
    ENET_LOGIN_UNFINISHED = 8
    ENET_PACKET_FREQ_TOO_HIGH = 9
    ENET_PING_TIMEOUT = 10
    ENET_TRANFER_FAILED = 11
    ENET_SERVER_KILL_CLIENT = 12
    ENET_CHECK_MOVE_SPEED = 13
    ENET_ACCOUNT_PASSWORD_CHANGE = 14
    ENET_SECURITY_KICK = 15
    ENET_CLIENT_EDITOR_CONNECT_KEY = 987654321
    ENET_CLIENT_CONNECT_KEY = 1234567890


class EnterReason(betterproto.Enum):
    ENTER_REASON_NONE = 0
    ENTER_REASON_LOGIN = 1
    ENTER_REASON_DUNGEON_REPLAY = 11
    ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT = 12
    ENTER_REASON_DUNGEON_ENTER = 13
    ENTER_REASON_DUNGEON_QUIT = 14
    ENTER_REASON_GM = 21
    ENTER_REASON_QUEST_ROLLBACK = 31
    ENTER_REASON_REVIVAL = 32
    ENTER_REASON_PERSONAL_SCENE = 41
    ENTER_REASON_TRANS_POINT = 42
    ENTER_REASON_CLIENT_TRANSMIT = 43
    ENTER_REASON_FORCE_DRAG_BACK = 44
    ENTER_REASON_TEAM_KICK = 51
    ENTER_REASON_TEAM_JOIN = 52
    ENTER_REASON_TEAM_BACK = 53
    ENTER_REASON_MUIP = 54
    ENTER_REASON_DUNGEON_INVITE_ACCEPT = 55
    ENTER_REASON_LUA = 56
    ENTER_REASON_ACTIVITY_LOAD_TERRAIN = 57
    ENTER_REASON_HOST_FROM_SINGLE_TO_MP = 58
    ENTER_REASON_MP_PLAY = 59
    ENTER_REASON_ANCHOR_POINT = 60
    ENTER_REASON_LUA_SKIP_UI = 61
    ENTER_REASON_RELOAD_TERRAIN = 62
    ENTER_REASON_DRAFT_TRANSFER = 63
    ENTER_REASON_ENTER_HOME = 64
    ENTER_REASON_EXIT_HOME = 65
    ENTER_REASON_CHANGE_HOME_MODULE = 66
    ENTER_REASON_GALLERY = 67
    ENTER_REASON_HOME_SCENE_JUMP = 68
    ENTER_REASON_HIDE_AND_SEEK = 69
    ENTER_REASON_SUMMER_TIME_MIST_ZONE = 70
    ENTER_REASON_FORCE_QUIT_SCENE = 71
    ENTER_REASON_HERO_COURSE = 72
    ENTER_REASON_TRANS_CLIMATE = 73
    ENTER_REASON_SUMMER_TIME_BOAT_RESTART = 74
    ENTER_REASON_TSURUMI_MIST_CLIMATE = 75
    ENTER_REASON_TSURUMI_REGIONAL_MIST_CLIMATE = 76


class EnterType(betterproto.Enum):
    ENTER_NONE = 0
    ENTER_SELF = 1
    ENTER_GOTO = 2
    ENTER_JUMP = 3
    ENTER_OTHER = 4
    ENTER_BACK = 5
    ENTER_DUNGEON = 6
    ENTER_DUNGEON_REPLAY = 7
    ENTER_GOTO_BY_PORTAL = 8
    ENTER_SELF_HOME = 9
    ENTER_OTHER_HOME = 10
    ENTER_GOTO_RECREATE = 11


class EventTriggerType(betterproto.Enum):
    EVENT_TRIGGER_NONE = 0
    EVENT_TRIGGER_ENTER_FORCE = 1


class ExchangeMcoinType(betterproto.Enum):
    EXCHANGEMCOIN_NONE = 0
    EXCHANGEMCOIN_PCM_TO_PSN = 1
    EXCHANGEMCOIN_PSN_TO_PCM = 2


class ExpeditionState(betterproto.Enum):
    EXPEDITION_NONE = 0
    EXPEDITION_STARTED = 1
    EXPEDITION_FINISHED = 2
    EXPEDITION_REWARDED = 3
    EXPEDITION_LOCKED = 4


class ExploreType(betterproto.Enum):
    EXPLORE_NONE = 0
    EXPLORE_CRYSTAL = 1
    EXPLORE_CHEST = 2
    EXPLORE_TEMPLE = 3
    EXPLORE_TELEPORT = 4


class FeatureBlockType(betterproto.Enum):
    FEATURE_BLOCK_TYPE_NONE = 0
    FEATURE_BLOCK_TYPE_CHAT = 1
    FEATURE_BLOCK_TYPE_MP = 2
    FEATURE_BLOCK_TYPE_FEATRURE_BLOCK_TYPE_CRC = 3
    FEATURE_BLOCK_TYPE_HOME = 4


class FeatureSwitchType(betterproto.Enum):
    FEATURE_SWITCH_NONE = 0
    FEATURE_SWITCH_FRIEND = 1
    FEATURE_SWITCH_ASKFRINED = 2
    FEATURE_SWITCH_TOWER_FLOOR = 3
    FEATURE_SWITCH_MP = 4
    FEATURE_SWITCH_BLOSSOM = 5
    FEATURE_SWITCH_BATTLE_PASS = 6
    FEATURE_SWITCH_DUNGEON = 7
    FEATURE_SWITCH_PUSH_PLATFORM = 8
    FEATURE_SWITCH_RECHARGE = 9
    FEATURE_SWITCH_SHOP = 10
    FEATURE_SWITCH_DAILY_TASK = 11
    FEATURE_SWITCH_RAND_TASK = 12
    FEATURE_SWITCH_REWARD_ID = 13
    FEATURE_SWITCH_DROP_ID = 14
    FEATURE_SWITCH_GATHER = 15
    FEATURE_SWITCH_GAME_TIME = 16
    FEATURE_SWITCH_FORGE = 17
    FEATURE_SWITCH_COOK = 18
    FEATURE_SWITCH_COMBINE = 19
    FEATURE_SWITCH_WEAPON = 20
    FEATURE_SWITCH_RELIQUARY = 21
    FEATURE_SWITCH_ITEM = 22
    FEATURE_SWITCH_AVATAR = 23
    FEATURE_SWITCH_CITY_REPUTATION = 24
    FEATURE_SWITCH_MP_PLAY = 25
    FEATURE_SWITCH_SIGHT_GROUP = 26
    FEATURE_SWITCH_NOTIFY_EYE_POINT = 27
    FEATURE_SWITCH_EYE_POINT_AS_EYE = 28
    FEATURE_SWITCH_GROUP_VISION_TYPE = 29
    FEATURE_SWITCH_OFFERING = 30
    FEATURE_SWITCH_ROUTINE = 31
    FEATURE_SWITCH_ANCHOR_POINT = 32
    FEATURE_SWITCH_ACTIVITY_SALE = 33
    FEATURE_SWITCH_MECHANICUS = 34
    FEATURE_SWITCH_MECHANICUS_PUNISH = 35
    FEATURE_SWITCH_WORLD_LEVEL_ADJUST = 36
    FEATURE_SWITCH_ENTER_HOME_WORLD = 37
    FEATURE_SWITCH_HOME_MP = 38
    FEATURE_SWITCH_HOME_EDIT_MODE = 40
    FEATURE_SWITCH_HOME_MODULE = 41
    FEATURE_SWITCH_HOME_FURNITURE_MAKE = 42
    FEATURE_SWITCH_HOME_LIMITED_SHOP = 43
    FEATURE_SWITCH_GADGET_INTERACT = 44
    FEATURE_SWITCH_REUNION_CLOSE_WITH_MARK = 45
    FEATURE_SWITCH_RANDOM_QUEST_TEMPLATE = 46


class FetterState(betterproto.Enum):
    FETTER_STATE_NONE = 0
    FETTER_STATE_NOT_OPEN = 1
    FETTER_STATE_OPEN = 2
    FETTER_STATE_FINISH = 3


class FishBattleResult(betterproto.Enum):
    FISH_BATTLE_RESULT_NONE = 0
    FISH_BATTLE_RESULT_SUCC = 1
    FISH_BATTLE_RESULT_FAIL = 2
    FISH_BATTLE_RESULT_TIMEOUT = 3
    FISH_BATTLE_RESULT_CANCEL = 4
    FISH_BATTLE_RESULT_EXIT = 5


class FishEscapeReason(betterproto.Enum):
    FISN_ESCAPE_NONE = 0
    FISH_ESCAPE_SHOCKED = 1
    FISH_ESCAPE_UNHOOK = 2


class ForgeQueueManipulateType(betterproto.Enum):
    RECEIVE_OUTPUT = 0
    STOP_FORGE = 1


class ForwardType(betterproto.Enum):
    FORWARD_LOCAL = 0
    FORWARD_TO_ALL = 1
    FORWARD_TO_ALL_EXCEPT_CUR = 2
    FORWARD_TO_HOST = 3
    FORWARD_TO_ALL_GUEST = 4
    FORWARD_TO_PEER = 5
    FORWARD_TO_PEERS = 6
    FORWARD_ONLY_SERVER = 7
    FORWARD_TO_ALL_EXIST_EXCEPT_CUR = 8


class FoundationOpType(betterproto.Enum):
    FOUNDATION_OP_NONE = 0
    FOUNDATION_OP_BUILD = 1
    FOUNDATION_OP_DEMOLITION = 2
    FOUNDATION_OP_REBUILD = 3
    FOUNDATION_OP_ROTATE = 4
    FOUNDATION_OP_LOCK = 5
    FOUNDATION_OP_UNLOCK = 6


class FoundationStatus(betterproto.Enum):
    FOUNDATION_STATUS_NONE = 0
    FOUNDATION_STATUS_INIT = 1
    FOUNDATION_STATUS_BUILDING = 2
    FOUNDATION_STATUS_BUILT = 3


class FriendEnterHomeOption(betterproto.Enum):
    FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM = 0
    FRIEND_ENTER_HOME_OPTION_REFUSE = 1
    FRIEND_ENTER_HOME_OPTION_DIRECT = 2


class FriendOnlineState(betterproto.Enum):
    FREIEND_DISCONNECT = 0
    FRIEND_ONLINE = 1


class GadgetBornType(betterproto.Enum):
    GADGET_BORN_NONE = 0
    GADGET_BORN_IN_AIR = 1
    GADGET_BORN_PLAYER = 2
    GADGET_BORN_MONSTER_HIT = 3
    GADGET_BORN_MONSTER_DIE = 4
    GADGET_BORN_GADGET = 5
    GADGET_BORN_GROUND = 6


class GadgetGuestBanDrop(betterproto.Enum):
    GADGET_GUEST_BAN_NONE = 0
    GADGET_GUEST_BAN_DIE_LUA = 1
    GADGET_GUEST_BAN_SUBFIELD = 2


class GadgetPlayType(betterproto.Enum):
    GADGET_PLAY_NONE = 0
    GADGET_PLAY_CRUSIBLE = 1


class GalleryStageType(betterproto.Enum):
    GALLERY_NONE = 0
    GALLERY_PRESTART = 1
    GALLERY_START = 2


class GalleryStopReason(betterproto.Enum):
    GALLERY_STOP_NONE = 0
    GALLERY_STOP_TIMEUP = 1
    GALLERY_STOP_CLIENT_INTERRUPT = 2
    GALLERY_STOP_LUA_INTERRUPT_SUCCESS = 3
    GALLERY_STOP_LUA_INTERRUPT_FAIL = 4


class GroupLoadStrategy(betterproto.Enum):
    GROUP_LOAD_NONE = 0
    GROUP_LOAD_SINGLE = 1
    GROUP_LOAD_MULTI = 2
    GROUP_LOAD_ALL = 3


class HideAndSeekStageType(betterproto.Enum):
    HIDE_AND_SEEK_STAGE_PREPARE = 0
    HIDE_AND_SEEK_STAGE_PICK = 1
    HIDE_AND_SEEK_STAGE_GAME = 2
    HIDE_AND_SEEK_STAGE_HIDE = 3
    HIDE_AND_SEEK_STAGE_SEEK = 4
    HIDE_AND_SEEK_STAGE_SETTLE = 5


class HitColliderType(betterproto.Enum):
    HIT_COLLIDER_INVALID = 0
    HIT_COLLIDER_HIT_BOX = 1
    HIT_COLLIDER_WET_HIT_BOX = 2
    HIT_COLLIDER_HEAD_BOX = 3


class HomePlantFieldStatus(betterproto.Enum):
    HOME_FIELD_STATUE_NONE = 0
    HOME_FIELD_STATUE_SEED = 1
    HOME_FIELD_STATUE_SPROUT = 2
    HOME_FIELD_STATUE_GATHER = 3


class HuntingOfferState(betterproto.Enum):
    HUNTING_OFFER_STATE_NONE = 0
    HUNTING_OFFER_STATE_STARTED = 1
    HUNTING_OFFER_STATE_UNSTARTED = 2
    HUNTING_OFFER_STATE_SUCC = 3


class InBattleMechanicusCardChallengeState(betterproto.Enum):
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE = 0
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING = 1
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL = 2
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS = 3


class InBattleMechanicusStageType(betterproto.Enum):
    IN_BATTLE_MECHANICUS_STAGE_NONE = 0
    IN_BATTLE_MECHANICUS_STAGE_BUILD = 1
    IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP = 2
    IN_BATTLE_MECHANICUS_STAGE_KILL = 3


class InteractType(betterproto.Enum):
    INTERACT_NONE = 0
    INTERACT_PICK_ITEM = 1
    INTERACT_GATHER = 2
    INTERACT_OPEN_CHEST = 3
    INTERACT_OPEN_STATUE = 4
    INTERACT_CONSUM = 5
    INTERACT_MP_PLAY_REWARD = 6
    INTERACT_VIEW = 7
    INTERACT_GENERAL_REWARD = 8
    INTERACT_MIRACLE_RING = 9
    INTERACT_FOUNDATION = 10
    INTERACT_ECHO_SHELL = 11
    INTERACT_HOME_GATHER = 12
    INTERACT_ENV_ANIMAL = 13
    INTERACT_QUEST_GADGET = 14


class InterOpType(betterproto.Enum):
    INTER_OP_FINISH = 0
    INTER_OP_START = 1


class LanguageType(betterproto.Enum):
    LANGUAGE_NONE = 0
    LANGUAGE_EN = 1
    LANGUAGE_SC = 2
    LANGUAGE_TC = 3
    LANGUAGE_FR = 4
    LANGUAGE_DE = 5
    LANGUAGE_ES = 6
    LANGUAGE_PT = 7
    LANGUAGE_RU = 8
    LANGUAGE_JP = 9
    LANGUAGE_KR = 10
    LANGUAGE_TH = 11
    LANGUAGE_VN = 12
    LANGUAGE_ID = 13


class LeaveWorldReason(betterproto.Enum):
    LEAVE_WORLD_REASON_NONE = 0
    LEAVE_WORLD_REASON_LOGOUT = 1
    LEAVE_WORLD_REASON_BACK_MY_WORLD = 2
    LEAVE_WORLD_REASON_KICK_BY_OWNER = 3


class LoginRewardConfigType(betterproto.Enum):
    LOGIN_REWARD_IMMEDIDATE = 0
    LOGIN_REWARD_FIRST = 1


class LuaShellNotifyType(betterproto.Enum):
    LUASHELL_NOTIFY = 0
    LUASHELL_HIDE = 1


class LunaRiteHintPointType(betterproto.Enum):
    LUNA_RITE_HINT_TYPE_NONE = 0
    LUNA_RITE_HINT_TYPE_RUNE = 1
    LUNA_RITE_HINT_TYPE_CHEST = 2


class LunaRiteHintStatusType(betterproto.Enum):
    LUNA_RITE_HINT_STATUS_DEFAULT = 0
    LUNA_RITE_HINT_STATUS_NO_COUNT = 1
    LUNA_RITE_HINT_STATUS_FINISH = 2


class LunchBoxSlotType(betterproto.Enum):
    LUNCH_BOX_SLOT_NONE = 0
    LUNCH_BOX_SLOT_REVIVE = 1
    LUNCH_BOX_SLOT_HEAL = 2


class MapMarkFromType(betterproto.Enum):
    MAP_MARK_FROM_TYPE_NOE = 0
    MAP_MARK_FROM_TYPE_MONSTER = 1
    MAP_MARK_FROM_TYPE_QUEST = 2


class MapMarkPointType(betterproto.Enum):
    MAP_MARK_POINT_TYPE_NPC = 0
    MAP_MARK_POINT_TYPE_QUEST = 1
    MAP_MARK_POINT_TYPE_SPECIAL = 2
    MAP_MARK_POINT_TYPE_MINE = 3
    MAP_MARK_POINT_TYPE_COLLECTION = 4
    MAP_MARK_POINT_TYPE_MONSTER = 5
    MAP_MARK_POINT_TYPE_FISH_POOL = 6


class MapMarkTipsType(betterproto.Enum):
    MARK_TIPS_DUNGEON_ELEMENT_TRIAL = 0


class MarkNewType(betterproto.Enum):
    MARK_NEW_TYPE_NONE = 0
    MARK_NEW_TYPE_COMBINE = 1
    MARK_NEW_TYPE_FORGE = 2


class MatchReason(betterproto.Enum):
    MATCH_NONE = 0
    MATCH_FINISH = 1
    MATCH_PLAYER_CANCEL = 2
    MATCH_TIMEOUT = 3
    MATCH_PLAYER_CONFIRM = 4
    MATCH_FAILED = 5
    MATCH_SYSTEM_ERROR = 6
    MATCH_INTERRUPTED = 7
    MATCH_MP_UNAVAILABLE = 8
    MATCH_CONFIRM_TIMEOUT = 9


class MatchType(betterproto.Enum):
    MATCH_TYPE_NONE = 0
    MATCH_TYPE_DUNGEON = 1
    MATCH_TYPE_MP_PLAY = 2
    MATCH_TYPE_MECHANICUS = 3
    MATCH_TYPE_GENERAL = 4


class MaterialDeleteReturnType(betterproto.Enum):
    MATERIAL_DELETE_RETURN_BAG = 0
    MATERIAL_DELETE_RETURN_SEED = 1


class MathExpressionType(betterproto.Enum):
    MATH_EXPR_NONE = 0
    MATH_EXPR_LEVEL = 1
    MATH_EXPR_REGISTER_TIME = 2
    MATH_EXPR_LAST_LOGIN_TIME = 3
    MATH_EXPR_TOTAL_LOGIN_DAYS = 4
    MATH_EXPR_PLATFORM = 5


class ModifierAction(betterproto.Enum):
    ADDED = 0
    REMOVED = 1


class MonsterBornType(betterproto.Enum):
    MONSTER_BORN_NONE = 0
    MONSTER_BORN_DEFAULT = 1
    MONSTER_BORN_RANDOM = 2


class MonsterGuestBanDrop(betterproto.Enum):
    MONSTER_GUEST_BAN_NONE = 0
    MONSTER_GUEST_BAN_DIE_EXP = 1
    MONSTER_GUEST_BAN_DIE_LUA = 2
    MONSTER_GUEST_BAN_DIE_EXCEL = 4
    MONSTER_GUEST_BAN_DIE_ACTIVITY = 8
    HP = 16
    MONSTER_GUEST_BAN_SUBFIELD = 32


class MotionState(betterproto.Enum):
    MOTION_NONE = 0
    MOTION_RESET = 1
    MOTION_STANDBY = 2
    MOTION_STANDBY_MOVE = 3
    MOTION_WALK = 4
    MOTION_RUN = 5
    MOTION_DASH = 6
    MOTION_CLIMB = 7
    MOTION_CLIMB_JUMP = 8
    MOTION_STANDBY_TO_CLIMB = 9
    MOTION_FIGHT = 10
    MOTION_JUMP = 11
    MOTION_DROP = 12
    MOTION_FLY = 13
    MOTION_SWIM_MOVE = 14
    MOTION_SWIM_IDLE = 15
    MOTION_SWIM_DASH = 16
    MOTION_SWIM_JUMP = 17
    MOTION_SLIP = 18
    MOTION_GO_UPSTAIRS = 19
    MOTION_FALL_ON_GROUND = 20
    MOTION_JUMP_UP_WALL_FOR_STANDBY = 21
    MOTION_JUMP_OFF_WALL = 22
    MOTION_POWERED_FLY = 23
    MOTION_LADDER_IDLE = 24
    MOTION_LADDER_MOVE = 25
    MOTION_LADDER_SLIP = 26
    MOTION_STANDBY_TO_LADDER = 27
    MOTION_LADDER_TO_STANDBY = 28
    MOTION_DANGER_STANDBY = 29
    MOTION_DANGER_STANDBY_MOVE = 30
    MOTION_DANGER_WALK = 31
    MOTION_DANGER_RUN = 32
    MOTION_DANGER_DASH = 33
    MOTION_CROUCH_IDLE = 34
    MOTION_CROUCH_MOVE = 35
    MOTION_CROUCH_ROLL = 36
    MOTION_NOTIFY = 37
    MOTION_LAND_SPEED = 38
    MOTION_MOVE_FAIL_ACK = 39
    MOTION_WATERFALL = 40
    MOTION_DASH_BEFORE_SHAKE = 41
    MOTION_SIT_IDLE = 42
    MOTION_FORCE_SET_POS = 43
    MOTION_QUEST_FORCE_DRAG = 44
    MOTION_FOLLOW_ROUTE = 45
    MOTION_SKIFF_BOARDING = 46
    MOTION_SKIFF_NORMAL = 47
    MOTION_SKIFF_DASH = 48
    MOTION_SKIFF_POWERED_DASH = 49
    MOTION_DESTROY_VEHICLE = 50
    MOTION_FLY_IDLE = 51
    MOTION_FLY_SLOW = 52
    MOTION_FLY_FAST = 53
    MOTION_NUM = 54


class MovingPlatformType(betterproto.Enum):
    MOVING_PLATFORM_NONE = 0
    MOVING_PLATFORM_USE_CONFIG = 1
    MOVING_PLATFORM_ABILITY = 2
    MOVING_PLATFORM_ROUTE = 3


class MpPlayType(betterproto.Enum):
    MP_PLAY_NONE = 0
    MP_PLAY_DUNGEON = 1
    MP_PLAY_CRUCIBLE = 2


class MpSettingType(betterproto.Enum):
    MP_SETTING_NO_ENTER = 0
    MP_SETTING_ENTER_FREELY = 1
    MP_SETTING_ENTER_AFTER_APPLY = 2


class MultistagePlayType(betterproto.Enum):
    MULTISTAGE_PLAY_TYPE_NON = 0
    MULTISTAGE_PLAY_TYPE_MECHANICUS = 1
    MULTISTAGE_PLAY_TYPE_FLEUR_FAIR = 2
    MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK = 3
    MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING = 4
    MULTISTAGE_PLAY_TYPE_CHESS = 5


class NpcTalkState(betterproto.Enum):
    NPC_TALK_NONE = 0
    NPC_TALK_AUTO = 1
    NPC_TALK_MANUAL = 2


class OpActivityType(betterproto.Enum):
    OP_ACTIVITY_NONE = 0
    OP_ACTIVITY_SIGN_IN = 1
    OP_ACTIVITY_BONUS = 2
    OP_ACTIVITY_TRAVEL_BUSINESS = 3
    OP_ACTIVITY_CRUCIBLE = 4


class PlatformType(betterproto.Enum):
    EDITOR = 0
    IOS = 1
    ANDROID = 2
    PC = 3
    PS4 = 4
    SERVER = 5
    CLOUD_ANDROID = 6
    CLOUD_IOS = 7
    PS5 = 8
    CLOUD_WEB = 9
    CLOUD_TV = 10


class PlayerDieOption(betterproto.Enum):
    DIE_OPT_NONE = 0
    DIE_OPT_REPLAY = 1
    DIE_OPT_CANCEL = 2
    DIE_OPT_REVIVE = 3


class PlayerDieType(betterproto.Enum):
    PLAYER_DIE_NONE = 0
    PLAYER_DIE_KILL_BY_MONSTER = 1
    PLAYER_DIE_KILL_BY_GEAR = 2
    PLAYER_DIE_FALL = 3
    PLAYER_DIE_DRAWN = 4
    PLAYER_DIE_ABYSS = 5
    PLAYER_DIE_GM = 6
    PLAYER_DIE_CLIMATE_COLD = 7
    PLAYER_DIE_STORM_LIGHTING = 8


class PlayerTag(betterproto.Enum):
    PLAYER_TAG_NORMAL = 0
    PLAYER_TAG_SUB_ACCOUNT = 3
    PLAYER_TAG_SUB_ACCOUNT_TRANS_TO_NORMAL = 5


class PropChangeReason(betterproto.Enum):
    PROP_CHANGE_NONE = 0
    PROP_CHANGE_STATUE_RECOVER = 1
    PROP_CHANGE_ENERGY_BALL = 2
    PROP_CHANGE_ABILITY = 3
    PROP_CHANGE_LEVELUP = 4
    PROP_CHANGE_ITEM = 5
    PROP_CHANGE_AVATAR_CARD = 6
    PROP_CHANGE_CITY_LEVELUP = 7
    PROP_CHANGE_AVATAR_UPGRADE = 8
    PROP_CHANGE_AVATAR_PROMOTE = 9
    PROP_CHANGE_PLAYER_ADD_EXP = 10
    PROP_CHANGE_FINISH_QUEST = 11
    PROP_CHANGE_GM = 12
    PROP_CHANGE_MANUAL_ADJUST_WORLD_LEVEL = 13


class ProtEntityType(betterproto.Enum):
    PROT_ENTITY_NONE = 0
    PROT_ENTITY_AVATAR = 1
    PROT_ENTITY_MONSTER = 2
    PROT_ENTITY_NPC = 3
    PROT_ENTITY_GADGET = 4
    PROT_ENTITY_REGION = 5
    PROT_ENTITY_WEAPON = 6
    PROT_ENTITY_WEATHER = 7
    PROT_ENTITY_SCENE = 8
    PROT_ENTITY_TEAM = 9
    PROT_ENTITY_MASSIVE_ENTITY = 10
    PROT_ENTITY_MP_LEVEL = 11
    PROT_ENTITY_PLAY_TEAM_ENTITY = 12
    PROT_ENTITY_EYE_POINT = 13
    PROT_ENTITY_MAX = 14


class PushTipsState(betterproto.Enum):
    PUSH_TIPS_STATE_NONE = 0
    PUSH_TIPS_STATE_START = 1
    PUSH_TIPS_STATE_READ = 2
    PUSH_TIPS_STATE_FINISH = 3


class RegionSearchState(betterproto.Enum):
    REGION_SEARCH_NONE = 0
    REGION_SEARCH_UNSTARTED = 1
    REGION_SEARCH_STARTED = 2
    REGION_SEARCH_WAIT_REWARD = 3
    REGION_SEARCH_FINISHED = 4


class RegionType(betterproto.Enum):
    REGION_PRODUCT = 0
    REGION_EXAM = 1
    REGION_DEV_PUB = 2
    REGION_DEV_PRI = 3


class ReportReasonType(betterproto.Enum):
    REPORT_REASON_NONE = 0
    REPORT_REASON_DECEPTIVE_ADS = 1
    REPORT_REASON_ABUSING = 2
    REPORT_REASON_CHEAT = 3
    REPORT_REASON_POLITICAL = 4
    REPORT_REASON_OTHER = 5
    REPORT_REASON_HOME = 6


class ResinCostType(betterproto.Enum):
    RESIN_COST_TYPE_NONE = 0
    RESIN_COST_TYPE_NORMAL = 1
    RESIN_COST_TYPE_CONDENSE = 2
    RESIN_COST_TYPE_REUNION_PRIVILEGE = 3
    RESIN_COST_TYPE_OP_ACTIVITY = 4
    RESIN_COST_TYPE_MATERIAL = 5


class Retcode(betterproto.Enum):
    RET_SUCC = 0
    RET_SVR_ERROR = 1
    RET_UNKNOWN_ERROR = 2
    RET_FREQUENT = 3
    RET_NODE_FORWARD_ERROR = 4
    RET_NOT_FOUND_CONFIG = 5
    RET_SYSTEM_BUSY = 6
    RET_GM_UID_BIND = 7
    RET_STOP_REGISTER = 10
    RET_STOP_SERVER = 11
    RET_ACCOUNT_VEIRFY_ERROR = 12
    RET_ACCOUNT_FREEZE = 13
    RET_REPEAT_LOGIN = 14
    RET_CLIENT_VERSION_ERROR = 15
    RET_TOKEN_ERROR = 16
    RET_ACCOUNT_NOT_EXIST = 17
    RET_WAIT_OTHER_LOGIN = 18
    RET_ANOTHER_LOGIN = 19
    RET_CLIENT_FORCE_UPDATE = 20
    RET_BLACK_UID = 21
    RET_LOGIN_DB_FAIL = 22
    RET_LOGIN_INIT_FAIL = 23
    RET_MYSQL_DUPLICATE = 24
    RET_MAX_PLAYER = 25
    RET_ANTI_ADDICT = 26
    RET_PS_PLAYER_WITHOUT_ONLINE_ID = 27
    RET_ONLINE_ID_NOT_FOUND = 28
    RET_ONLNE_ID_NOT_MATCH = 29
    RET_REGISTER_IS_FULL = 30
    RET_CHECKSUM_INVALID = 31
    RET_BLACK_REGISTER_IP = 32
    RET_EXCEED_REGISTER_RATE = 33
    RET_UNKNOWN_PLATFORM = 34
    RET_TOKEN_PARAM_ERROR = 35
    RET_ANTI_OFFLINE_ERROR = 36
    RET_BLACK_LOGIN_IP = 37
    RET_GET_TOKEN_SESSION_HAS_UID = 38
    RET_ENVIRONMENT_ERROR = 39
    RET_CHECK_CLIENT_VERSION_HASH_FAIL = 40
    RET_AVATAR_IN_CD = 101
    RET_AVATAR_NOT_ALIVE = 102
    RET_AVATAR_NOT_ON_SCENE = 103
    RET_CAN_NOT_FIND_AVATAR = 104
    RET_CAN_NOT_DEL_CUR_AVATAR = 105
    RET_DUPLICATE_AVATAR = 106
    RET_AVATAR_IS_SAME_ONE = 107
    RET_AVATAR_LEVEL_LESS_THAN = 108
    RET_AVATAR_CAN_NOT_CHANGE_ELEMENT = 109
    RET_AVATAR_BREAK_LEVEL_LESS_THAN = 110
    RET_AVATAR_ON_MAX_BREAK_LEVEL = 111
    RET_AVATAR_ID_ALREADY_EXIST = 112
    RET_AVATAR_NOT_DEAD = 113
    RET_AVATAR_IS_REVIVING = 114
    RET_AVATAR_ID_ERROR = 115
    RET_REPEAT_SET_PLAYER_BORN_DATA = 116
    RET_PLAYER_LEVEL_LESS_THAN = 117
    RET_AVATAR_LIMIT_LEVEL_ERROR = 118
    RET_CUR_AVATAR_NOT_ALIVE = 119
    RET_CAN_NOT_FIND_TEAM = 120
    RET_CAN_NOT_FIND_CUR_TEAM = 121
    RET_AVATAR_NOT_EXIST_IN_TEAM = 122
    RET_CAN_NOT_REMOVE_CUR_AVATAR_FROM_TEAM = 123
    RET_CAN_NOT_USE_REVIVE_ITEM_FOR_CUR_AVATAR = 124
    RET_TEAM_COST_EXCEED_LIMIT = 125
    RET_TEAM_AVATAR_IN_EXPEDITION = 126
    RET_TEAM_CAN_NOT_CHOSE_REPLACE_USE = 127
    RET_AVATAR_IN_COMBAT = 128
    RET_NICKNAME_UTF8_ERROR = 130
    RET_NICKNAME_TOO_LONG = 131
    RET_NICKNAME_WORD_ILLEGAL = 132
    RET_NICKNAME_TOO_MANY_DIGITS = 133
    RET_NICKNAME_IS_EMPTY = 134
    RET_PLAYER_NOT_ONLINE = 140
    RET_OPEN_STATE_NOT_OPEN = 141
    RET_FEATURE_CLOSED = 142
    RET_AVATAR_EXPEDITION_AVATAR_DIE = 152
    RET_AVATAR_EXPEDITION_COUNT_LIMIT = 153
    RET_AVATAR_EXPEDITION_MAIN_FORBID = 154
    RET_AVATAR_EXPEDITION_TRIAL_FORBID = 155
    RET_TEAM_NAME_ILLEGAL = 156
    RET_IS_NOT_IN_STANDBY = 157
    RET_IS_IN_DUNGEON = 158
    RET_IS_IN_LOCK_AVATAR_QUEST = 159
    RET_IS_USING_TRIAL_AVATAR = 160
    RET_IS_USING_TEMP_AVATAR = 161
    RET_NOT_HAS_FLYCLOAK = 162
    RET_FETTER_REWARD_ALREADY_GOT = 163
    RET_FETTER_REWARD_LEVEL_NOT_ENOUGH = 164
    RET_WORLD_LEVEL_ADJUST_MIN_LEVEL = 165
    RET_WORLD_LEVEL_ADJUST_CD = 166
    RET_NOT_HAS_COSTUME = 167
    RET_COSTUME_AVATAR_ERROR = 168
    RET_FLYCLOAK_PLATFORM_TYPE_ERR = 169
    RET_FLOAT_ERROR = 201
    RET_NPC_NOT_EXIST = 301
    RET_NPC_TOO_FAR = 302
    RET_NOT_CURRENT_TALK = 303
    RET_NPC_CREATE_FAIL = 304
    RET_NPC_MOVE_FAIL = 305
    RET_QUEST_NOT_EXIST = 401
    RET_QUEST_IS_FAIL = 402
    RET_QUEST_CONTENT_ERROR = 403
    RET_BARGAIN_NOT_ACTIVATED = 404
    RET_BARGAIN_FINISHED = 405
    RET_POINT_NOT_UNLOCKED = 501
    RET_POINT_TOO_FAR = 502
    RET_POINT_ALREAY_UNLOCKED = 503
    RET_ENTITY_NOT_EXIST = 504
    RET_ENTER_SCENE_FAIL = 505
    RET_PLAYER_IS_ENTER_SCENE = 506
    RET_CITY_MAX_LEVEL = 507
    RET_AREA_LOCKED = 508
    RET_JOIN_OTHER_WAIT = 509
    RET_WEATHER_AREA_NOT_FOUND = 510
    RET_WEATHER_IS_LOCKED = 511
    RET_NOT_IN_SELF_SCENE = 512
    RET_GROUP_NOT_EXIST = 513
    RET_MARK_NAME_ILLEGAL = 514
    RET_MARK_ALREADY_EXISTS = 515
    RET_MARK_OVERFLOW = 516
    RET_MARK_NOT_EXISTS = 517
    RET_MARK_UNKNOWN_TYPE = 518
    RET_MARK_NAME_TOO_LONG = 519
    RET_DISTANCE_LONG = 520
    RET_ENTER_SCENE_TOKEN_INVALID = 521
    RET_NOT_IN_WORLD_SCENE = 522
    RET_ANY_GALLERY_STARTED = 523
    RET_GALLERY_NOT_START = 524
    RET_GALLERY_INTERRUPT_ONLY_ON_SINGLE_MODE = 525
    RET_GALLERY_CANNOT_INTERRUPT = 526
    RET_GALLERY_WORLD_NOT_MEET = 527
    RET_GALLERY_SCENE_NOT_MEET = 528
    RET_CUR_PLAY_CANNOT_TRANSFER = 529
    RET_CANT_USE_WIDGET_IN_HOME_SCENE = 530
    RET_SCENE_GROUP_NOT_MATCH = 531
    RET_POS_ROT_INVALID = 551
    RET_MARK_INVALID_SCENE_ID = 552
    RET_INVALID_SCENE_TO_USE_ANCHOR_POINT = 553
    RET_ENTER_HOME_SCENE_FAIL = 554
    RET_CUR_SCENE_IS_NULL = 555
    RET_GROUP_ID_ERROR = 556
    RET_ITEM_NOT_EXIST = 601
    RET_PACK_EXCEED_MAX_WEIGHT = 602
    RET_ITEM_NOT_DROPABLE = 603
    RET_ITEM_NOT_USABLE = 604
    RET_ITEM_INVALID_USE_COUNT = 605
    RET_ITEM_INVALID_DROP_COUNT = 606
    RET_ITEM_ALREADY_EXIST = 607
    RET_ITEM_IN_COOLDOWN = 608
    RET_ITEM_COUNT_NOT_ENOUGH = 609
    RET_ITEM_INVALID_TARGET = 610
    RET_RECIPE_NOT_EXIST = 611
    RET_RECIPE_LOCKED = 612
    RET_RECIPE_UNLOCKED = 613
    RET_COMPOUND_QUEUE_FULL = 614
    RET_COMPOUND_NOT_FINISH = 615
    RET_MAIL_ITEM_NOT_GET = 616
    RET_ITEM_EXCEED_LIMIT = 617
    RET_AVATAR_CAN_NOT_USE = 618
    RET_ITEM_NEED_PLAYER_LEVEL = 619
    RET_RECIPE_NOT_AUTO_QTE = 620
    RET_COMPOUND_BUSY_QUEUE = 621
    RET_NEED_MORE_SCOIN = 622
    RET_SKILL_DEPOT_NOT_FOUND = 623
    RET_HCOIN_NOT_ENOUGH = 624
    RET_SCOIN_NOT_ENOUGH = 625
    RET_HCOIN_EXCEED_LIMIT = 626
    RET_SCOIN_EXCEED_LIMIT = 627
    RET_MAIL_EXPIRED = 628
    RET_REWARD_HAS_TAKEN = 629
    RET_COMBINE_COUNT_TOO_LARGE = 630
    RET_GIVING_ITEM_WRONG = 631
    RET_GIVING_IS_FINISHED = 632
    RET_GIVING_NOT_ACTIVED = 633
    RET_FORGE_QUEUE_FULL = 634
    RET_FORGE_QUEUE_CAPACITY = 635
    RET_FORGE_QUEUE_NOT_FOUND = 636
    RET_FORGE_QUEUE_EMPTY = 637
    RET_NOT_SUPPORT_ITEM = 638
    RET_ITEM_EMPTY = 639
    RET_VIRTUAL_EXCEED_LIMIT = 640
    RET_MATERIAL_EXCEED_LIMIT = 641
    RET_EQUIP_EXCEED_LIMIT = 642
    RET_ITEM_SHOULD_HAVE_NO_LEVEL = 643
    RET_WEAPON_PROMOTE_LEVEL_EXCEED_LIMIT = 644
    RET_WEAPON_LEVEL_INVALID = 645
    RET_UNKNOW_ITEM_TYPE = 646
    RET_ITEM_COUNT_IS_ZERO = 647
    RET_ITEM_IS_EXPIRED = 648
    RET_ITEM_EXCEED_OUTPUT_LIMIT = 649
    RET_EQUIP_LEVEL_HIGHER = 650
    RET_EQUIP_CAN_NOT_WAKE_OFF_WEAPON = 651
    RET_EQUIP_HAS_BEEN_WEARED = 652
    RET_EQUIP_WEARED_CANNOT_DROP = 653
    RET_AWAKEN_LEVEL_MAX = 654
    RET_MCOIN_NOT_ENOUGH = 655
    RET_MCOIN_EXCEED_LIMIT = 656
    RET_RESIN_NOT_ENOUGH = 660
    RET_RESIN_EXCEED_LIMIT = 661
    RET_RESIN_OPENSTATE_OFF = 662
    RET_RESIN_BOUGHT_COUNT_EXCEEDED = 663
    RET_RESIN_CARD_DAILY_REWARD_HAS_TAKEN = 664
    RET_RESIN_CARD_EXPIRED = 665
    RET_AVATAR_CAN_NOT_COOK = 666
    RET_ATTACH_AVATAR_CD = 667
    RET_AUTO_RECOVER_OPENSTATE_OFF = 668
    RET_AUTO_RECOVER_BOUGHT_COUNT_EXCEEDED = 669
    RET_RESIN_GAIN_FAILED = 670
    RET_WIDGET_ORNAMENTS_TYPE_ERROR = 671
    RET_ALL_TARGET_SATIATION_FULL = 672
    RET_FORGE_WORLD_LEVEL_NOT_MATCH = 673
    RET_FORGE_POINT_NOT_ENOUGH = 674
    RET_WIDGET_ANCHOR_POINT_FULL = 675
    RET_WIDGET_ANCHOR_POINT_NOT_FOUND = 676
    RET_ALL_BONFIRE_EXCEED_MAX_COUNT = 677
    RET_BONFIRE_EXCEED_MAX_COUNT = 678
    RET_LUNCH_BOX_DATA_ERROR = 679
    RET_INVALID_QUICK_USE_WIDGET = 680
    RET_INVALID_REPLACE_RESIN_COUNT = 681
    RET_PREV_DETECTED_GATHER_NOT_FOUND = 682
    RET_GOT_ALL_ONEOFF_GAHTER = 683
    RET_INVALID_WIDGET_MATERIAL_ID = 684
    RET_WIDGET_DETECTOR_NO_HINT_TO_CLEAR = 685
    RET_WIDGET_ALREADY_WITHIN_NEARBY_RADIUS = 686
    RET_WIDGET_CLIENT_COLLECTOR_NEED_POINTS = 687
    RET_WIDGET_IN_COMBAT = 688
    RET_WIDGET_NOT_SET_QUICK_USE = 689
    RET_ALREADY_ATTACH_WIDGET = 690
    RET_EQUIP_IS_LOCKED = 691
    RET_FORGE_IS_LOCKED = 692
    RET_COMBINE_IS_LOCKED = 693
    RET_FORGE_OUTPUT_STACK_LIMIT = 694
    RET_ALREADY_DETTACH_WIDGET = 695
    RET_GADGET_BUILDER_EXCEED_MAX_COUNT = 696
    RET_REUNION_PRIVILEGE_RESIN_TYPE_IS_NORMAL = 697
    RET_BONUS_COUNT_EXCEED_DOUBLE_LIMIT = 698
    RET_RELIQUARY_DECOMPOSE_PARAM_ERROR = 699
    RET_ITEM_COMBINE_COUNT_NOT_ENOUGH = 700
    RET_GOODS_NOT_EXIST = 701
    RET_GOODS_MATERIAL_NOT_ENOUGH = 702
    RET_GOODS_NOT_IN_TIME = 703
    RET_GOODS_BUY_NUM_NOT_ENOUGH = 704
    RET_GOODS_BUY_NUM_ERROR = 705
    RET_SHOP_NOT_OPEN = 706
    RET_SHOP_CONTENT_NOT_MATCH = 707
    RET_CHAT_FORBIDDEN = 798
    RET_CHAT_CD = 799
    RET_CHAT_FREQUENTLY = 800
    RET_GADGET_NOT_EXIST = 801
    RET_GADGET_NOT_INTERACTIVE = 802
    RET_GADGET_NOT_GATHERABLE = 803
    RET_CHEST_IS_LOCKED = 804
    RET_GADGET_CREATE_FAIL = 805
    RET_WORKTOP_OPTION_NOT_EXIST = 806
    RET_GADGET_STATUE_NOT_ACTIVE = 807
    RET_GADGET_STATUE_OPENED = 808
    RET_BOSS_CHEST_NO_QUALIFICATION = 809
    RET_BOSS_CHEST_LIFE_TIME_OVER = 810
    RET_BOSS_CHEST_WEEK_NUM_LIMIT = 811
    RET_BOSS_CHEST_GUEST_WORLD_LEVEL = 812
    RET_BOSS_CHEST_HAS_TAKEN = 813
    RET_BLOSSOM_CHEST_NO_QUALIFICATION = 814
    RET_BLOSSOM_CHEST_LIFE_TIME_OVER = 815
    RET_BLOSSOM_CHEST_HAS_TAKEN = 816
    RET_BLOSSOM_CHEST_GUEST_WORLD_LEVEL = 817
    RET_MP_PLAY_REWARD_NO_QUALIFICATION = 818
    RET_MP_PLAY_REWARD_HAS_TAKEN = 819
    RET_GENERAL_REWARD_NO_QUALIFICATION = 820
    RET_GENERAL_REWARD_LIFE_TIME_OVER = 821
    RET_GENERAL_REWARD_HAS_TAKEN = 822
    RET_GADGET_NOT_VEHICLE = 823
    RET_VEHICLE_SLOT_OCCUPIED = 824
    RET_NOT_IN_VEHICLE = 825
    RET_CREATE_VEHICLE_IN_CD = 826
    RET_CREATE_VEHICLE_POS_INVALID = 827
    RET_VEHICLE_POINT_NOT_UNLOCK = 828
    RET_GADGET_INTERACT_COND_NOT_MEET = 829
    RET_GADGET_INTERACT_PARAM_ERROR = 830
    RET_ACTIVITY_CLOSE = 860
    RET_ACTIVITY_ITEM_ERROR = 861
    RET_ACTIVITY_CONTRIBUTION_NOT_ENOUGH = 862
    RET_SEA_LAMP_PHASE_NOT_FINISH = 863
    RET_SEA_LAMP_FLY_NUM_LIMIT = 864
    RET_SEA_LAMP_FLY_LAMP_WORD_ILLEGAL = 865
    RET_ACTIVITY_WATCHER_REWARD_TAKEN = 866
    RET_ACTIVITY_WATCHER_REWARD_NOT_FINISHED = 867
    RET_SALESMAN_ALREADY_DELIVERED = 868
    RET_SALESMAN_REWARD_COUNT_NOT_ENOUGH = 869
    RET_SALESMAN_POSITION_INVALID = 870
    RET_DELIVER_NOT_FINISH_ALL_QUEST = 871
    RET_DELIVER_ALREADY_TAKE_DAILY_REWARD = 872
    RET_ASTER_PROGRESS_EXCEED_LIMIT = 873
    RET_ASTER_CREDIT_EXCEED_LIMIT = 874
    RET_ASTER_TOKEN_EXCEED_LIMIT = 875
    RET_ASTER_CREDIT_NOT_ENOUGH = 876
    RET_ASTER_TOKEN_NOT_ENOUGH = 877
    RET_ASTER_SPECIAL_REWARD_HAS_TAKEN = 878
    RET_FLIGHT_GROUP_ACTIVITY_NOT_STARTED = 879
    RET_ASTER_MID_PREVIOUS_BATTLE_NOT_FINISHED = 880
    RET_DRAGON_SPINE_SHIMMERING_ESSENCE_EXCEED_LIMIT = 881
    RET_DRAGON_SPINE_WARM_ESSENCE_EXCEED_LIMIT = 882
    RET_DRAGON_SPINE_WONDROUS_ESSENCE_EXCEED_LIMIT = 883
    RET_DRAGON_SPINE_SHIMMERING_ESSENCE_NOT_ENOUGH = 884
    RET_DRAGON_SPINE_WARM_ESSENCE_NOT_ENOUGH = 885
    RET_DRAGON_SPINE_WONDROUS_ESSENCE_NOT_ENOUGH = 886
    RET_EFFIGY_FIRST_PASS_REWARD_HAS_TAKEN = 891
    RET_EFFIGY_REWARD_HAS_TAKEN = 892
    RET_TREASURE_MAP_ADD_TOKEN_EXCEED_LIMIT = 893
    RET_TREASURE_MAP_TOKEN_NOT_ENOUGHT = 894
    RET_SEA_LAMP_COIN_EXCEED_LIMIT = 895
    RET_SEA_LAMP_COIN_NOT_ENOUGH = 896
    RET_SEA_LAMP_POPULARITY_EXCEED_LIMIT = 897
    RET_ACTIVITY_AVATAR_REWARD_NOT_OPEN = 898
    RET_ACTIVITY_AVATAR_REWARD_HAS_TAKEN = 899
    RET_ARENA_ACTIVITY_ALREADY_STARTED = 900
    RET_TALENT_ALREAY_UNLOCKED = 901
    RET_PREV_TALENT_NOT_UNLOCKED = 902
    RET_BIG_TALENT_POINT_NOT_ENOUGH = 903
    RET_SMALL_TALENT_POINT_NOT_ENOUGH = 904
    RET_PROUD_SKILL_ALREADY_GOT = 905
    RET_PREV_PROUD_SKILL_NOT_GET = 906
    RET_PROUD_SKILL_MAX_LEVEL = 907
    RET_CANDIDATE_SKILL_DEPOT_ID_NOT_FIND = 910
    RET_SKILL_DEPOT_IS_THE_SAME = 911
    RET_MONSTER_NOT_EXIST = 1001
    RET_MONSTER_CREATE_FAIL = 1002
    RET_DUNGEON_ENTER_FAIL = 1101
    RET_DUNGEON_QUIT_FAIL = 1102
    RET_DUNGEON_ENTER_EXCEED_DAY_COUNT = 1103
    RET_DUNGEON_REVIVE_EXCEED_MAX_COUNT = 1104
    RET_DUNGEON_REVIVE_FAIL = 1105
    RET_DUNGEON_NOT_SUCCEED = 1106
    RET_DUNGEON_CAN_NOT_CANCEL = 1107
    RET_DEST_DUNGEON_SETTLED = 1108
    RET_DUNGEON_CANDIDATE_TEAM_IS_FULL = 1109
    RET_DUNGEON_CANDIDATE_TEAM_IS_DISMISS = 1110
    RET_DUNGEON_CANDIDATE_TEAM_NOT_ALL_READY = 1111
    RET_DUNGEON_CANDIDATE_TEAM_HAS_REPEAT_AVATAR = 1112
    RET_DUNGEON_CANDIDATE_NOT_SINGEL_PASS = 1113
    RET_DUNGEON_REPLAY_NEED_ALL_PLAYER_DIE = 1114
    RET_DUNGEON_REPLAY_HAS_REVIVE_COUNT = 1115
    RET_DUNGEON_OTHERS_LEAVE = 1116
    RET_DUNGEON_ENTER_LEVEL_LIMIT = 1117
    RET_DUNGEON_CANNOT_ENTER_PLOT_IN_MP = 1118
    RET_DUNGEON_DROP_SUBFIELD_LIMIT = 1119
    RET_DUNGEON_BE_INVITE_PLAYER_AVATAR_ALL_DIE = 1120
    RET_DUNGEON_CANNOT_KICK = 1121
    RET_DUNGEON_CANDIDATE_TEAM_SOMEONE_LEVEL_LIMIT = 1122
    RET_DUNGEON_IN_FORCE_QUIT = 1123
    RET_DUNGEON_GUEST_QUIT_DUNGEON = 1124
    RET_DUNGEON_TICKET_FAIL = 1125
    RET_MP_NOT_IN_MY_WORLD = 1201
    RET_MP_IN_MP_MODE = 1202
    RET_MP_SCENE_IS_FULL = 1203
    RET_MP_MODE_NOT_AVAILABLE = 1204
    RET_MP_PLAYER_NOT_ENTERABLE = 1205
    RET_MP_QUEST_BLOCK_MP = 1206
    RET_MP_IN_ROOM_SCENE = 1207
    RET_MP_WORLD_IS_FULL = 1208
    RET_MP_PLAYER_NOT_ALLOW_ENTER = 1209
    RET_MP_PLAYER_DISCONNECTED = 1210
    RET_MP_NOT_IN_MP_MODE = 1211
    RET_MP_OWNER_NOT_ENTER = 1212
    RET_MP_ALLOW_ENTER_PLAYER_FULL = 1213
    RET_MP_TARGET_PLAYER_IN_TRANSFER = 1214
    RET_MP_TARGET_ENTERING_OTHER = 1215
    RET_MP_OTHER_ENTERING = 1216
    RET_MP_ENTER_MAIN_PLAYER_IN_PLOT = 1217
    RET_MP_NOT_PS_PLAYER = 1218
    RET_MP_PLAY_NOT_ACTIVE = 1219
    RET_MP_PLAY_REMAIN_REWARDS = 1220
    RET_MP_PLAY_NO_REWARD = 1221
    RET_MP_OPEN_STATE_FAIL = 1223
    RET_MP_PLAYER_IN_BLACKLIST = 1224
    RET_MP_REPLY_TIMEOUT = 1225
    RET_MP_IS_BLOCK = 1226
    RET_MP_ENTER_MAIN_PLAYER_IN_MP_PLAY = 1227
    RET_MP_IN_MP_PLAY_BATTLE = 1228
    RET_MP_GUEST_HAS_REWARD_REMAINED = 1229
    RET_MP_QUIT_MP_INVALID = 1230
    RET_MP_OTHER_DATA_VERSION_NOT_LATEST = 1231
    RET_MP_DATA_VERSION_NOT_LATEST = 1232
    RET_MP_CUR_WORLD_NOT_ENTERABLE = 1233
    RET_MP_ANY_GALLERY_STARTED = 1234
    RET_MP_HAS_ACTIVE_DRAFT = 1235
    RET_MP_PLAYER_IN_DUNGEON = 1236
    RET_MP_MATCH_FULL = 1237
    RET_MP_MATCH_LIMIT = 1238
    RET_MP_MATCH_IN_PUNISH = 1239
    RET_MP_IS_IN_MULTISTAGE = 1240
    RET_MP_MATCH_PLAY_NOT_OPEN = 1241
    RET_MP_ONLY_MP_WITH_PS_PLAYER = 1242
    RET_MP_GUEST_LOADING_FIRST_ENTER = 1243
    RET_MP_SUMMER_TIME_SPRINT_BOAT_ONGOING = 1244
    RET_MP_BLITZ_RUSH_PARKOUR_CHALLENGE_ONGOING = 1245
    RET_MP_MUSIC_GAME_ONGOING = 1246
    RET_MAIL_PARA_ERR = 1301
    RET_MAIL_MAX_NUM = 1302
    RET_MAIL_ITEM_NUM_EXCEED = 1303
    RET_MAIL_TITLE_LEN_EXCEED = 1304
    RET_MAIL_CONTENT_LEN_EXCEED = 1305
    RET_MAIL_SENDER_LEN_EXCEED = 1306
    RET_MAIL_PARSE_PACKET_FAIL = 1307
    RET_OFFLINE_MSG_MAX_NUM = 1308
    RET_OFFLINE_MSG_SAME_TICKET = 1309
    RET_MAIL_EXCEL_MAIL_TYPE_ERROR = 1310
    RET_MAIL_CANNOT_SEND_MCOIN = 1311
    RET_MAIL_HCOIN_EXCEED_LIMIT = 1312
    RET_MAIL_SCOIN_EXCEED_LIMIT = 1313
    RET_MAIL_MATERIAL_ID_INVALID = 1314
    RET_MAIL_AVATAR_EXCEED_LIMIT = 1315
    RET_MAIL_GACHA_TICKET_ETC_EXCEED_LIMIT = 1316
    RET_MAIL_ITEM_EXCEED_CEHUA_LIMIT = 1317
    RET_MAIL_SPACE_OR_REST_NUM_NOT_ENOUGH = 1318
    RET_MAIL_TICKET_IS_EMPTY = 1319
    RET_MAIL_TRANSACTION_IS_EMPTY = 1320
    RET_DAILY_TASK_NOT_FINISH = 1330
    RET_DAILY_TAKS_HAS_TAKEN = 1331
    RET_SOCIAL_OFFLINE_MSG_NUM_EXCEED = 1332
    RET_DAILY_TASK_FILTER_CITY_NOT_OPEN = 1333
    RET_GACHA_INAVAILABLE = 1401
    RET_GACHA_RANDOM_NOT_MATCH = 1402
    RET_GACHA_SCHEDULE_NOT_MATCH = 1403
    RET_GACHA_INVALID_TIMES = 1404
    RET_GACHA_COST_ITEM_NOT_ENOUGH = 1405
    RET_GACHA_TIMES_LIMIT = 1406
    RET_GACHA_WISH_SAME_ITEM = 1407
    RET_GACHA_WISH_INVALID_ITEM = 1408
    RET_INVESTIGAITON_NOT_IN_PROGRESS = 1501
    RET_INVESTIGAITON_UNCOMPLETE = 1502
    RET_INVESTIGAITON_REWARD_TAKEN = 1503
    RET_INVESTIGAITON_TARGET_STATE_ERROR = 1504
    RET_PUSH_TIPS_NOT_FOUND = 1505
    RET_SIGN_IN_RECORD_NOT_FOUND = 1506
    RET_ALREADY_HAVE_SIGNED_IN = 1507
    RET_SIGN_IN_COND_NOT_SATISFIED = 1508
    RET_BONUS_ACTIVITY_NOT_UNREWARDED = 1509
    RET_SIGN_IN_REWARDED = 1510
    RET_TOWER_NOT_OPEN = 1521
    RET_TOWER_HAVE_DAILY_RECORD = 1522
    RET_TOWER_NOT_RECORD = 1523
    RET_TOWER_HAVE_RECORD = 1524
    RET_TOWER_TEAM_NUM_ERROR = 1525
    RET_TOWER_FLOOR_NOT_OPEN = 1526
    RET_TOWER_NO_FLOOR_STAR_RECORD = 1527
    RET_ALREADY_HAS_TOWER_BUFF = 1528
    RET_DUPLICATE_ENTER_LEVEL = 1529
    RET_NOT_IN_TOWER_LEVEL = 1530
    RET_IN_TOWER_LEVEL = 1531
    RET_TOWER_PREV_FLOOR_NOT_FINISH = 1532
    RET_TOWER_STAR_NOT_ENOUGH = 1533
    RET_BATTLE_PASS_NO_SCHEDULE = 1541
    RET_BATTLE_PASS_HAS_BUYED = 1542
    RET_BATTLE_PASS_LEVEL_OVERFLOW = 1543
    RET_BATTLE_PASS_PRODUCT_EXPIRED = 1544
    RET_MATCH_HOST_QUIT = 1561
    RET_MATCH_ALREADY_IN_MATCH = 1562
    RET_MATCH_NOT_IN_MATCH = 1563
    RET_MATCH_APPLYING_ENTER_MP = 1564
    RET_WIDGET_TREASURE_SPOT_NOT_FOUND = 1581
    RET_WIDGET_TREASURE_ENTITY_EXISTS = 1582
    RET_WIDGET_TREASURE_SPOT_FAR_AWAY = 1583
    RET_WIDGET_TREASURE_FINISHED_TODAY = 1584
    RET_WIDGET_QUICK_USE_REQ_PARAM_ERROR = 1585
    RET_WIDGET_CAMERA_SCAN_ID_ERROR = 1586
    RET_WIDGET_NOT_ACTIVE = 1587
    RET_WIDGET_FEATHER_NOT_ACTIVE = 1588
    RET_WIDGET_FEATHER_GADGET_TOO_FAR_AWAY = 1589
    RET_UID_NOT_EXIST = 2001
    RET_PARSE_BIN_ERROR = 2002
    RET_ACCOUNT_INFO_NOT_EXIST = 2003
    RET_ORDER_INFO_NOT_EXIST = 2004
    RET_SNAPSHOT_INDEX_ERROR = 2005
    RET_MAIL_HAS_BEEN_SENT = 2006
    RET_PRODUCT_NOT_EXIST = 2007
    RET_UNFINISH_ORDER = 2008
    RET_ID_NOT_EXIST = 2009
    RET_ORDER_TRADE_EARLY = 2010
    RET_ORDER_FINISHED = 2011
    RET_GAMESERVER_VERSION_WRONG = 2012
    RET_OFFLINE_OP_FULL_LENGTH = 2013
    RET_CONCERT_PRODUCT_OBTAIN_LIMIT = 2014
    RET_CONCERT_PRODUCT_TICKET_DUPLICATED = 2015
    RET_CONCERT_PRODUCT_TICKET_EMPTY = 2016
    RET_REDIS_MODIFIED = 5001
    RET_REDIS_UID_NOT_EXIST = 5002
    RET_PATHFINDING_DATA_NOT_EXIST = 6001
    RET_PATHFINDING_DESTINATION_NOT_EXIST = 6002
    RET_PATHFINDING_ERROR_SCENE = 6003
    RET_PATHFINDING_SCENE_DATA_LOADING = 6004
    RET_FRIEND_COUNT_EXCEEDED = 7001
    RET_PLAYER_NOT_EXIST = 7002
    RET_ALREADY_SENT_ADD_REQUEST = 7003
    RET_ASK_FRIEND_LIST_FULL = 7004
    RET_PLAYER_ALREADY_IS_FRIEND = 7005
    RET_PLAYER_NOT_ASK_FRIEND = 7006
    RET_TARGET_FRIEND_COUNT_EXCEED = 7007
    RET_NOT_FRIEND = 7008
    RET_BIRTHDAY_CANNOT_BE_SET_TWICE = 7009
    RET_CANNOT_ADD_SELF_FRIEND = 7010
    RET_SIGNATURE_ILLEGAL = 7011
    RET_PS_PLAYER_CANNOT_ADD_FRIENDS = 7012
    RET_PS_PLAYER_CANNOT_REMOVE_FRIENDS = 7013
    RET_NAME_CARD_NOT_UNLOCKED = 7014
    RET_ALREADY_IN_BLACKLIST = 7015
    RET_PS_PALEYRS_CANNOT_ADD_BLACKLIST = 7016
    RET_PLAYER_BLACKLIST_FULL = 7017
    RET_PLAYER_NOT_IN_BLACKLIST = 7018
    RET_BLACKLIST_PLAYER_CANNOT_ADD_FRIEND = 7019
    RET_IN_TARGET_BLACKLIST = 7020
    RET_CANNOT_ADD_TARGET_FRIEND = 7021
    RET_BIRTHDAY_FORMAT_ERROR = 7022
    RET_ONLINE_ID_NOT_EXISTS = 7023
    RET_FIRST_SHARE_REWARD_HAS_TAKEN = 7024
    RET_PS_PLAYER_CANNOT_REMOVE_BLACKLIST = 7025
    RET_REPORT_CD = 7026
    RET_REPORT_CONTENT_ILLEGAL = 7027
    RET_REMARK_WORD_ILLEGAL = 7028
    RET_REMARK_TOO_LONG = 7029
    RET_REMARK_UTF8_ERROR = 7030
    RET_REMARK_IS_EMPTY = 7031
    RET_ASK_ADD_FRIEND_CD = 7032
    RET_SHOW_AVATAR_INFO_NOT_EXIST = 7033
    RET_PLAYER_NOT_SHOW_AVATAR = 7034
    RET_SOCIAL_UPDATE_SHOW_LIST_REPEAT_ID = 7035
    RET_PSN_ID_NOT_FOUND = 7036
    RET_EMOJI_COLLECTION_NUM_EXCEED_LIMIT = 7037
    RET_REMARK_EMPTY = 7038
    RET_OFFERING_NOT_OPEN = 7081
    RET_OFFERING_LEVEL_LIMIT = 7082
    RET_OFFERING_LEVEL_NOT_REACH = 7083
    RET_OFFERING_LEVEL_HAS_TAKEN = 7084
    RET_CITY_REPUTATION_NOT_OPEN = 7101
    RET_CITY_REPUTATION_LEVEL_TAKEN = 7102
    RET_CITY_REPUTATION_LEVEL_NOT_REACH = 7103
    RET_CITY_REPUTATION_PARENT_QUEST_TAKEN = 7104
    RET_CITY_REPUTATION_PARENT_QUEST_UNFINISH = 7105
    RET_CITY_REPUTATION_ACCEPT_REQUEST = 7106
    RET_CITY_REPUTATION_NOT_ACCEPT_REQUEST = 7107
    RET_CITY_REPUTATION_ACCEPT_REQUEST_LIMIT = 7108
    RET_CITY_REPUTATION_ENTRANCE_NOT_OPEN = 7109
    RET_CITY_REPUTATION_TAKEN_REQUEST_REWARD = 7110
    RET_CITY_REPUTATION_SWITCH_CLOSE = 7111
    RET_CITY_REPUTATION_ENTRACE_SWITCH_CLOSE = 7112
    RET_CITY_REPUTATION_TAKEN_EXPLORE_REWARD = 7113
    RET_CITY_REPUTATION_EXPLORE_NOT_REACH = 7114
    RET_MECHANICUS_NOT_OPEN = 7120
    RET_MECHANICUS_GEAR_UNLOCK = 7121
    RET_MECHANICUS_GEAR_LOCK = 7122
    RET_MECHANICUS_GEAR_LEVEL_LIMIT = 7123
    RET_MECHANICUS_COIN_NOT_ENOUGH = 7124
    RET_MECHANICUS_NO_SEQUENCE = 7125
    RET_MECHANICUS_SEQUENCE_LIMIT_LEVEL = 7126
    RET_MECHANICUS_SEQUENCE_LIMIT_OPEN = 7127
    RET_MECHANICUS_DIFFICULT_NOT_SUPPORT = 7128
    RET_MECHANICUS_TICKET_NOT_ENOUGH = 7129
    RET_MECHANICUS_TEACH_NOT_FINISH = 7130
    RET_MECHANICUS_TEACH_FINISHED = 7131
    RET_MECHANICUS_PREV_DIFFICULT_LEVEL_BLOCK = 7132
    RET_MECHANICUS_PLAYER_LIMIT = 7133
    RET_MECHANICUS_PUNISH_TIME = 7134
    RET_MECHANICUS_SWITCH_CLOSE = 7135
    RET_MECHANICUS_BATTLE_NOT_IN_DUNGEON = 7150
    RET_MECHANICUS_BATTLE_PLAY_NOT_FOUND = 7151
    RET_MECHANICUS_BATTLE_DUPLICATE_PICK_CARD = 7152
    RET_MECHANICUS_BATTLE_PLAYER_NOT_IN_PLAY = 7153
    RET_MECHANICUS_BATTLE_CARD_NOT_AVAILABLE = 7154
    RET_MECHANICUS_BATTLE_NOT_IN_CARD_STAGE = 7155
    RET_MECHANICUS_BATTLE_CARD_IS_WAITING = 7156
    RET_MECHANICUS_BATTLE_CARD_ALL_CONFIRMED = 7157
    RET_MECHANICUS_BATTLE_CARD_ALREADY_CONFIRMED = 7158
    RET_MECHANICUS_BATTLE_CARD_CONFIRMED_BY_OTHER = 7159
    RET_MECHANICUS_BATTLE_CARD_NOT_ENOUGH_POINTS = 7160
    RET_MECHANICUS_BATTLE_CARD_ALREADY_SKIPPED = 7161
    RET_LEGENDARY_KEY_NOT_ENOUGH = 8001
    RET_LEGENDARY_KEY_EXCEED_LIMIT = 8002
    RET_DAILY_TASK_NOT_ENOUGH_TO_REDEEM = 8003
    RET_PERSONAL_LINE_OPEN_STATE_OFF = 8004
    RET_PERSONAL_LINE_LEVEL_NOT_ENOUGH = 8005
    RET_PERSONAL_LINE_NOT_OPEN = 8006
    RET_PERSONAL_LINE_PRE_QUEST_NOT_FINISH = 8007
    RET_HUNTING_ALREADY_FINISH_OFFER_LIMIT = 8201
    RET_HUNTING_HAS_UNFINISHED_OFFER = 8202
    RET_HUNTING_FAILED_OFFER_NOT_CD_READY = 8203
    RET_HUNTING_NOT_TAKE_OFFER = 8204
    RET_HUNTING_CANNOT_TAKE_TWICE = 8205
    RET_RPIVATE_CHAT_INVALID_CONTENT_TYPE = 8901
    RET_PRIVATE_CHAT_TARGET_IS_NOT_FRIEND = 8902
    RET_PRIVATE_CHAT_CONTENT_NOT_SUPPORTED = 8903
    RET_PRIVATE_CHAT_CONTENT_TOO_LONG = 8904
    RET_PRIVATE_CHAT_PULL_TOO_FAST = 8905
    RET_PRIVATE_CHAT_REPEAT_READ = 8906
    RET_PRIVATE_CHAT_READ_NOT_FRIEND = 8907
    RET_REUNION_FINISHED = 9001
    RET_REUNION_NOT_ACTIVATED = 9002
    RET_REUNION_ALREADY_TAKE_FIRST_REWARD = 9003
    RET_REUNION_SIGN_IN_REWARDED = 9004
    RET_REUNION_WATCHER_REWARDED = 9005
    RET_REUNION_WATCHER_NOT_FINISH = 9006
    RET_REUNION_MISSION_REWARDED = 9007
    RET_REUNION_MISSION_NOT_FINISH = 9008
    RET_REUNION_WATCHER_REWARD_NOT_UNLOCKED = 9009
    RET_BLESSING_CONTENT_CLOSED = 9101
    RET_BLESSING_NOT_ACTIVE = 9102
    RET_BLESSING_NOT_TODAY_ENTITY = 9103
    RET_BLESSING_ENTITY_EXCEED_SCAN_NUM_LIMIT = 9104
    RET_BLESSING_DAILY_SCAN_NUM_EXCEED_LIMIT = 9105
    RET_BLESSING_REDEEM_REWARD_NUM_EXCEED_LIMIT = 9106
    RET_BLESSING_REDEEM_PIC_NUM_NOT_ENOUGH = 9107
    RET_BLESSING_PIC_NOT_ENOUGH = 9108
    RET_BLESSING_PIC_HAS_RECEIVED = 9109
    RET_BLESSING_TARGET_RECV_NUM_EXCEED = 9110
    RET_FLEUR_FAIR_CREDIT_EXCEED_LIMIT = 9111
    RET_FLEUR_FAIR_CREDIT_NOT_ENOUGH = 9112
    RET_FLEUR_FAIR_TOKEN_EXCEED_LIMIT = 9113
    RET_FLEUR_FAIR_TOKEN_NOT_ENOUGH = 9114
    RET_FLEUR_FAIR_MINIGAME_NOT_OPEN = 9115
    RET_FLEUR_FAIR_MUSIC_GAME_DIFFICULTY_NOT_UNLOCK = 9116
    RET_FLEUR_FAIR_DUNGEON_LOCKED = 9117
    RET_FLEUR_FAIR_DUNGEON_PUNISH_TIME = 9118
    RET_FLEUR_FAIR_ONLY_OWNER_CAN_RESTART_MINIGAM = 9119
    RET_WATER_SPIRIT_COIN_EXCEED_LIMIT = 9120
    RET_WATER_SPIRIT_COIN_NOT_ENOUGH = 9121
    RET_REGION_SEARCH_NO_SEARCH = 9122
    RET_REGION_SEARCH_STATE_ERROR = 9123
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_STAGE_NOT_OPEN = 9130
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_NOT_OPEN = 9131
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_FIRST_PASS_REWARD_HAS_TAKEN = 9132
    RET_CHANNELLER_SLAB_LOOP_DUNGEON_SCORE_REWARD_HAS_TAKEN = 9133
    RET_CHANNELLER_SLAB_INVALID_ONE_OFF_DUNGEON = 9134
    RET_CHANNELLER_SLAB_ONE_OFF_DUNGEON_DONE = 9135
    RET_CHANNELLER_SLAB_ONE_OFF_DUNGEON_STAGE_NOT_OPEN = 9136
    RET_CHANNELLER_SLAB_TOKEN_EXCEED_LIMIT = 9137
    RET_CHANNELLER_SLAB_TOKEN_NOT_ENOUGH = 9138
    RET_CHANNELLER_SLAB_PLAYER_NOT_IN_ONE_OFF_DUNGEON = 9139
    RET_MIST_TRIAL_SELECT_CHARACTER_NUM_NOT_ENOUGH = 9150
    RET_HIDE_AND_SEEK_PLAY_NOT_OPEN = 9160
    RET_HIDE_AND_SEEK_PLAY_MAP_NOT_OPEN = 9161
    RET_SUMMER_TIME_DRAFT_WOORD_EXCEED_LIMIT = 9170
    RET_SUMMER_TIME_DRAFT_WOORD_NOT_ENOUGH = 9171
    RET_SUMMER_TIME_MINI_HARPASTUM_EXCEED_LIMIT = 9172
    RET_SUMMER_TIME_MINI_HARPASTUMNOT_ENOUGH = 9173
    RET_BOUNCE_CONJURING_COIN_EXCEED_LIMIT = 9180
    RET_BOUNCE_CONJURING_COIN_NOT_ENOUGH = 9181
    RET_CHESS_TEACH_MAP_FINISHED = 9183
    RET_CHESS_TEACH_MAP_UNFINISHED = 9184
    RET_CHESS_COIN_EXCEED_LIMIT = 9185
    RET_CHESS_COIN_NOT_ENOUGH = 9186
    RET_CHESS_IN_PUNISH_TIME = 9187
    RET_CHESS_PREV_MAP_UNFINISHED = 9188
    RET_CHESS_MAP_LOCKED = 9189
    RET_BLITZ_RUSH_NOT_OPEN = 9192
    RET_BLITZ_RUSH_DUNGEON_NOT_OPEN = 9193
    RET_BLITZ_RUSH_COIN_A_EXCEED_LIMIT = 9194
    RET_BLITZ_RUSH_COIN_B_EXCEED_LIMIT = 9195
    RET_BLITZ_RUSH_COIN_A_NOT_ENOUGH = 9196
    RET_BLITZ_RUSH_COIN_B_NOT_ENOUGH = 9197
    RET_MIRACLE_RING_VALUE_NOT_ENOUGH = 9201
    RET_MIRACLE_RING_CD = 9202
    RET_MIRACLE_RING_REWARD_NOT_TAKEN = 9203
    RET_MIRACLE_RING_NOT_DELIVER = 9204
    RET_MIRACLE_RING_DELIVER_EXCEED = 9205
    RET_MIRACLE_RING_HAS_CREATED = 9206
    RET_MIRACLE_RING_HAS_NOT_CREATED = 9207
    RET_MIRACLE_RING_NOT_YOURS = 9208
    RET_GADGET_FOUNDATION_UNAUTHORIZED = 9251
    RET_GADGET_FOUNDATION_SCENE_NOT_FOUND = 9252
    RET_GADGET_FOUNDATION_NOT_IN_INIT_STATE = 9253
    RET_GADGET_FOUNDATION_BILDING_POINT_NOT_ENOUGHT = 9254
    RET_GADGET_FOUNDATION_NOT_IN_BUILT_STATE = 9255
    RET_GADGET_FOUNDATION_OP_NOT_SUPPORTED = 9256
    RET_GADGET_FOUNDATION_REQ_PLAYER_NOT_IN_SCENE = 9257
    RET_GADGET_FOUNDATION_LOCKED_BY_ANOTHER_PLAYER = 9258
    RET_GADGET_FOUNDATION_NOT_LOCKED = 9259
    RET_GADGET_FOUNDATION_DUPLICATE_LOCK = 9260
    RET_GADGET_FOUNDATION_PLAYER_NOT_FOUND = 9261
    RET_GADGET_FOUNDATION_PLAYER_GEAR_NOT_FOUND = 9262
    RET_GADGET_FOUNDATION_ROTAION_DISABLED = 9263
    RET_GADGET_FOUNDATION_REACH_DUNGEON_GEAR_LIMIT = 9264
    RET_GADGET_FOUNDATION_REACH_SINGLE_GEAR_LIMIT = 9265
    RET_GADGET_FOUNDATION_ROTATION_ON_GOING = 9266
    RET_OP_ACTIVITY_BONUS_NOT_FOUND = 9301
    RET_OP_ACTIVITY_NOT_OPEN = 9302
    RET_MULTISTAGE_PLAY_PLAYER_NOT_IN_SCENE = 9501
    RET_MULTISTAGE_PLAY_NOT_FOUND = 9502
    RET_COOP_CHAPTER_NOT_OPEN = 9601
    RET_COOP_COND_NOT_MEET = 9602
    RET_COOP_POINT_LOCKED = 9603
    RET_COOP_NOT_HAVE_PROGRESS = 9604
    RET_COOP_REWARD_HAS_TAKEN = 9605
    RET_DRAFT_HAS_ACTIVE_DRAFT = 9651
    RET_DRAFT_NOT_IN_MY_WORLD = 9652
    RET_DRAFT_NOT_SUPPORT_MP = 9653
    RET_DRAFT_PLAYER_NOT_ENOUGH = 9654
    RET_DRAFT_INCORRECT_SCENE = 9655
    RET_DRAFT_OTHER_PLAYER_ENTERING = 9656
    RET_DRAFT_GUEST_IS_TRANSFERRING = 9657
    RET_DRAFT_GUEST_NOT_IN_DRAFT_SCENE = 9658
    RET_DRAFT_INVITE_OVER_TIME = 9659
    RET_DRAFT_TWICE_CONFIRM_OVER_TIMER = 9660
    RET_HOME_UNKOWN = 9701
    RET_HOME_INVALID_CLIENT_PARAM = 9702
    RET_HOME_TARGE_PLAYER_HAS_NO_HOME = 9703
    RET_HOME_NOT_ONLINE = 9704
    RET_HOME_PLAYER_FULL = 9705
    RET_HOME_BLOCKED = 9706
    RET_HOME_ALREADY_IN_TARGET_HOME_WORLD = 9707
    RET_HOME_IN_EDIT_MODE = 9708
    RET_HOME_NOT_IN_EDIT_MODE = 9709
    RET_HOME_HAS_GUEST = 9710
    RET_HOME_CANT_ENTER_BY_IN_EDIT_MODE = 9711
    RET_HOME_CLIENT_PARAM_INVALID = 9712
    RET_HOME_PLAYER_NOT_IN_HOME_WORLD = 9713
    RET_HOME_PLAYER_NOT_IN_SELF_HOME_WORLD = 9714
    RET_HOME_NOT_FOUND_IN_MEM = 9715
    RET_HOME_PLAYER_IN_HOME_ROOM_SCENE = 9716
    RET_HOME_HOME_REFUSE_GUEST_ENTER = 9717
    RET_HOME_OWNER_REFUSE_TO_ENTER_HOME = 9718
    RET_HOME_OWNER_OFFLINE = 9719
    RET_HOME_FURNITURE_EXCEED_LIMIT = 9720
    RET_HOME_FURNITURE_COUNT_NOT_ENOUGH = 9721
    RET_HOME_IN_TRY_ENTER_PROCESS = 9722
    RET_HOME_ALREADY_IN_TARGET_SCENE = 9723
    RET_HOME_COIN_EXCEED_LIMIT = 9724
    RET_HOME_COIN_NOT_ENOUGH = 9725
    RET_HOME_MODULE_NOT_UNLOCKED = 9726
    RET_HOME_CUR_MODULE_CLOSED = 9727
    RET_HOME_FURNITURE_SUITE_NOT_UNLOCKED = 9728
    RET_HOME_IN_MATCH = 9729
    RET_HOME_IN_COMBAT = 9730
    RET_HOME_EDIT_MODE_CD = 9731
    RET_HOME_UPDATE_FURNITURE_CD = 9732
    RET_HOME_BLOCK_FURNITURE_LIMIT = 9733
    RET_HOME_NOT_SUPPORT = 9734
    RET_HOME_STATE_NOT_OPEN = 9735
    RET_HOME_TARGET_STATE_NOT_OPEN = 9736
    RET_HOME_APPLY_ENTER_OTHER_HOME_FAIL = 9737
    RET_HOME_SAVE_NO_MAIN_HOUSE = 9738
    RET_HOME_IN_DUNGEON = 9739
    RET_HOME_ANY_GALLERY_STARTED = 9740
    RET_HOME_QUEST_BLOCK_HOME = 9741
    RET_HOME_WAITING_PRIOR_CHECK = 9742
    RET_HOME_PERSISTENT_CHECK_FAIL = 9743
    RET_HOME_FIND_ONLINE_HOME_FAIL = 9744
    RET_HOME_JOIN_SCENE_FAIL = 9745
    RET_HOME_MAX_PLAYER = 9746
    RET_HOME_IN_TRANSFER = 9747
    RET_FURNITURE_MAKE_INDEX_ERROR = 9750
    RET_FURNITURE_MAKE_LOCKED = 9751
    RET_FURNITURE_MAKE_CONFIG_ERROR = 9752
    RET_FURNITURE_MAKE_SLOT_FULL = 9753
    RET_FURNITURE_MAKE_ADD_FURNITURE_FAIL = 9754
    RET_FURNITURE_MAKE_UNFINISH = 9755
    RET_FURNITURE_MAKE_IS_FINISH = 9756
    RET_FURNITURE_MAKE_NOT_IN_CORRECT_HOME = 9757
    RET_FURNITURE_MAKE_NO_COUNT = 9758
    RET_FURNITURE_MAKE_ACCELERATE_LIMIT = 9759
    RET_FURNITURE_MAKE_NO_MAKE_DATA = 9760
    RET_HOME_LIMITED_SHOP_CLOSE = 9761
    RET_HOME_AVATAR_NOT_SHOW = 9762
    RET_HOME_EVENT_COND_NOT_SATISFIED = 9763
    RET_HOME_INVALID_ARRANGE_ANIMAL_PARAM = 9764
    RET_HOME_INVALID_ARRANGE_NPC_PARAM = 9765
    RET_HOME_INVALID_ARRANGE_SUITE_PARAM = 9766
    RET_HOME_INVALID_ARRANGE_MAIN_HOUSE_PARAM = 9767
    RET_HOME_AVATAR_STATE_NOT_OPEN = 9768
    RET_HOME_PLANT_FIELD_NOT_EMPTY = 9769
    RET_HOME_PLANT_FIELD_EMPTY = 9770
    RET_HOME_PLANT_FIELD_TYPE_ERROR = 9771
    RET_HOME_PLANT_TIME_NOT_ENOUGH = 9772
    RET_HOME_PLANT_SUB_FIELD_NUM_NOT_ENOUGH = 9773
    RET_HOME_PLANT_FIELD_PARAM_ERROR = 9774
    RET_HOME_FURNITURE_GUID_ERROR = 9775
    RET_HOME_FURNITURE_ARRANGE_LIMIT = 9776
    RET_HOME_FISH_FARMING_LIMIT = 9777
    RET_HOME_FISH_COUNT_NOT_ENOUGH = 9778
    RET_HOME_FURNITURE_COST_LIMIT = 9779
    RET_HOME_CUSTOM_FURNITURE_INVALID = 9780
    RET_SUMO_ACTIVITY_STAGE_NOT_OPEN = 10000
    RET_SUMO_ACTIVITY_SWITCH_TEAM_IN_CD = 10001
    RET_SUMO_ACTIVITY_TEAM_NUM_INCORRECT = 10002
    RET_LUNA_RITE_ACTIVITY_AREA_ID_ERROR = 10004
    RET_LUNA_RITE_ACTIVITY_BATTLE_NOT_FINISH = 10005
    RET_LUNA_RITE_ACTIVITY_ALREADY_SACRIFICE = 10006
    RET_LUNA_RITE_ACTIVITY_ALREADY_TAKE_REWARD = 10007
    RET_LUNA_RITE_ACTIVITY_SACRIFICE_NOT_ENOUGH = 10008
    RET_LUNA_RITE_ACTIVITY_SEARCHING_COND_NOT_MEET = 10009
    RET_DIG_GADGET_CONFIG_ID_NOT_MATCH = 10015
    RET_DIG_FIND_NEAREST_POS_FAIL = 10016
    RET_MUSIC_GAME_LEVEL_NOT_OPEN = 10021
    RET_MUSIC_GAME_LEVEL_NOT_UNLOCK = 10022
    RET_MUSIC_GAME_LEVEL_NOT_STARTED = 10023
    RET_MUSIC_GAME_LEVEL_CONFIG_NOT_FOUND = 10024
    RET_MUSIC_GAME_LEVEL_ID_NOT_MATCH = 10025
    RET_ROGUELIKE_COIN_A_NOT_ENOUGH = 10031
    RET_ROGUELIKE_COIN_B_NOT_ENOUGH = 10032
    RET_ROGUELIKE_COIN_C_NOT_ENOUGH = 10033
    RET_ROGUELIKE_COIN_A_EXCEED_LIMIT = 10034
    RET_ROGUELIKE_COIN_B_EXCEED_LIMIT = 10035
    RET_ROGUELIKE_COIN_C_EXCEED_LIMIT = 10036
    RET_ROGUELIKE_RUNE_COUNT_NOT_ENOUGH = 10037
    RET_ROGUELIKE_NOT_IN_ROGUE_DUNGEON = 10038
    RET_ROGUELIKE_CELL_NOT_FOUND = 10039
    RET_ROGUELIKE_CELL_TYPE_INCORRECT = 10040
    RET_ROGUELIKE_CELL_ALREADY_FINISHED = 10041
    RET_ROGUELIKE_DUNGEON_HAVE_UNFINISHED_PROGRESS = 10042
    RET_ROGUELIKE_STAGE_NOT_FINISHED = 10043
    RET_ROGUELIKE_STAGE_FIRST_PASS_REWARD_HAS_TAKEN = 10045
    RET_ROGUELIKE_ACTIVITY_CONTENT_CLOSED = 10046
    RET_ROGUELIKE_DUNGEON_PRE_QUEST_NOT_FINISHED = 10047
    RET_ROGUELIKE_DUNGEON_NOT_OPEN = 10048
    RET_ROGUELIKE_SPRINT_IS_BANNED = 10049
    RET_ROGUELIKE_DUNGEON_PRE_STAGE_NOT_FINISHED = 10050
    RET_ROGUELIKE_ALL_AVATAR_DIE_CANNOT_RESUME = 10051
    RET_PLANT_FLOWER_ALREADY_TAKE_SEED = 10056
    RET_PLANT_FLOWER_FRIEND_HAVE_FLOWER_LIMIT = 10057
    RET_PLANT_FLOWER_CAN_GIVE_FLOWER_NOT_ENOUGH = 10058
    RET_PLANT_FLOWER_WISH_FLOWER_KINDS_LIMIT = 10059
    RET_PLANT_FLOWER_HAVE_FLOWER_NOT_ENOUGH = 10060
    RET_PLANT_FLOWER_FLOWER_COMBINATION_INVALID = 10061
    RET_NOT_IN_FISHING = 11001
    RET_FISH_STATE_ERROR = 11002
    RET_FISH_BAIT_LIMIT = 11003
    RET_FISHING_MAX_DISTANCE = 11004
    RET_FISHING_IN_COMBAT = 11005
    RET_FISHING_BATTLE_TOO_SHORT = 11006
    RET_FISH_GONE_AWAY = 11007
    RET_FAIL = -1


class RogueCellState(betterproto.Enum):
    ROGUE_CELL_NONE = 0
    ROGUE_CELL_BATTLE = 1
    ROGUE_CELL_SUCCESS = 2
    ROGUE_CELL_FINISH = 3


class RogueEliteCellDifficultyType(betterproto.Enum):
    ROGUE_ELITE_NORMAL = 0
    ROGUE_ELITE_HARD = 1


class SalesmanStatusType(betterproto.Enum):
    SALESMAN_STATUS_NONE = 0
    SALESMAN_STATUS_UNSTARTED = 1
    SALESMAN_STATUS_STARTED = 2
    SALESMAN_STATUS_DELIVERED = 3


class ScenePlayBattleState(betterproto.Enum):
    SCENE_PLAY_BATTLE_NONE = 0
    SCENE_PLAY_BATTLE_INIT = 1
    SCENE_PLAY_BATTLE_PREPARE = 2
    SCENE_PLAY_BATTLE_READY = 3
    SCENE_PLAY_BATTLE_PRESTART = 4
    SCENE_PLAY_BATTLE_START = 5
    SCENE_PLAY_BATTLE_STOP = 6


class SceneSurfaceMaterial(betterproto.Enum):
    SCENE_SURFACE_MATERIAL_INVALID = 0
    SCENE_SURFACE_MATERIAL_GRASS = 1
    SCENE_SURFACE_MATERIAL_DIRT = 2
    SCENE_SURFACE_MATERIAL_ROCK = 3
    SCENE_SURFACE_MATERIAL_SNOW = 4
    SCENE_SURFACE_MATERIAL_WATER = 5
    SCENE_SURFACE_MATERIAL_TILE = 6
    SCENE_SURFACE_MATERIAL_SAND = 7


class SealBattleType(betterproto.Enum):
    SEAL_BATTLE_KEEP_ALIVE = 0
    SEAL_BATTLE_KILL_MONSTER = 1
    SEAL_BATTLE_ENERGY_CHARGE = 2


class SecurityCheckType(betterproto.Enum):
    SECURITY_CHECK_NONE = 0
    SECURITY_CHECK_LOGIN = 1


class SegmentCrcModuleType(betterproto.Enum):
    MODULE_NONE = 0
    PC_UNITYPLAYER = 1
    PC_USERASSEMBLY = 2
    PC_XLUA = 3
    ANDROID_LIBIL2_CPP = 11
    ANDROID_LIBUNITY = 12
    ANDROID_LIBXLUA = 13
    IOS_HK4_E = 21


class ServerLogLevel(betterproto.Enum):
    LOG_LEVEL_NONE = 0
    LOG_LEVEL_DEBUG = 1
    LOG_LEVEL_INFO = 2
    LOG_LEVEL_WARNING = 3
    LOG_LEVEL_ERROR = 4


class ServerLogType(betterproto.Enum):
    SERVER_LOG_NONE = 0
    SERVER_LOG_ABILITY = 1
    SERVER_LOG_LEVEL = 2
    SERVER_LOG_ENTITY = 3
    SERVER_LOG_LUA = 4


class ServiceType(betterproto.Enum):
    SERVICE_NONE = 0
    SERVICE_CLIENT = 1
    SERVICE_GATE = 2
    SERVICE_GAME = 3
    SERVICE_NODE = 4
    SERVICE_DB = 5
    SERVICE_SNS = 6
    SERVICE_DISPATCH = 7
    SERVICE_MUIP = 8
    SERVICE_OFFLINE_MSG = 9
    SERVICE_MAIL = 10
    SERVICE_MP = 11
    SERVICE_HTTPPROXY = 12
    SERVICE_ACTIVITY = 13
    SERVICE_PATHFINDING = 14
    SERVICE_SOCIAL = 15
    SERVICE_OA = 16
    SERVICE_MATCH = 17
    SERVICE_OFFLINE_OP = 18


class ShopGoodsDisableType(betterproto.Enum):
    SHOP_GOODS_DISABLE_NONE = 0
    SHOP_GOODS_DISABLE_TALENT_FULL = 1
    SHOP_GOODS_DISABLE_FURNITURE_FORMULA_UNLOCKED = 2
    SHOP_GOODS_DISABLE_COSTUME_UNLOCKED = 3


class StoreType(betterproto.Enum):
    STORE_NONE = 0
    STORE_PACK = 1
    STORE_DEPOT = 2


class SvrMsgId(betterproto.Enum):
    MSG_UNKNOWN = 0
    MSG_BLOCK_REFRESH_COUNTDOWN = 1
    MSG_AVATAR_REVIVE_BY_STATUE = 2
    MSG_DAILY_TASK_REWARD_MAX_NUM = 3
    MSG_ROUTINE_TYPE_NOT_OPEN = 4
    MSG_ROUTINE_TYPE_REWARD_MAX_NUM = 5
    MSG_MECHANICUS_COIN_LIMIT = 6


class TransmitReason(betterproto.Enum):
    TRANSMIT_NONE = 0
    TRANSMIT_QUEST = 1


class VehicleInteractType(betterproto.Enum):
    VEHICLE_INTERACT_NONE = 0
    VEHICLE_INTERACT_IN = 1
    VEHICLE_INTERACT_OUT = 2


class VehicleSlot(betterproto.Enum):
    OPERATOR = 0


class VirtualItem(betterproto.Enum):
    ITEM_VIRTUAL_NONE = 0
    ITEM_VIRTUAL_AVATAR_EXP = 101
    ITEM_VIRTUAL_PLAYER_EXP = 102
    ITEM_VIRTUAL_FETTER_EXP = 105
    ITEM_VIRTUAL_RESIN = 106
    ITEM_VIRTUAL_LEGENDARY_KEY = 107
    ITEM_VIRTUAL_ASTER_PROGRESS = 108
    ITEM_VIRTUAL_ASTER_CREDIT = 109
    ITEM_VIRTUAL_ASTER_TOKEN = 110
    ITEM_VIRTUAL_SHIMMERING_ESSENCE = 111
    ITEM_VIRTUAL_WARM_ESSENCE = 112
    ITEM_VIRTUAL_WONDROUS_ESSENCE = 113
    ITEM_VIRTUAL_TREASURE_MAP_TOKEN = 114
    ITEM_VIRTUAL_SEA_LAMP_COIN = 115
    ITEM_VIRTUAL_SEA_LAMP_POPULARITY = 116
    ITEM_VIRTUAL_MECHANICUS_COIN = 117
    ITEM_VIRTUAL_FLEUR_FAIR_CREDIT = 118
    ITEM_VIRTUAL_FLEUR_FAIR_TOKEN = 119
    ITEM_VIRTUAL_WATER_SPIRIT_COIN = 120
    ITEM_VIRTUAL_HOME_EXP = 121
    ITEM_VIRTUAL_CHANNELLER_SLAB_TOKEN = 122
    ITEM_VIRTUAL_HIDE_AND_SEEK_COIN = 123
    ITEM_VIRTUAL_SUMMER_TIME_DRAFT_WOOD = 124
    ITEM_VIRTUAL_SUMMER_TIME_MINI_HARPASTUM = 125
    ITEM_VIRTUAL_BOUNCE_CONJURING_COIN = 126
    ITEM_VIRTUAL_BLITZ_RUSH_COIN_A = 127
    ITEM_VIRTUAL_BLITZ_RUSH_COIN_B = 128
    ITEM_VIRTUAL_CHESS_EXP = 129
    ITEM_VIRTUAL_CHESS_COIN = 130
    ITEM_VIRTUAL_LUNA_RITE_ATMOSPHERE = 131
    ITEM_VIRTUAL_ROGUELIKE_COIN_A = 132
    ITEM_VIRTUAL_ROGUELIKE_COIN_B = 133
    ITEM_VIRTUAL_ROGUELIKE_COIN_C = 134
    ITEM_VIRTUAL_HCOIN = 201
    ITEM_VIRTUAL_SCOIN = 202
    ITEM_VIRTUAL_MCOIN = 203
    ITEM_VIRTUAL_HOME_COIN = 204
    ITEM_VIRTUAL_INAZUMA_REPUTATION = 314
    ITEM_VIRTUAL_MENGDE_REPUTATION = 315
    ITEM_VIRTUAL_LIYUE_REPUTATION = 317


class VisionType(betterproto.Enum):
    VISION_NONE = 0
    VISION_MEET = 1
    VISION_REBORN = 2
    VISION_REPLACE = 3
    VISION_WAYPOINT_REBORN = 4
    VISION_MISS = 5
    VISION_DIE = 6
    VISION_GATHER_ESCAPE = 7
    VISION_REFRESH = 8
    VISION_TRANSPORT = 9
    VISION_REPLACE_DIE = 10
    VISION_REPLACE_NO_NOTIFY = 11
    VISION_BORN = 12
    VISION_PICKUP = 13
    VISION_REMOVE = 14
    VISION_CHANGE_COSTUME = 15
    VISION_FISH_REFRESH = 16
    VISION_FISH_BIG_SHOCK = 17
    VISION_FISH_QTE_SUCC = 18


class WidgetCreatorOpType(betterproto.Enum):
    WIDGET_CREATOR_TYPE_NONE = 0
    WIDGET_CREATOR_TYPE_RETRACT = 1
    WIDGET_CREATOR_TYPE_RETRACT_AND_CREATE = 2


class WidgetSlotOp(betterproto.Enum):
    ATTACH = 0
    DETACH = 1


class WidgetSlotTag(betterproto.Enum):
    WIDGET_SLOT_QUICK_USE = 0
    WIDGET_SLOT_ATTACH_AVATAR = 1


class AchievementStatus(betterproto.Enum):
    INVALID = 0
    UNFINISHED = 1
    FINISHED = 2
    REWARD_TAKEN = 3


class AnchorPointOpReqAnchorPointOpType(betterproto.Enum):
    ANCHOR_POINT_OP_NONE = 0
    ANCHOR_POINT_OP_TELEPORT = 1
    ANCHOR_POINT_OP_REMOVE = 2


class BattlePassMissionMissionStatus(betterproto.Enum):
    MISSION_INVALID = 0
    MISSION_UNFINISHED = 1
    MISSION_FINISHED = 2
    MISSION_POINT_TAKEN = 3


class ChatInfoSystemHintType(betterproto.Enum):
    CHAT_NONE = 0
    CHAT_ENTER_WORLD = 1
    CHAT_LEAVE_WORLD = 2


class CheckAddItemExceedLimitNotifyItemExceedLimitMsgType(betterproto.Enum):
    ITEM_EXCEED_LIMIT_MSG_DEFAULT = 0
    ITEM_EXCEED_LIMIT_MSG_TEXT = 1
    ITEM_EXCEED_LIMIT_MSG_DIALOG = 2


class CoopChapterState(betterproto.Enum):
    CLOSE = 0
    COND_NOT_MEET = 1
    COND_MEET = 2
    ACCEPT = 3


class CoopPointState(betterproto.Enum):
    UNSTARTED = 0
    STARTED = 1
    FINISHED = 2


class CoopRewardState(betterproto.Enum):
    UNLOCK = 0
    LOCK = 1
    TAKEN = 2


class DataResVersionNotifyDataResVersionOpType(betterproto.Enum):
    OP_TYPE_NONE = 0
    OP_TYPE_RELOGIN = 1
    OP_TYPE_MP_RELOGIN = 2


class DebugNotifyEnum(betterproto.Enum):
    ZERO = 0
    ENET_IS_RELIABLE = 1
    ENET_CHANNEL_ID = 2
    TARGET_SERVICE = 101
    CMD_ID = 101


class DebugNotifyRetcode(betterproto.Enum):
    SUCC = 0
    FAIL = 1


class EntityJumpNotifyType(betterproto.Enum):
    NULL = 0
    ACTIVE = 1
    PASSIVE = 2


class FishBattleEndRspFishNoRewardReason(betterproto.Enum):
    FISH_NO_REWARD_NONE = 0
    FISH_NO_REWARD_ACTIVITY_LIMIT = 1
    FISH_NO_REWARD_BAG_LIMIT = 2
    FISH_NO_REWARD_POOL_LIMIT = 3


class HideAndSeekSettleNotifySettleReason(betterproto.Enum):
    TIME_OUT = 0
    SETTLE_PLAY_END = 1
    SETTLE_PLAYER_QUIT = 2


class InvestigationMonsterLockState(betterproto.Enum):
    LOCK_NONE = 0
    LOCK_QUEST = 1


class InvestigationState(betterproto.Enum):
    INVALID = 0
    IN_PROGRESS = 1
    COMPLETE = 2
    REWARD_TAKEN = 3


class InvestigationTargetState(betterproto.Enum):
    INVALID = 0
    IN_PROGRESS = 1
    COMPLETE = 2
    REWARD_TAKEN = 3


class LockedPersonallineDataLockReason(betterproto.Enum):
    LEVEL = 0
    QUEST = 1


class LuaSetOptionNotifyLuaOptionType(betterproto.Enum):
    LUA_OPTION_NONE = 0
    LUA_OPTION_PLAYER_INPUT = 1


class MainCoopStatus(betterproto.Enum):
    INVALID = 0
    RUNNING = 1
    FINISHED = 2


class MarkMapReqOperation(betterproto.Enum):
    ADD = 0
    MOD = 1
    DEL = 2
    GET = 3


class ObstacleInfoShapeType(betterproto.Enum):
    OBSTACLE_SHAPE_CAPSULE = 0
    OBSTACLE_SHAPE_BOX = 1


class OtherPlayerEnterHomeNotifyReason(betterproto.Enum):
    INVALID = 0
    ENTER = 1
    LEAVE = 2


class PbNavMeshPolyEdgeType(betterproto.Enum):
    INNER = 0
    TILE_BOUND = 1
    TILE_BOUND_UNCONNECT = 2


class PlayerApplyEnterHomeResultNotifyReason(betterproto.Enum):
    PLAYER_JUDGE = 0
    PLAYER_ENTER_OPTION_REFUSE = 1
    PLAYER_ENTER_OPTION_DIRECT = 2
    SYSTEM_JUDGE = 3
    HOST_IN_MATCH = 4
    PS_PLAYER_NOT_ACCEPT_OTHERS = 5
    OPEN_STATE_NOT_OPEN = 6
    HOST_IN_EDIT_MODE = 7
    PRIOR_CHECK = 8


class PlayerApplyEnterMpResultNotifyReason(betterproto.Enum):
    PLAYER_JUDGE = 0
    SCENE_CANNOT_ENTER = 1
    PLAYER_CANNOT_ENTER_MP = 2
    SYSTEM_JUDGE = 3
    ALLOW_ENTER_PLAYER_FULL = 4
    WORLD_LEVEL_LOWER_THAN_HOST = 5
    HOST_IN_MATCH = 6
    PLAYER_IN_BLACKLIST = 7
    PS_PLAYER_NOT_ACCEPT_OTHERS = 8
    HOST_IS_BLOCKED = 9
    OTHER_DATA_VERSION_NOT_LATEST = 10
    DATA_VERSION_NOT_LATEST = 11
    PLAYER_NOT_IN_PLAYER_WORLD = 12
    MAX_PLAYER = 13


class PlayerLogoutReqReason(betterproto.Enum):
    DISCONNECT = 0
    CLIENT_REQ = 1
    TIMEOUT = 2
    ADMIN_REQ = 3
    SERVER_CLOSE = 4
    GM_CLEAR = 5
    PLAYER_TRANSFER = 6
    CLIENT_CHECKSUM_INVALID = 7


class PlayerMatchAgreedResultNotifyReason(betterproto.Enum):
    SUCC = 0
    TARGET_SCENE_CANNOT_ENTER = 1
    SELF_MP_UNAVAILABLE = 2
    OTHER_DATA_VERSION_NOT_LATEST = 3
    DATA_VERSION_NOT_LATEST = 4


class PlayerPreEnterMpNotifyState(betterproto.Enum):
    INVALID = 0
    START = 1
    TIMEOUT = 2


class PlayerQuitFromHomeNotifyQuitReason(betterproto.Enum):
    INVALID = 0
    KICK_BY_HOST = 1
    BACK_TO_MY_WORLD = 2
    HOME_BLOCKED = 3
    HOME_IN_EDIT_MODE = 4
    BY_MUIP = 5
    CUR_MODULE_CLOSED = 6


class PlayerQuitFromMpNotifyQuitReason(betterproto.Enum):
    INVALID = 0
    HOST_NO_OTHER_PLAYER = 1
    KICK_BY_HOST = 2
    BACK_TO_MY_WORLD = 3
    KICK_BY_HOST_LOGOUT = 4
    KICK_BY_HOST_BLOCK = 5
    BE_BLOCKED = 6
    KICK_BY_HOST_ENTER_HOME = 7
    HOST_SCENE_INVALID = 8
    KICK_BY_PLAY = 9


class ProjectorOptionReqProjectorOpType(betterproto.Enum):
    PROJECTOR_OP_NONE = 0
    PROJECTOR_OP_CREATE = 1
    PROJECTOR_OP_DESTROY = 2


class QueryPathReqOptionType(betterproto.Enum):
    OPTION_NONE = 0
    OPTION_NORMAL = 1
    OPTION_FIRST_CAN_GO = 2


class QueryPathRspPathStatusType(betterproto.Enum):
    STATUS_FAIL = 0
    STATUS_SUCC = 1
    STATUS_PARTIAL = 2


class RegionSearchChangeRegionNotifyRegionEvent(betterproto.Enum):
    NONE = 0
    ENTER = 1
    LEAVE = 2


class RemoveRandTaskInfoNotifyFinishReason(betterproto.Enum):
    DEFAULT = 0
    CLEAR = 1
    DISTANCE = 2
    FINISH = 3


class ScenePlayerSoundNotifyPlaySoundType(betterproto.Enum):
    PLAY_SOUND_NONE = 0
    PLAY_SOUND_START = 1
    PLAY_SOUND_STOP = 2


class ServerBuffChangeNotifyServerBuffChangeType(betterproto.Enum):
    ADD_SERVER_BUFF = 0
    DEL_SERVER_BUFF = 1


class ServerUpdateGlobalValueNotifyUpdateType(betterproto.Enum):
    INVALUE = 0
    ADD = 1
    SET = 2


class TowerLevelEndNotifyContinueStateType(betterproto.Enum):
    CONTINUE_STATE_CAN_NOT_CONTINUE = 0
    CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL = 1
    CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR = 2


class TrialAvatarGrantRecordGrantReason(betterproto.Enum):
    INVALID = 0
    GRANT_BY_QUEST = 1
    GRANT_BY_TRIAL_AVATAR_ACTIVITY = 2
    GRANT_BY_DUNGEON_ELEMENT_CHALLENGE = 3
    GRANT_BY_MIST_TRIAL_ACTIVITY = 4
    GRANT_BY_SUMO_ACTIVITY = 5


class UpdateAbilityCreatedMovingPlatformNotifyOpType(betterproto.Enum):
    OP_NONE = 0
    OP_ACTIVATE = 1
    OP_DEACTIVATE = 2


class UseMiracleRingReqMiracleRingOpType(betterproto.Enum):
    MIRACLE_RING_OP_NONE = 0
    MIRACLE_RING_OP_PLACE = 1
    MIRACLE_RING_OP_RETRACT = 2


class WorldDataNotifyDataType(betterproto.Enum):
    DATA_NONE = 0
    WORLD_LEVEL = 1
    IS_IN_MP_MODE = 2


@dataclass(eq=False, repr=False)
class AbilityActionBlink(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityActionCreateGadget(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)
    room_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AbilityActionCreateTile(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityActionDestroyTile(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityActionFireAfterImgae(betterproto.Message):
    dir: "Vector" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityActionGenerateElemBall(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)
    room_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AbilityActionServerMonsterLog(betterproto.Message):
    param_list: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class AbilityActionSetCrashDamage(betterproto.Message):
    damage: float = betterproto.float_field(1)
    hit_pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityActionSetRandomOverrideMapValue(betterproto.Message):
    random_value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class AbilityActionSummon(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityActionTriggerAbility(betterproto.Message):
    other_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityAppliedAbility(betterproto.Message):
    ability_name: "AbilityString" = betterproto.message_field(1)
    ability_override: "AbilityString" = betterproto.message_field(2)
    override_map: List["AbilityScalarValueEntry"] = betterproto.message_field(3)
    instanced_ability_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AbilityAppliedModifier(betterproto.Message):
    modifier_local_id: int = betterproto.int32_field(1)
    parent_ability_entity_id: int = betterproto.uint32_field(2)
    parent_ability_name: "AbilityString" = betterproto.message_field(3)
    parent_ability_override: "AbilityString" = betterproto.message_field(4)
    instanced_ability_id: int = betterproto.uint32_field(5)
    instanced_modifier_id: int = betterproto.uint32_field(6)
    exist_duration: float = betterproto.float_field(7)
    attached_instanced_modifier: "AbilityAttachedModifier" = betterproto.message_field(
        8
    )
    apply_entity_id: int = betterproto.uint32_field(9)
    is_attached_parent_ability: bool = betterproto.bool_field(10)
    modifier_durability: "ModifierDurability" = betterproto.message_field(11)
    sbuff_uid: int = betterproto.uint32_field(12)
    is_serverbuff_modifier: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class AbilityApplyLevelModifier(betterproto.Message):
    apply_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityArgument(betterproto.Message):
    int_arg: int = betterproto.uint32_field(1, group="Arg")
    float_arg: float = betterproto.float_field(2, group="Arg")
    str_arg: str = betterproto.string_field(3, group="Arg")


@dataclass(eq=False, repr=False)
class AbilityAttachedModifier(betterproto.Message):
    is_invalid: bool = betterproto.bool_field(1)
    owner_entity_id: int = betterproto.uint32_field(2)
    instanced_modifier_id: int = betterproto.uint32_field(3)
    is_serverbuff_modifier: bool = betterproto.bool_field(4)
    attach_name_hash: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class AbilityBornType(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)
    move_dir: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AbilityChangeNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    ability_control_block: "AbilityControlBlock" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityControlBlock(betterproto.Message):
    ability_embryo_list: List["AbilityEmbryo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityEmbryo(betterproto.Message):
    ability_id: int = betterproto.uint32_field(1)
    ability_name_hash: int = betterproto.fixed32_field(2)
    ability_override_name_hash: int = betterproto.fixed32_field(3)


@dataclass(eq=False, repr=False)
class AbilityFloatValue(betterproto.Message):
    value: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class AbilityGadgetInfo(betterproto.Message):
    camp_id: int = betterproto.uint32_field(1)
    camp_target_type: int = betterproto.uint32_field(2)
    target_entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AbilityIdentifier(betterproto.Message):
    instanced_ability_id: int = betterproto.uint32_field(1)
    ability_caster_id: int = betterproto.uint32_field(2)
    local_id: int = betterproto.int32_field(3)
    instanced_modifier_id: int = betterproto.uint32_field(4)
    modifier_owner_id: int = betterproto.uint32_field(5)
    is_serverbuff_modifier: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class AbilityInvocationFailNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    invoke: "AbilityInvokeEntry" = betterproto.message_field(2)
    reason: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AbilityInvocationFixedNotify(betterproto.Message):
    invoke1_st: "AbilityInvokeEntry" = betterproto.message_field(1)
    invoke2_nd: "AbilityInvokeEntry" = betterproto.message_field(2)
    invoke3_rd: "AbilityInvokeEntry" = betterproto.message_field(3)
    invoke4_th: "AbilityInvokeEntry" = betterproto.message_field(4)
    invoke5_th: "AbilityInvokeEntry" = betterproto.message_field(5)
    invoke6_th: "AbilityInvokeEntry" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AbilityInvocationsNotify(betterproto.Message):
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityInvokeEntryHead(betterproto.Message):
    instanced_ability_id: int = betterproto.uint32_field(1)
    instanced_modifier_id: int = betterproto.uint32_field(2)
    local_id: int = betterproto.int32_field(3)
    modifier_config_local_id: int = betterproto.int32_field(4)
    target_id: int = betterproto.uint32_field(5)
    is_serverbuff_modifier: bool = betterproto.bool_field(6)
    server_buff_uid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AbilityInvokeEntry(betterproto.Message):
    head: "AbilityInvokeEntryHead" = betterproto.message_field(1)
    argument_type: "AbilityInvokeArgument" = betterproto.enum_field(2)
    ability_data: bytes = betterproto.bytes_field(3)
    entity_id: int = betterproto.uint32_field(4)
    forward_type: "ForwardType" = betterproto.enum_field(5)
    forward_peer: int = betterproto.uint32_field(6)
    event_id: int = betterproto.uint32_field(7)
    total_tick_time: float = betterproto.double_field(8)


@dataclass(eq=False, repr=False)
class AbilityMetaAddAbility(betterproto.Message):
    ability: "AbilityAppliedAbility" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaAddOrGetAbilityAndTrigger(betterproto.Message):
    ability_name: "AbilityString" = betterproto.message_field(1)
    ability_override: "AbilityString" = betterproto.message_field(2)
    trigger_argument: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class AbilityMetaElementReactionVisual(betterproto.Message):
    element_reaction_type: int = betterproto.uint32_field(1)
    element_source_type: int = betterproto.uint32_field(2)
    element_reactor_type: int = betterproto.uint32_field(3)
    hit_index: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class AbilityMetaLoseHp(betterproto.Message):
    lose_hp_config_idx: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaModifierChange(betterproto.Message):
    action: "ModifierAction" = betterproto.enum_field(1)
    parent_ability_name: "AbilityString" = betterproto.message_field(2)
    parent_ability_override: "AbilityString" = betterproto.message_field(3)
    attached_instanced_modifier: "AbilityAttachedModifier" = betterproto.message_field(
        4
    )
    properties: List["ModifierProperty"] = betterproto.message_field(5)
    modifier_local_id: int = betterproto.int32_field(6)
    is_mute_remote: bool = betterproto.bool_field(7)
    apply_entity_id: int = betterproto.uint32_field(8)
    is_attached_parent_ability: bool = betterproto.bool_field(9)
    server_buff_uid: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AbilityMetaModifierDurabilityChange(betterproto.Message):
    reduce_durability: float = betterproto.float_field(1)
    remain_durability: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class AbilityMetaReInitOverrideMap(betterproto.Message):
    override_map: List["AbilityScalarValueEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaSetAbilityTrigger(betterproto.Message):
    trigger_ability_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaSetKilledState(betterproto.Message):
    killed: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaSetModifierApplyEntityId(betterproto.Message):
    apply_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaSetPoseParameter(betterproto.Message):
    value: "AnimatorParameterValueInfoPair" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityMetaSpecialFloatArgument(betterproto.Message):
    argument_value: float = betterproto.float_field(1)
    is_on: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class AbilityMetaTriggerElementReaction(betterproto.Message):
    element_reaction_type: int = betterproto.uint32_field(1)
    element_source_type: int = betterproto.uint32_field(2)
    element_reactor_type: int = betterproto.uint32_field(3)
    hit_index: int = betterproto.int32_field(4)
    trigger_entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AbilityMetaUpdateBaseReactionDamage(betterproto.Message):
    source_caster_id: int = betterproto.uint32_field(1)
    reaction_type: int = betterproto.uint32_field(2)
    global_value_key: "AbilityString" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AbilityMixinAvatarSteerByCamera(betterproto.Message):
    target_pos: "Vector" = betterproto.message_field(1)
    target_dir: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AbilityMixinCostStamina(betterproto.Message):
    is_swim: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinDoActionByElementReaction(betterproto.Message):
    target_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinElementShield(betterproto.Message):
    sub_shield: float = betterproto.float_field(1)
    is_shield_broken: bool = betterproto.bool_field(2)
    shield: float = betterproto.float_field(3)
    max_shield: float = betterproto.float_field(4)
    absorb_type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AbilityMixinEliteShield(betterproto.Message):
    sub_shield: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinEmpty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AbilityMixinFieldEntityCountChange(betterproto.Message):
    field_entity_count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinGlobalShield(betterproto.Message):
    sub_shield: float = betterproto.float_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    shield_effect_name: str = betterproto.string_field(3)
    height_offset: float = betterproto.float_field(4)
    is_create_effect: bool = betterproto.bool_field(5)
    max_shield: float = betterproto.float_field(6)


@dataclass(eq=False, repr=False)
class AbilityMixinRecoverInfo(betterproto.Message):
    instanced_ability_id: int = betterproto.uint32_field(1, group="Source")
    instanced_modifier_id: int = betterproto.uint32_field(2, group="Source")
    local_id: int = betterproto.uint32_field(3)
    data_list: List[int] = betterproto.uint32_field(4)
    is_serverbuff_modifier: bool = betterproto.bool_field(5)
    massive_prop_list: List["MassivePropSyncInfo"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AbilityMixinScenePropSync(betterproto.Message):
    massive_prop_list: List["MassivePropSyncInfo"] = betterproto.message_field(1)
    delete_id_list: List[int] = betterproto.int64_field(2)
    is_clear_all: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AbilityMixinShieldBar(betterproto.Message):
    element_type: int = betterproto.uint32_field(1)
    shield: float = betterproto.float_field(2)
    max_shield: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class AbilityMixinWidgetMpSupport(betterproto.Message):
    target_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawner(betterproto.Message):
    add_signal: "AbilityMixinWindSeedSpawnerAddSignal" = betterproto.message_field(
        1, group="Cmd"
    )
    refresh_seed: "AbilityMixinWindSeedSpawnerRefreshSeed" = betterproto.message_field(
        2, group="Cmd"
    )
    catch_seed: "AbilityMixinWindSeedSpawnerCatchSeed" = betterproto.message_field(
        3, group="Cmd"
    )


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawnerAddSignal(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawnerRefreshSeed(betterproto.Message):
    pos_list: List["Vector"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinWindSeedSpawnerCatchSeed(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AbilityMixinWindZone(betterproto.Message):
    entity_ids: List[int] = betterproto.uint32_field(1)
    zone_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AbilityScalarValueEntry(betterproto.Message):
    float_value: float = betterproto.float_field(3, group="Value")
    string_value: str = betterproto.string_field(4, group="Value")
    int_value: int = betterproto.int32_field(5, group="Value")
    uint_value: int = betterproto.uint32_field(6, group="Value")
    key: "AbilityString" = betterproto.message_field(1)
    value_type: "AbilityScalarType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class AbilityString(betterproto.Message):
    str: builtins.str = betterproto.string_field(1, group="Type")
    hash: int = betterproto.uint32_field(2, group="Type")


@dataclass(eq=False, repr=False)
class AbilitySyncStateInfo(betterproto.Message):
    is_inited: bool = betterproto.bool_field(1)
    dynamic_value_map: List["AbilityScalarValueEntry"] = betterproto.message_field(2)
    applied_abilities: List["AbilityAppliedAbility"] = betterproto.message_field(3)
    applied_modifiers: List["AbilityAppliedModifier"] = betterproto.message_field(4)
    mixin_recover_infos: List["AbilityMixinRecoverInfo"] = betterproto.message_field(5)
    sgv_dynamic_value_map: List["AbilityScalarValueEntry"] = betterproto.message_field(
        6
    )


@dataclass(eq=False, repr=False)
class AcceptCityReputationRequestReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    request_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AcceptCityReputationRequestRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    request_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AchievementAllDataNotify(betterproto.Message):
    achievement_list: List["Achievement"] = betterproto.message_field(1)
    reward_taken_goal_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Achievement(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    status: "AchievementStatus" = betterproto.enum_field(2)
    cur_progress: int = betterproto.uint32_field(3)
    total_progress: int = betterproto.uint32_field(4)
    finish_timestamp: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AchievementUpdateNotify(betterproto.Message):
    achievement_list: List["Achievement"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ActivityCoinInfoNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    activity_coin_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    activity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityCondStateChangeNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    meet_cond_list: List[int] = betterproto.uint32_field(3)
    expire_cond_list: List[int] = betterproto.uint32_field(4)
    activated_sale_id_list: List[int] = betterproto.uint32_field(5)
    disable_transfer_point_interaction_list: List[
        "Uint32Pair"
    ] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ActivityDisableTransferPointInteractionNotify(betterproto.Message):
    scene_point_pair: "Uint32Pair" = betterproto.message_field(1)
    is_disable: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ActivityInfoNotify(betterproto.Message):
    activity_info: "ActivityInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ActivityInfo(betterproto.Message):
    sam_lamp_info: "SeaLampActivityDetailInfo" = betterproto.message_field(
        11, group="Detail"
    )
    crucible_info: "CrucibleActivityDetailInfo" = betterproto.message_field(
        12, group="Detail"
    )
    salesman_info: "SalesmanActivityDetailInfo" = betterproto.message_field(
        13, group="Detail"
    )
    trial_avatar_info: "TrialAvatarActivityDetailInfo" = betterproto.message_field(
        14, group="Detail"
    )
    delivery_info: "DeliveryActivityDetailInfo" = betterproto.message_field(
        16, group="Detail"
    )
    aster_info: "AsterActivityDetailInfo" = betterproto.message_field(
        21, group="Detail"
    )
    flight_info: "FlightActivityDetailInfo" = betterproto.message_field(
        25, group="Detail"
    )
    dragon_spine_info: "DragonSpineActivityDetailInfo" = betterproto.message_field(
        31, group="Detail"
    )
    effigy_info: "EffigyActivityDetailInfo" = betterproto.message_field(
        32, group="Detail"
    )
    treasure_map_info: "TreasureMapActivityDetailInfo" = betterproto.message_field(
        35, group="Detail"
    )
    blessing_info: "BlessingActivityDetailInfo" = betterproto.message_field(
        41, group="Detail"
    )
    sea_lamp_info: "SeaLampActivityInfo" = betterproto.message_field(42, group="Detail")
    expedition_info: "ExpeditionActivityDetailInfo" = betterproto.message_field(
        43, group="Detail"
    )
    arena_challenge_info: "ArenaChallengeActivityDetailInfo" = (
        betterproto.message_field(44, group="Detail")
    )
    fleur_fair_info: "FleurFairActivityDetailInfo" = betterproto.message_field(
        51, group="Detail"
    )
    water_spirit_info: "WaterSpiritActivityDetailInfo" = betterproto.message_field(
        52, group="Detail"
    )
    challneler_slab_info: "ChannelerSlabActivityDetailInfo" = betterproto.message_field(
        61, group="Detail"
    )
    mist_trial_activity_info: "MistTrialActivityDetailInfo" = betterproto.message_field(
        62, group="Detail"
    )
    hide_and_seek_info: "HideAndSeekActivityDetailInfo" = betterproto.message_field(
        63, group="Detail"
    )
    find_hilichurl_info: "FindHilichurlDetailInfo" = betterproto.message_field(
        64, group="Detail"
    )
    summer_time_info: "SummerTimeDetailInfo" = betterproto.message_field(
        65, group="Detail"
    )
    buoyant_combat_info: "BuoyantCombatDetailInfo" = betterproto.message_field(
        66, group="Detail"
    )
    echo_shell_info: "EchoShellDetailInfo" = betterproto.message_field(
        67, group="Detail"
    )
    bounce_conjuring_info: "BounceConjuringActivityDetailInfo" = (
        betterproto.message_field(68, group="Detail")
    )
    blitz_rush_info: "BlitzRushActivityDetailInfo" = betterproto.message_field(
        69, group="Detail"
    )
    chess_info: "ChessActivityDetailInfo" = betterproto.message_field(
        70, group="Detail"
    )
    sumo_info: "SumoActivityDetailInfo" = betterproto.message_field(71, group="Detail")
    moonfin_trial_info: "MoonfinTrialActivityDetailInfo" = betterproto.message_field(
        72, group="Detail"
    )
    luna_rite_info: "LunaRiteDetailInfo" = betterproto.message_field(73, group="Detail")
    plant_flower_info: "PlantFlowerActivityDetailInfo" = betterproto.message_field(
        74, group="Detail"
    )
    music_game_info: "MusicGameActivityDetailInfo" = betterproto.message_field(
        75, group="Detail"
    )
    roguelike_dungoen_info: "RoguelikeDungeonActivityDetailInfo" = (
        betterproto.message_field(76, group="Detail")
    )
    dig_info: "DigActivityDetailInfo" = betterproto.message_field(77, group="Detail")
    activity_id: int = betterproto.uint32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    begin_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    activity_type: int = betterproto.uint32_field(5)
    is_play_open_anim: bool = betterproto.bool_field(6)
    is_finished: bool = betterproto.bool_field(7)
    is_starting: bool = betterproto.bool_field(8)
    watcher_info_list: List["ActivityWatcherInfo"] = betterproto.message_field(9)
    meet_cond_list: List[int] = betterproto.uint32_field(10)
    expire_cond_list: List[int] = betterproto.uint32_field(15)
    selected_avatar_reward_id: int = betterproto.uint32_field(17)
    activity_coin_map: Dict[int, int] = betterproto.map_field(
        18, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    score_limit: int = betterproto.uint32_field(19)
    cur_score: int = betterproto.uint32_field(20)
    taken_reward_list: List[int] = betterproto.uint32_field(24)
    is_hidden: bool = betterproto.bool_field(26)
    first_day_start_time: int = betterproto.uint32_field(27)


@dataclass(eq=False, repr=False)
class ActivityPlayOpenAnimNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ActivitySaleChangeNotify(betterproto.Message):
    sale_id: int = betterproto.uint32_field(1)
    is_close: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ActivityScheduleInfoNotify(betterproto.Message):
    activity_schedule_list: List["ActivityScheduleInfo"] = betterproto.message_field(1)
    remain_fly_sea_lamp_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityScheduleInfo(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)
    schedule_id: int = betterproto.uint32_field(3)
    begin_time: int = betterproto.uint32_field(4)
    end_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ActivitySelectAvatarCardReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    reward_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivitySelectAvatarCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    reward_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityShopSheetInfo(betterproto.Message):
    sheet_id: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityTakeAllScoreRewardReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ActivityTakeAllScoreRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    reward_config_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityTakeScoreRewardReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    reward_config_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityTakeScoreRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    reward_config_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardBatchReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    watcher_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardBatchRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    watcher_id_list: List[int] = betterproto.uint32_field(3)
    item_list: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    watcher_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityTakeWatcherRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    watcher_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityUpdateWatcherNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    watcher_info: "ActivityWatcherInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ActivityWatcherInfo(betterproto.Message):
    watcher_id: int = betterproto.uint32_field(1)
    cur_progress: int = betterproto.uint32_field(2)
    total_progress: int = betterproto.uint32_field(3)
    is_taken_reward: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class AddBlacklistReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AddBlacklistRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_friend_brief: "FriendBrief" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AddFriendNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    target_friend_brief: "FriendBrief" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AddNoGachaAvatarCardNotify(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    is_transfer_to_item: bool = betterproto.bool_field(2)
    avatar_id: int = betterproto.uint32_field(3)
    initial_level: int = betterproto.uint32_field(4)
    initial_promote_level: int = betterproto.uint32_field(5)
    transfer_item_list: List[
        "AddNoGachaAvatarCardTransferItem"
    ] = betterproto.message_field(6)
    reason: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AddNoGachaAvatarCardTransferItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    is_new: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AddQuestContentProgressReq(betterproto.Message):
    content_type: int = betterproto.uint32_field(1)
    param: int = betterproto.uint32_field(2)
    add_progress: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AddQuestContentProgressRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    content_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AddRandTaskInfoNotify(betterproto.Message):
    rand_task_id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AddSeenMonsterNotify(betterproto.Message):
    monster_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AdjustTrackingInfo(betterproto.Message):
    idfa: str = betterproto.string_field(1)
    gps_adid: str = betterproto.string_field(2)
    fire_adid: str = betterproto.string_field(3)
    adid: str = betterproto.string_field(4)
    event_token: str = betterproto.string_field(5)
    app_token: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class AdjustWorldLevelReq(betterproto.Message):
    cur_world_level: int = betterproto.uint32_field(1)
    expect_world_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AdjustWorldLevelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    after_world_level: int = betterproto.uint32_field(2)
    cd_over_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AiSkillCdInfo(betterproto.Message):
    skill_cd_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    skill_group_cd_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class AiSnapshotEntityData(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    real_time: float = betterproto.float_field(2)
    tick_time: float = betterproto.float_field(3)
    tactic: int = betterproto.uint32_field(4)
    distance_to_player: float = betterproto.float_field(5)
    threat_list_size: int = betterproto.uint32_field(6)
    threat_target_id: int = betterproto.uint32_field(7)
    ai_target_id: int = betterproto.uint32_field(8)
    attack_target_id: int = betterproto.uint32_field(9)
    moved_distance: float = betterproto.float_field(10)
    finished_skill_cycles: List[
        "AiSnapshotEntitySkillCycle"
    ] = betterproto.message_field(11)
    hitting_avatars: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class AiSnapshotEntitySkillCycle(betterproto.Message):
    skill_id: int = betterproto.uint32_field(1)
    selected: bool = betterproto.bool_field(2)
    trydoskill: bool = betterproto.bool_field(3)
    success: bool = betterproto.bool_field(4)
    failed: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class AiSnapshotInfo(betterproto.Message):
    ai_snapshots: List["AiSnapshotEntityData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AiSyncInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    has_path_to_target: bool = betterproto.bool_field(2)
    is_self_killing: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AiThreatInfo(betterproto.Message):
    ai_threat_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class AllCoopInfoNotify(betterproto.Message):
    main_coop_list: List["MainCoop"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AllMarkPointNotify(betterproto.Message):
    mark_list: List["MapMarkPoint"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AllSeenMonsterNotify(betterproto.Message):
    monster_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AllWidgetDataNotify(betterproto.Message):
    anchor_point_list: List["AnchorPointData"] = betterproto.message_field(2)
    next_anchor_point_usable_time: int = betterproto.uint32_field(3)
    lunch_box_data: "LunchBoxData" = betterproto.message_field(5)
    oneoff_gather_point_detector_data_list: List[
        "OneoffGatherPointDetectorData"
    ] = betterproto.message_field(6)
    client_collector_data_list: List["ClientCollectorData"] = betterproto.message_field(
        7
    )
    cool_down_group_data_list: List["WidgetCoolDownData"] = betterproto.message_field(8)
    normal_cool_down_data_list: List["WidgetCoolDownData"] = betterproto.message_field(
        9
    )
    slot_list: List["WidgetSlotData"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class AnchorPointDataNotify(betterproto.Message):
    anchor_point_list: List["AnchorPointData"] = betterproto.message_field(1)
    next_usable_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AnchorPointData(betterproto.Message):
    anchor_point_id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    rot: "Vector" = betterproto.message_field(3)
    end_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AnchorPointOpReq(betterproto.Message):
    anchor_point_op_type: int = betterproto.uint32_field(1)
    anchor_point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AnchorPointOpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    anchor_point_op_type: int = betterproto.uint32_field(2)
    anchor_point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AnimatorForceSetAirMoveNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    in_air_move: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AnimatorParameterValueInfoPair(betterproto.Message):
    name_id: int = betterproto.int32_field(1)
    animator_para: "AnimatorParameterValueInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnimatorParameterValueInfo(betterproto.Message):
    int_val: int = betterproto.int32_field(2, group="ParaVal")
    float_val: float = betterproto.float_field(3, group="ParaVal")
    bool_val: bool = betterproto.bool_field(4, group="ParaVal")
    para_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AnnounceData(betterproto.Message):
    config_id: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    center_system_text: str = betterproto.string_field(4)
    count_down_text: str = betterproto.string_field(5)
    dungeon_confirm_text: str = betterproto.string_field(6)
    center_system_frequency: int = betterproto.uint32_field(7)
    count_down_frequency: int = betterproto.uint32_field(8)
    is_center_system_last5_every_minutes: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class AntiAddictNotify(betterproto.Message):
    msg_type: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    level: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ArenaChallengeActivityDetailInfo(betterproto.Message):
    world_level: int = betterproto.uint32_field(1)
    level_list: List["ArenaChallengeMonsterLevel"] = betterproto.message_field(2)
    level_open_time_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class ArenaChallengeChildChallengeInfo(betterproto.Message):
    challenge_index: int = betterproto.uint32_field(1)
    challenge_id: int = betterproto.uint32_field(2)
    challenge_type: int = betterproto.uint32_field(3)
    is_success: bool = betterproto.bool_field(4)
    is_settled: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class ArenaChallengeFinishNotify(betterproto.Message):
    arena_challenge_id: int = betterproto.uint32_field(1)
    arena_challenge_level: int = betterproto.uint32_field(2)
    is_success: bool = betterproto.bool_field(3)
    child_challenge_list: List[
        "ArenaChallengeChildChallengeInfo"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ArenaChallengeMonsterLevel(betterproto.Message):
    arena_challenge_id: int = betterproto.uint32_field(1)
    arena_challenge_level: int = betterproto.uint32_field(2)
    monster_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AskAddFriendNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    target_friend_brief: "FriendBrief" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AskAddFriendReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AskAddFriendRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)
    param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AsterActivityDetailInfo(betterproto.Message):
    aster_little: "AsterLittleDetailInfo" = betterproto.message_field(1)
    aster_mid: "AsterMidDetailInfo" = betterproto.message_field(2)
    aster_large: "AsterLargeDetailInfo" = betterproto.message_field(3)
    aster_progress: "AsterProgressDetailInfo" = betterproto.message_field(5)
    aster_credit: int = betterproto.uint32_field(6)
    aster_token: int = betterproto.uint32_field(7)
    is_special_reward_taken: bool = betterproto.bool_field(8)
    is_content_closed: bool = betterproto.bool_field(9)
    content_close_time: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class AsterLargeDetailInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    begin_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AsterLargeInfoNotify(betterproto.Message):
    info: "AsterLargeDetailInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AsterLittleDetailInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    stage_id: int = betterproto.uint32_field(2)
    stage_state: "AsterLittleStageState" = betterproto.enum_field(3)
    begin_time: int = betterproto.uint32_field(4)
    stage_begin_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AsterLittleInfoNotify(betterproto.Message):
    info: "AsterLittleDetailInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AsterMidCampInfoNotify(betterproto.Message):
    camp_list: List["AsterMidCampInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AsterMidCampInfo(betterproto.Message):
    camp_id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AsterMidDetailInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    camp_list: List["AsterMidCampInfo"] = betterproto.message_field(2)
    collect_count: int = betterproto.uint32_field(3)
    begin_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AsterMidInfoNotify(betterproto.Message):
    info: "AsterMidDetailInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AsterMiscInfoNotify(betterproto.Message):
    aster_credit: int = betterproto.uint32_field(1)
    aster_token: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AsterProgressDetailInfo(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    last_auto_add_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AsterProgressInfoNotify(betterproto.Message):
    info: "AsterProgressDetailInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AttackHitEffectResult(betterproto.Message):
    hit_eff_level: int = betterproto.uint32_field(1)
    retreat_strength: float = betterproto.float_field(2)
    air_strength: float = betterproto.float_field(3)
    hit_halt_time: float = betterproto.float_field(4)
    hit_halt_time_scale: float = betterproto.float_field(5)
    original_hit_eff_level: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class AttackResult(betterproto.Message):
    attacker_id: int = betterproto.uint32_field(1)
    defense_id: int = betterproto.uint32_field(2)
    anim_event_id: str = betterproto.string_field(3)
    ability_identifier: "AbilityIdentifier" = betterproto.message_field(4)
    damage: float = betterproto.float_field(6)
    is_crit: bool = betterproto.bool_field(7)
    hit_collision: "HitCollision" = betterproto.message_field(8)
    hit_pos_type: int = betterproto.uint32_field(9)
    endure_break: int = betterproto.uint32_field(10)
    resolved_dir: "Vector" = betterproto.message_field(11)
    hit_retreat_angle_compat: int = betterproto.int32_field(12)
    hit_eff_result: "AttackHitEffectResult" = betterproto.message_field(13)
    element_type: int = betterproto.uint32_field(14)
    use_gadget_damage_action: bool = betterproto.bool_field(19)
    gadget_damage_action_idx: int = betterproto.uint32_field(20)
    is_resist_text: bool = betterproto.bool_field(22)
    critical_rand: int = betterproto.uint32_field(23)
    element_amplify_rate: float = betterproto.float_field(24)
    damage_shield: float = betterproto.float_field(26)
    mute_element_hurt: bool = betterproto.bool_field(27)
    amplify_reaction_type: int = betterproto.uint32_field(30)
    addhurt_reaction_type: int = betterproto.uint32_field(31)
    bullet_fly_time_ms: int = betterproto.uint32_field(32)
    attack_count: int = betterproto.uint32_field(33)
    hashed_anim_event_id: int = betterproto.uint32_field(34)
    attack_timestamp_ms: int = betterproto.uint32_field(36)
    endure_delta: float = betterproto.float_field(37)
    target_type: int = betterproto.uint32_field(38)
    element_durability_attenuation: float = betterproto.float_field(39)


@dataclass(eq=False, repr=False)
class AuthorityChange(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    authority_peer_id: int = betterproto.uint32_field(2)
    entity_authority_info: "EntityAuthorityInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AvatarAddNotify(betterproto.Message):
    avatar: "AvatarInfo" = betterproto.message_field(1)
    is_in_team: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class AvatarBuffAddNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    buff_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarBuffDelNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    buff_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarCardChangeReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    item_id: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarCardChangeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class AvatarChangeAnimHashReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    anim_hash: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarChangeAnimHashRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    anim_hash: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarChangeCostumeNotify(betterproto.Message):
    entity_info: "SceneEntityInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AvatarChangeCostumeReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    costume_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarChangeCostumeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    costume_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarChangeElementTypeReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    area_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarChangeElementTypeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class AvatarDataNotify(betterproto.Message):
    avatar_list: List["AvatarInfo"] = betterproto.message_field(1)
    avatar_team_map: Dict[int, "AvatarTeam"] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    cur_avatar_team_id: int = betterproto.uint32_field(3)
    choose_avatar_guid: int = betterproto.uint64_field(4)
    temp_avatar_guid_list: List[int] = betterproto.uint64_field(5)
    owned_flycloak_list: List[int] = betterproto.uint32_field(6)
    owned_costume_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AvatarDelNotify(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AvatarDieAnimationEndReq(betterproto.Message):
    die_guid: int = betterproto.uint64_field(1)
    skill_id: int = betterproto.uint32_field(2)
    reborn_pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AvatarDieAnimationEndRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    die_guid: int = betterproto.uint64_field(2)
    skill_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarEnterElementViewNotify(betterproto.Message):
    avatar_entity_id: int = betterproto.uint32_field(1)
    is_triggerd: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class AvatarEnterSceneInfo(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    avatar_entity_id: int = betterproto.uint32_field(2)
    avatar_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(3)
    buff_id_list: List[int] = betterproto.uint32_field(4)
    weapon_guid: int = betterproto.uint64_field(5)
    weapon_entity_id: int = betterproto.uint32_field(6)
    weapon_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(7)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class AvatarEquipAffixInfo(betterproto.Message):
    equip_affix_id: int = betterproto.uint32_field(1)
    left_cd_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarEquipAffixStartNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    equip_affix_info: "AvatarEquipAffixInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AvatarEquipChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    equip_type: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint32_field(3)
    equip_guid: int = betterproto.uint64_field(4)
    weapon: "SceneWeaponInfo" = betterproto.message_field(5)
    reliquary: "SceneReliquaryInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AvatarExcelInfo(betterproto.Message):
    prefab_path_hash: int = betterproto.uint64_field(1)
    prefab_path_remote_hash: int = betterproto.uint64_field(2)
    controller_path_hash: int = betterproto.uint64_field(3)
    controller_path_remote_hash: int = betterproto.uint64_field(4)
    combat_config_hash: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class AvatarExpeditionAllDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AvatarExpeditionAllDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        2, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )
    open_expedition_list: List[int] = betterproto.uint32_field(3)
    expedition_count_limit: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AvatarExpeditionCallBackReq(betterproto.Message):
    avatar_guid: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AvatarExpeditionCallBackRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        2, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarExpeditionDataNotify(betterproto.Message):
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarExpeditionGetRewardReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AvatarExpeditionGetRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        2, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarExpeditionInfo(betterproto.Message):
    state: "AvatarExpeditionState" = betterproto.enum_field(1)
    exp_id: int = betterproto.uint32_field(2)
    hour_time: int = betterproto.uint32_field(3)
    start_time: int = betterproto.uint32_field(4)
    shorten_ratio: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class AvatarExpeditionStartReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    exp_id: int = betterproto.uint32_field(2)
    hour_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarExpeditionStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    expedition_info_map: Dict[int, "AvatarExpeditionInfo"] = betterproto.map_field(
        2, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarFetterDataNotify(betterproto.Message):
    fetter_info_map: Dict[int, "AvatarFetterInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarFetterInfo(betterproto.Message):
    exp_number: int = betterproto.uint32_field(1)
    exp_level: int = betterproto.uint32_field(2)
    open_id_list: List[int] = betterproto.uint32_field(3)
    finish_id_list: List[int] = betterproto.uint32_field(4)
    rewarded_fetter_level_list: List[int] = betterproto.uint32_field(5)
    fetter_list: List["FetterData"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AvatarFetterLevelRewardReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    fetter_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarFetterLevelRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    fetter_level: int = betterproto.uint32_field(3)
    reward_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AvatarFightPropNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class AvatarFightPropUpdateNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class AvatarFlycloakChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    flycloak_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarFollowRouteNotify(betterproto.Message):
    route: "Route" = betterproto.message_field(1)
    start_scene_time_ms: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(3)
    client_params: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class AvatarGainCostumeNotify(betterproto.Message):
    costume_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AvatarGainFlycloakNotify(betterproto.Message):
    flycloak_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    guid: int = betterproto.uint64_field(2)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    life_state: int = betterproto.uint32_field(4)
    equip_guid_list: List[int] = betterproto.uint64_field(5)
    talent_id_list: List[int] = betterproto.uint32_field(6)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    trial_avatar_info: "TrialAvatarInfo" = betterproto.message_field(9)
    skill_map: Dict[int, "AvatarSkillInfo"] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    skill_depot_id: int = betterproto.uint32_field(11)
    fetter_info: "AvatarFetterInfo" = betterproto.message_field(12)
    core_proud_skill_level: int = betterproto.uint32_field(13)
    inherent_proud_skill_list: List[int] = betterproto.uint32_field(14)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    expedition_state: "AvatarExpeditionState" = betterproto.enum_field(16)
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        17, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_focus: bool = betterproto.bool_field(18)
    avatar_type: int = betterproto.uint32_field(19)
    team_resonance_list: List[int] = betterproto.uint32_field(20)
    wearing_flycloak_id: int = betterproto.uint32_field(21)
    equip_affix_list: List["AvatarEquipAffixInfo"] = betterproto.message_field(22)
    born_time: int = betterproto.uint32_field(23)
    pending_promote_reward_list: List[int] = betterproto.uint32_field(24)
    costume_id: int = betterproto.uint32_field(25)
    excel_info: "AvatarExcelInfo" = betterproto.message_field(26)
    anim_hash: int = betterproto.uint32_field(27)


@dataclass(eq=False, repr=False)
class AvatarLifeStateChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    life_state: int = betterproto.uint32_field(2)
    source_entity_id: int = betterproto.uint32_field(3)
    attack_tag: str = betterproto.string_field(4)
    die_type: "PlayerDieType" = betterproto.enum_field(5)
    move_reliable_seq: int = betterproto.uint32_field(6)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class AvatarPromoteGetRewardReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    promote_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarPromoteGetRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    promote_level: int = betterproto.uint32_field(3)
    reward_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AvatarPromoteReq(betterproto.Message):
    guid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class AvatarPromoteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class AvatarPropChangeReasonNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    prop_type: int = betterproto.uint32_field(2)
    old_value: float = betterproto.float_field(3)
    cur_value: float = betterproto.float_field(4)
    reason: "PropChangeReason" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class AvatarPropNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    prop_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_INT64
    )


@dataclass(eq=False, repr=False)
class AvatarSatiationDataNotify(betterproto.Message):
    satiation_data_list: List["AvatarSatiationData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AvatarSatiationData(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    finish_time: float = betterproto.float_field(2)
    penalty_finish_time: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class AvatarSkillChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    entity_id: int = betterproto.uint32_field(2)
    skill_depot_id: int = betterproto.uint32_field(3)
    avatar_skill_id: int = betterproto.uint32_field(4)
    old_level: int = betterproto.uint32_field(5)
    cur_level: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class AvatarSkillDepotChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    entity_id: int = betterproto.uint32_field(2)
    skill_depot_id: int = betterproto.uint32_field(3)
    talent_id_list: List[int] = betterproto.uint32_field(4)
    proud_skill_list: List[int] = betterproto.uint32_field(5)
    core_proud_skill_level: int = betterproto.uint32_field(6)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class AvatarSkillInfoNotify(betterproto.Message):
    guid: int = betterproto.uint64_field(1)
    skill_map: Dict[int, "AvatarSkillInfo"] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AvatarSkillInfo(betterproto.Message):
    pass_cd_time: int = betterproto.uint32_field(1)
    full_cd_time_list: List[int] = betterproto.uint32_field(2)
    max_charge_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarSkillMaxChargeCountNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    skill_id: int = betterproto.uint32_field(2)
    max_charge_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarSkillUpgradeReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    avatar_skill_id: int = betterproto.uint32_field(2)
    old_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarSkillUpgradeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    avatar_skill_id: int = betterproto.uint32_field(3)
    old_level: int = betterproto.uint32_field(4)
    cur_level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AvatarTeam(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(1)
    team_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AvatarTeamResonanceInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    add_team_resonance_id_list: List[int] = betterproto.uint32_field(3)
    del_team_resonance_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AvatarTeamUpdateNotify(betterproto.Message):
    avatar_team_map: Dict[int, "AvatarTeam"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    temp_avatar_guid_list: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class AvatarUnlockTalentNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    entity_id: int = betterproto.uint32_field(2)
    talent_id: int = betterproto.uint32_field(3)
    skill_depot_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AvatarUpgradeReq(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    avatar_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class AvatarUpgradeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    old_level: int = betterproto.uint32_field(3)
    cur_level: int = betterproto.uint32_field(4)
    old_fight_prop_map: Dict[int, float] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    cur_fight_prop_map: Dict[int, float] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class AvatarWearFlycloakReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    flycloak_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarWearFlycloakRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    flycloak_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BackMyWorldReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BackMyWorldRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class BalloonPlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    combo: int = betterproto.uint32_field(3)
    combo_disable_time: int = betterproto.uint32_field(4)
    cur_score: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class BalloonSettleInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    shoot_count: int = betterproto.uint32_field(2)
    max_combo: int = betterproto.uint32_field(3)
    final_score: int = betterproto.uint32_field(4)
    player_info: "OnlinePlayerInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BargainOfferPriceReq(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(1)
    price: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BargainOfferPriceRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    bargain_result: "BargainResultType" = betterproto.enum_field(2)
    result_param: int = betterproto.uint32_field(3)
    cur_mood: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class BargainSnapshot(betterproto.Message):
    cur_mood: int = betterproto.int32_field(1)
    expected_price: int = betterproto.uint32_field(2)
    price_low_limit: int = betterproto.uint32_field(3)
    bargain_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BargainStartNotify(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(1)
    snapshot: "BargainSnapshot" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BargainTerminateNotify(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BattlePassAllDataNotify(betterproto.Message):
    have_cur_schedule: bool = betterproto.bool_field(1)
    cur_schedule: "BattlePassSchedule" = betterproto.message_field(2)
    mission_list: List["BattlePassMission"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BattlePassBuySuccNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    product_play_type: int = betterproto.uint32_field(2)
    item_list: List["ItemParam"] = betterproto.message_field(3)
    add_point: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BattlePassCurScheduleUpdateNotify(betterproto.Message):
    have_cur_schedule: bool = betterproto.bool_field(1)
    cur_schedule: "BattlePassSchedule" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BattlePassCycle(betterproto.Message):
    cycle_idx: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BattlePassMissionDelNotify(betterproto.Message):
    del_mission_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BattlePassMission(betterproto.Message):
    mission_id: int = betterproto.uint32_field(1)
    cur_progress: int = betterproto.uint32_field(2)
    total_progress: int = betterproto.uint32_field(3)
    reward_battle_pass_point: int = betterproto.uint32_field(4)
    mission_type: int = betterproto.uint32_field(5)
    mission_status: "BattlePassMissionMissionStatus" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class BattlePassMissionUpdateNotify(betterproto.Message):
    mission_list: List["BattlePassMission"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BattlePassProduct(betterproto.Message):
    normal_product_id: str = betterproto.string_field(1)
    extra_product_id: str = betterproto.string_field(2)
    upgrade_product_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class BattlePassRewardTag(betterproto.Message):
    unlock_status: "BattlePassUnlockStatus" = betterproto.enum_field(1)
    level: int = betterproto.uint32_field(2)
    reward_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BattlePassRewardTakeOption(betterproto.Message):
    tag: "BattlePassRewardTag" = betterproto.message_field(1)
    option_idx: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BattlePassSchedule(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    point: int = betterproto.uint32_field(3)
    unlock_status: "BattlePassUnlockStatus" = betterproto.enum_field(4)
    reward_taken_list: List["BattlePassRewardTag"] = betterproto.message_field(5)
    begin_time: int = betterproto.uint32_field(6)
    end_time: int = betterproto.uint32_field(7)
    cur_cycle: "BattlePassCycle" = betterproto.message_field(8)
    is_extra_paid_reward_taken: bool = betterproto.bool_field(9)
    product_info: "BattlePassProduct" = betterproto.message_field(10)
    is_viewed: bool = betterproto.bool_field(11)
    cur_cycle_points: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class BeginCameraSceneLookNotify(betterproto.Message):
    look_pos: "Vector" = betterproto.message_field(1)
    duration: float = betterproto.float_field(2)
    is_force: bool = betterproto.bool_field(3)
    is_recover_keep_current: bool = betterproto.bool_field(4)
    is_allow_input: bool = betterproto.bool_field(5)
    is_set_follow_pos: bool = betterproto.bool_field(6)
    follow_pos: "Vector" = betterproto.message_field(7)
    is_force_walk: bool = betterproto.bool_field(8)
    is_change_play_mode: bool = betterproto.bool_field(9)
    screen_x: float = betterproto.float_field(10)
    screen_y: float = betterproto.float_field(11)
    is_set_screen_x_y: bool = betterproto.bool_field(12)
    other_params: List[str] = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class BigTalentPointConvertReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    item_guid_list: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class BigTalentPointConvertRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class Birthday(betterproto.Message):
    month: int = betterproto.uint32_field(1)
    day: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlessingAcceptAllGivePicReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingAcceptAllGivePicRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    accept_pic_num_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    accept_index_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BlessingAcceptGivePicReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlessingAcceptGivePicRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    uid: int = betterproto.uint32_field(2)
    index: int = betterproto.uint32_field(3)
    pic_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BlessingActivityDetailInfo(betterproto.Message):
    is_activated: bool = betterproto.bool_field(1)
    is_content_closed: bool = betterproto.bool_field(2)
    cur_day_scan_type: int = betterproto.uint32_field(3)
    cur_day_scan_num: int = betterproto.uint32_field(4)
    pic_num_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    redeem_reward_num: int = betterproto.uint32_field(6)
    next_refresh_time: int = betterproto.uint32_field(7)
    content_close_time: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class BlessingFriendPicData(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    signature: str = betterproto.string_field(3)
    nickname: str = betterproto.string_field(4)
    pic_num_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    remark_name: str = betterproto.string_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class BlessingGetAllRecvPicRecordListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingGetAllRecvPicRecordListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    recv_pic_record_list: List["BlessingRecvPicRecord"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BlessingGetFriendPicListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingGetFriendPicListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    friend_pic_data_list: List["BlessingFriendPicData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BlessingGiveFriendPicReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    pic_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlessingGiveFriendPicRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    uid: int = betterproto.uint32_field(2)
    pic_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BlessingRecvFriendPicNotify(betterproto.Message):
    pic_id: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlessingRecvPicRecord(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    nickname: str = betterproto.string_field(3)
    signature: str = betterproto.string_field(4)
    pic_id: int = betterproto.uint32_field(5)
    is_recv: bool = betterproto.bool_field(6)
    index: int = betterproto.uint32_field(7)
    remark_name: str = betterproto.string_field(8)
    profile_picture: "ProfilePicture" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class BlessingRedeemRewardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BlessingRedeemRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    pic_num_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class BlessingScanReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BlessingScanRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scan_pic_id: int = betterproto.uint32_field(2)
    cur_day_scan_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BlitzRushActivityDetailInfo(betterproto.Message):
    stage_list: List["BlitzRushStage"] = betterproto.message_field(1)
    content_close_time: int = betterproto.uint32_field(2)
    parkour_level_info_list: List["ParkourLevelInfo"] = betterproto.message_field(3)
    is_content_closed: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class BlitzRushParkourRestartReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlitzRushParkourRestartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BlitzRushStage(betterproto.Message):
    open_time: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BlockInfo(betterproto.Message):
    block_id: int = betterproto.uint32_field(1)
    data_version: int = betterproto.uint32_field(2)
    bin_data: bytes = betterproto.bytes_field(3)
    is_dirty: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class BlossomBriefInfoNotify(betterproto.Message):
    brief_info_list: List["BlossomBriefInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BlossomBriefInfo(betterproto.Message):
    refresh_id: int = betterproto.uint32_field(1)
    circle_camp_id: int = betterproto.uint32_field(2)
    city_id: int = betterproto.uint32_field(3)
    resin: int = betterproto.uint32_field(4)
    pos: "Vector" = betterproto.message_field(5)
    reward_id: int = betterproto.uint32_field(6)
    monster_level: int = betterproto.uint32_field(7)
    is_guide_opened: bool = betterproto.bool_field(8)
    state: int = betterproto.uint32_field(9)
    scene_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class BlossomChestCreateNotify(betterproto.Message):
    refresh_id: int = betterproto.uint32_field(1)
    circle_camp_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BlossomChestInfoNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    blossom_chest_info: "BlossomChestInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BlossomChestInfo(betterproto.Message):
    resin: int = betterproto.uint32_field(1)
    qualify_uid_list: List[int] = betterproto.uint32_field(2)
    remain_uid_list: List[int] = betterproto.uint32_field(3)
    dead_time: int = betterproto.uint32_field(4)
    blossom_refresh_type: int = betterproto.uint32_field(5)
    refresh_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class BlossomScheduleInfo(betterproto.Message):
    refresh_id: int = betterproto.uint32_field(1)
    circle_camp_id: int = betterproto.uint32_field(2)
    round: int = betterproto.uint32_field(3)
    state: int = betterproto.uint32_field(4)
    progress: int = betterproto.uint32_field(5)
    finish_progress: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class BonusActivityInfo(betterproto.Message):
    bonus_activity_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BonusActivityInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BonusActivityInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    bonus_activity_info_list: List["BonusActivityInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BonusActivityUpdateNotify(betterproto.Message):
    bonus_activity_info_list: List["BonusActivityInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BonusOpActivityInfo(betterproto.Message):
    left_bonus_count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BossChestActivateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    qualify_uid_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BossChestInfo(betterproto.Message):
    monster_config_id: int = betterproto.uint32_field(1)
    resin: int = betterproto.uint32_field(2)
    remain_uid_list: List[int] = betterproto.uint32_field(3)
    qualify_uid_list: List[int] = betterproto.uint32_field(4)
    uid_discount_map: Dict[int, "WeeklyBossResinDiscountInfo"] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class BounceConjuringActivityDetailInfo(betterproto.Message):
    chapter_info_list: List["BounceConjuringChapterInfo"] = betterproto.message_field(1)
    content_close_time: int = betterproto.uint32_field(2)
    is_content_closed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class BounceConjuringChapterInfo(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)
    best_score: int = betterproto.uint32_field(2)
    open_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BounceConjuringGallerySettleInfo(betterproto.Message):
    score: int = betterproto.uint32_field(1)
    destroyed_machine_count: int = betterproto.uint32_field(2)
    damage: float = betterproto.float_field(3)
    normal_hit_count: int = betterproto.uint32_field(4)
    perfect_hit_count: int = betterproto.uint32_field(5)
    fever_count: int = betterproto.uint32_field(6)
    player_info: "OnlinePlayerInfo" = betterproto.message_field(7)
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(8)
    gadget_count_map: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class BounceConjuringSettleNotify(betterproto.Message):
    settle_info_map: Dict[
        int, "BounceConjuringGallerySettleInfo"
    ] = betterproto.map_field(1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    is_new_record: bool = betterproto.bool_field(2)
    total_score: int = betterproto.uint32_field(3)
    chapter_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BuildingInfo(betterproto.Message):
    building_id: int = betterproto.uint32_field(1)
    point_config_id: int = betterproto.uint32_field(2)
    cost: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)
    refund: int = betterproto.uint32_field(5)
    owner_uid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class BuoyantCombatDailyInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(1)
    start_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BuoyantCombatDetailInfo(betterproto.Message):
    daily_info_list: List["BuoyantCombatDailyInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BuoyantCombatGallerySettleInfo(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    kill_monster_count: int = betterproto.uint32_field(2)
    kill_special_monster_count: int = betterproto.uint32_field(3)
    kill_target_count: int = betterproto.uint32_field(4)
    final_score: int = betterproto.uint32_field(5)
    gallery_level: int = betterproto.uint32_field(6)
    gallery_multiple: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class BuoyantCombatSettleInfo(betterproto.Message):
    settle_info: "BuoyantCombatGallerySettleInfo" = betterproto.message_field(1)
    is_new_record: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BuoyantCombatSettleNotify(betterproto.Message):
    settle_info: "BuoyantCombatSettleInfo" = betterproto.message_field(1)
    gallery_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BuyBattlePassLevelReq(betterproto.Message):
    buy_level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BuyBattlePassLevelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    buy_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BuyGoodsReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(1)
    goods: "ShopGoods" = betterproto.message_field(2)
    buy_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BuyGoodsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop_type: int = betterproto.uint32_field(2)
    goods: "ShopGoods" = betterproto.message_field(3)
    buy_count: int = betterproto.uint32_field(4)
    goods_list: List["ShopGoods"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BuyResinReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BuyResinRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cur_value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CalcWeaponUpgradeReturnItemsReq(betterproto.Message):
    target_weapon_guid: int = betterproto.uint64_field(1)
    food_weapon_guid_list: List[int] = betterproto.uint64_field(2)
    item_param_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CalcWeaponUpgradeReturnItemsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_weapon_guid: int = betterproto.uint64_field(2)
    item_param_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CancelCityReputationRequestReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    request_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CancelCityReputationRequestRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    request_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CancelCoopTaskReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CancelCoopTaskRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chapter_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CancelFinishParentQuestNotify(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CanUseSkillNotify(betterproto.Message):
    is_can_use_skill: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CardProductRewardNotify(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    hcoin: int = betterproto.uint32_field(2)
    remain_days: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CellInfo(betterproto.Message):
    type: "SceneSurfaceMaterial" = betterproto.enum_field(1)
    y: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ChallengeDataNotify(betterproto.Message):
    challenge_index: int = betterproto.uint32_field(1)
    param_index: int = betterproto.uint32_field(2)
    value: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChallengeRecordNotify(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    challenge_record_list: List["ChallengeRecord"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChallengeRecord(betterproto.Message):
    challenge_index: int = betterproto.uint32_field(1)
    challenge_id: int = betterproto.uint32_field(2)
    challenge_record_type: int = betterproto.uint32_field(3)
    best_value: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChangeAvatarReq(betterproto.Message):
    guid: int = betterproto.uint64_field(1)
    skill_id: int = betterproto.uint32_field(2)
    is_move: bool = betterproto.bool_field(3)
    move_pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ChangeAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cur_guid: int = betterproto.uint64_field(2)
    skill_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChangeGameTimeReq(betterproto.Message):
    game_time: int = betterproto.uint32_field(1)
    is_force_set: bool = betterproto.bool_field(2)
    extra_days: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChangeGameTimeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cur_game_time: int = betterproto.uint32_field(2)
    extra_days: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChangeMailStarNotify(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)
    is_star: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ChangeMpTeamAvatarReq(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(1)
    cur_avatar_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class ChangeMpTeamAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid_list: List[int] = betterproto.uint64_field(2)
    cur_avatar_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ChangeServerGlobalValueNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChangeTeamNameReq(betterproto.Message):
    team_id: int = betterproto.int32_field(1)
    team_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ChangeTeamNameRsp(betterproto.Message):
    team_id: int = betterproto.int32_field(1)
    team_name: str = betterproto.string_field(2)
    retcode: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class ChangeWorldToSingleModeNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChangeWorldToSingleModeReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChangeWorldToSingleModeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    quit_mp_valid_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChannelerSlabActivityDetailInfo(betterproto.Message):
    stage_list: List["ChannelerSlabChallengeStage"] = betterproto.message_field(1)
    play_end_time: int = betterproto.uint32_field(2)
    buff_info: "ChannellerSlabBuffInfo" = betterproto.message_field(3)
    loop_dungeon_stage_info: "ChannellerSlabLoopDungeonStageInfo" = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class ChannelerSlabCamp(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    reward_id: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(3)
    buff_num: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChannelerSlabChallenge(betterproto.Message):
    camp_list: List["ChannelerSlabCamp"] = betterproto.message_field(1)
    active_camp_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChannelerSlabChallengeStage(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    open_time: int = betterproto.uint32_field(2)
    challenge_list: List["ChannelerSlabChallenge"] = betterproto.message_field(3)
    dungeon_info: "ChannelerSlabOneoffDungeon" = betterproto.message_field(4)
    is_open: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class ChannelerSlabOneoffDungeon(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    is_done: bool = betterproto.bool_field(2)
    reward_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannelerSlabStageActiveChallengeIndexNotify(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    challenge_index: int = betterproto.uint32_field(2)
    active_camp_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannelerSlabStageOneoffDungeonNotify(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    is_done: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ChannellerSlabAssistInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    avatar_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannellerSlabBuffInfo(betterproto.Message):
    buff_id_list: List[int] = betterproto.uint32_field(1)
    single_buff_scheme_info: "ChannellerSlabBuffSchemeInfo" = betterproto.message_field(
        2
    )
    mp_buff_scheme_info: "ChannellerSlabBuffSchemeInfo" = betterproto.message_field(3)
    assist_info_list: List["ChannellerSlabAssistInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ChannellerSlabBuffSchemeInfo(betterproto.Message):
    slot_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    total_energy: int = betterproto.uint32_field(2)
    self_energy: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannellerSlabCheckEnterLoopDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChannellerSlabCheckEnterLoopDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ChannellerSlabEnterLoopDungeonReq(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(2)
    condition_id_list: List[int] = betterproto.uint32_field(3)
    point_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChannellerSlabEnterLoopDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    dungeon_index: int = betterproto.uint32_field(2)
    difficulty_id: int = betterproto.uint32_field(3)
    condition_id_list: List[int] = betterproto.uint32_field(4)
    point_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonChallengeInfoNotify(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(2)
    condition_id_list: List[int] = betterproto.uint32_field(3)
    challenge_score: int = betterproto.uint32_field(4)
    scheme_buff_id_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonInfo(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)
    is_first_pass_reward_taken: bool = betterproto.bool_field(3)
    last_condition_id_list: List[int] = betterproto.uint32_field(4)
    open_time: int = betterproto.uint32_field(5)
    is_open: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonResultInfo(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(1)
    is_success: bool = betterproto.bool_field(2)
    challenge_score: int = betterproto.uint32_field(3)
    challenge_max_score: int = betterproto.uint32_field(4)
    is_in_time_limit: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonSelectConditionReq(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(2)
    condition_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonSelectConditionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    dungeon_index: int = betterproto.uint32_field(2)
    difficulty_id: int = betterproto.uint32_field(3)
    condition_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonStageInfo(betterproto.Message):
    dungeon_info_list: List[
        "ChannellerSlabLoopDungeonInfo"
    ] = betterproto.message_field(1)
    last_difficulty_id: int = betterproto.uint32_field(2)
    taken_reward_index_list: List[int] = betterproto.uint32_field(3)
    open_time: int = betterproto.uint32_field(4)
    is_open: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonTakeFirstPassRewardReq(betterproto.Message):
    dungeon_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonTakeFirstPassRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    dungeon_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonTakeScoreRewardReq(betterproto.Message):
    reward_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChannellerSlabLoopDungeonTakeScoreRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reward_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChannellerSlabOneOffDungeonInfoNotify(betterproto.Message):
    scheme_buff_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChannellerSlabOneOffDungeonInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChannellerSlabOneOffDungeonInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scheme_buff_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChannellerSlabSaveAssistInfoReq(betterproto.Message):
    assist_info_list: List["ChannellerSlabAssistInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ChannellerSlabSaveAssistInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    assist_info_list: List["ChannellerSlabAssistInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChannellerSlabTakeoffBuffReq(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)
    slot_id: int = betterproto.uint32_field(2)
    is_mp: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ChannellerSlabTakeoffBuffRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    buff_id: int = betterproto.uint32_field(2)
    slot_id: int = betterproto.uint32_field(3)
    is_mp: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class ChannellerSlabWearBuffReq(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)
    slot_id: int = betterproto.uint32_field(2)
    is_mp: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ChannellerSlabWearBuffRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    buff_id: int = betterproto.uint32_field(2)
    slot_id: int = betterproto.uint32_field(3)
    is_mp: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class ChapterStateNotify(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)
    chapter_state: "ChapterState" = betterproto.enum_field(2)
    need_player_level: "ChapterStateNotifyNeedPlayerLevel" = betterproto.message_field(
        3
    )
    need_begin_time: "ChapterStateNotifyNeedBeginTime" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ChapterStateNotifyNeedPlayerLevel(betterproto.Message):
    is_limit: bool = betterproto.bool_field(1)
    config_need_player_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChapterStateNotifyNeedBeginTime(betterproto.Message):
    is_limit: bool = betterproto.bool_field(1)
    config_need_begin_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChatChannelDataNotify(betterproto.Message):
    channel_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChatChannelUpdateNotify(betterproto.Message):
    channel_id: int = betterproto.uint32_field(1)
    is_create: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ChatEmojiCollectionData(betterproto.Message):
    emoji_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChatHistoryNotify(betterproto.Message):
    channel_id: int = betterproto.uint32_field(1)
    chat_info: List["ChatInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChatInfo(betterproto.Message):
    text: str = betterproto.string_field(100, group="Content")
    icon: int = betterproto.uint32_field(101, group="Content")
    system_hint: "ChatInfoSystemHint" = betterproto.message_field(102, group="Content")
    time: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)
    sequence: int = betterproto.uint32_field(3)
    to_uid: int = betterproto.uint32_field(4)
    is_read: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class ChatInfoSystemHint(betterproto.Message):
    type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CheckAddItemExceedLimitNotify(betterproto.Message):
    is_drop: bool = betterproto.bool_field(1)
    exceeded_item_list: List[int] = betterproto.uint32_field(2)
    exceeded_item_type_list: List[int] = betterproto.uint32_field(3)
    msg_type: "CheckAddItemExceedLimitNotifyItemExceedLimitMsgType" = (
        betterproto.enum_field(4)
    )


@dataclass(eq=False, repr=False)
class CheckSegmentCrcNotify(betterproto.Message):
    info_list: List["SegmentInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CheckSegmentCrcReq(betterproto.Message):
    info_list: List["SegmentCrcInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ChessActivityDetailInfo(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    is_teach_dungeon_finished: bool = betterproto.bool_field(3)
    obtained_exp: int = betterproto.uint32_field(4)
    available_exp: int = betterproto.uint32_field(5)
    finished_map_id_list: List[int] = betterproto.uint32_field(6)
    punish_over_time: int = betterproto.uint32_field(7)
    content_close_time: int = betterproto.uint32_field(8)
    is_content_closed: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class ChessCardInfo(betterproto.Message):
    card_id: int = betterproto.uint32_field(1)
    effect_stack: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChessEntranceDetailInfo(betterproto.Message):
    info_list: List["ChessEntranceInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ChessEntranceInfo(betterproto.Message):
    entrance_index: int = betterproto.uint32_field(1)
    monster_info_list: List["ChessMonsterInfo"] = betterproto.message_field(2)
    entrance_point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChessEscapedMonstersNotify(betterproto.Message):
    excaped_monsters: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChessLeftMonstersNotify(betterproto.Message):
    left_monsters: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChessManualRefreshCardsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ChessManualRefreshCardsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ChessMonsterInfo(betterproto.Message):
    monster_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    affix_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChessMysteryInfo(betterproto.Message):
    entrance_point_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    exit_point_id_list: List[int] = betterproto.uint32_field(2)
    detail_info_map: Dict[int, "ChessEntranceDetailInfo"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ChessNormalCardInfo(betterproto.Message):
    card_id: int = betterproto.uint32_field(1)
    cost_points: int = betterproto.uint32_field(2)
    is_attach_curse: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ChessPickCardNotify(betterproto.Message):
    normal_card_info: "ChessNormalCardInfo" = betterproto.message_field(1)
    curse_card_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChessPickCardReq(betterproto.Message):
    card_id: int = betterproto.uint32_field(1)
    card_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChessPickCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    card_id: int = betterproto.uint32_field(2)
    card_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChessPlayerInfoNotify(betterproto.Message):
    player_info: "ChessPlayerInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ChessPlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    building_points: int = betterproto.uint32_field(2)
    free_refresh_count: int = betterproto.uint32_field(3)
    free_refresh_limit: int = betterproto.uint32_field(4)
    candidate_card_info_list: List["ChessNormalCardInfo"] = betterproto.message_field(5)
    candidate_index: int = betterproto.uint32_field(6)
    refresh_cost: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ChessSelectedCardsNotify(betterproto.Message):
    selected_card_info_list: List["ChessCardInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChildQuest(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    quest_config_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChooseCurAvatarTeamReq(betterproto.Message):
    team_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChooseCurAvatarTeamRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cur_team_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CityInfo(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    crystal_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CityReputationDataNotify(betterproto.Message):
    simple_info_list: List["CityReputationSimpleInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CityReputationExploreInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    taken_explore_reward_list: List[int] = betterproto.uint32_field(2)
    explore_percent: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CityReputationHuntInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    has_reward: bool = betterproto.bool_field(2)
    cur_week_finish_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CityReputationInfo(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    taken_level_reward_list: List[int] = betterproto.uint32_field(3)
    total_accept_request_num: int = betterproto.uint32_field(4)
    next_refresh_time: int = betterproto.uint32_field(5)
    quest_info: "CityReputationQuestInfo" = betterproto.message_field(10)
    request_info: "CityReputationRequestInfo" = betterproto.message_field(11)
    explore_info: "CityReputationExploreInfo" = betterproto.message_field(12)
    hunt_info: "CityReputationHuntInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class CityReputationLevelupNotify(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CityReputationQuestInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    taken_parent_quest_reward_list: List[int] = betterproto.uint32_field(2)
    finished_parent_quest_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CityReputationRequestInfo(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)
    request_info_list: List[
        "CityReputationRequestInfoRequestInfo"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CityReputationRequestInfoRequestInfo(betterproto.Message):
    request_id: int = betterproto.uint32_field(1)
    quest_id: int = betterproto.uint32_field(2)
    is_taken_reward: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CityReputationSimpleInfo(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClearRoguelikeCurseNotify(betterproto.Message):
    is_clear_all: bool = betterproto.bool_field(1)
    clear_curse_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    card_id: int = betterproto.uint32_field(3)
    is_curse_all_clear: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class ClientAbilitiesInitFinishCombineNotify(betterproto.Message):
    entity_invoke_list: List["EntityAbilityInvokeEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ClientAbilityChangeNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ClientAbilityInitBeginNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ClientAbilityInitFinishNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ClientAiStateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    cur_tactic: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClientBulletCreateNotify(betterproto.Message):
    param: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ClientCollectorDataNotify(betterproto.Message):
    client_collector_data_list: List["ClientCollectorData"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class ClientCollectorData(betterproto.Message):
    material_id: int = betterproto.uint32_field(1)
    max_points: int = betterproto.uint32_field(2)
    curr_points: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ClientGadgetInfo(betterproto.Message):
    camp_id: int = betterproto.uint32_field(1)
    camp_type: int = betterproto.uint32_field(2)
    guid: int = betterproto.uint64_field(3)
    owner_entity_id: int = betterproto.uint32_field(4)
    target_entity_id: int = betterproto.uint32_field(5)
    async_load: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class ClientHashDebugNotify(betterproto.Message):
    job_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ClientLoadingCostumeVerificationNotify(betterproto.Message):
    costume_id: int = betterproto.uint32_field(1)
    guid: int = betterproto.uint64_field(2)
    prefab_hash: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ClientLockGameTimeNotify(betterproto.Message):
    is_lock: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ClientMassiveEntity(betterproto.Message):
    water_info: "MassiveWaterInfo" = betterproto.message_field(4, group="EntityInfo")
    grass_info: "MassiveGrassInfo" = betterproto.message_field(5, group="EntityInfo")
    box_info: "MassiveBoxInfo" = betterproto.message_field(6, group="EntityInfo")
    entity_type: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    obj_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class ClientNewMailNotify(betterproto.Message):
    not_read_num: int = betterproto.uint32_field(1)
    not_got_attachment_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClientPauseNotify(betterproto.Message):
    is_open: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ClientReconnectNotify(betterproto.Message):
    reason: "ClientReconnectReason" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class ClientReportNotify(betterproto.Message):
    report_type: str = betterproto.string_field(1)
    report_value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ClientScriptEventNotify(betterproto.Message):
    event_type: int = betterproto.uint32_field(1)
    source_entity_id: int = betterproto.uint32_field(2)
    target_entity_id: int = betterproto.uint32_field(3)
    param_list: List[int] = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ClientTransmitReq(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)
    reason: "TransmitReason" = betterproto.enum_field(3)
    scene_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ClientTransmitRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reason: "TransmitReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class ClientTriggerEventNotify(betterproto.Message):
    event_type: "EventTriggerType" = betterproto.enum_field(1)
    force_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CloseCommonTipsNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ClosedItemNotify(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CodexDataFullNotify(betterproto.Message):
    type_data_list: List["CodexTypeData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CodexDataUpdateNotify(betterproto.Message):
    type: "CodexType" = betterproto.enum_field(1)
    id: int = betterproto.uint32_field(2)
    weapon_max_promote_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CodexTypeComparer(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CodexTypeData(betterproto.Message):
    type: "CodexType" = betterproto.enum_field(1)
    codex_id_list: List[int] = betterproto.uint32_field(2)
    have_viewed_list: List[bool] = betterproto.bool_field(3)
    weapon_max_promote_level_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class CombatInvocationsNotify(betterproto.Message):
    invoke_list: List["CombatInvokeEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CombatInvokeEntry(betterproto.Message):
    argument_type: "CombatTypeArgument" = betterproto.enum_field(1)
    forward_type: "ForwardType" = betterproto.enum_field(2)
    combat_data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class CombineDataNotify(betterproto.Message):
    combine_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CombineFormulaDataNotify(betterproto.Message):
    combine_id: int = betterproto.uint32_field(1)
    is_locked: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CombineReq(betterproto.Message):
    combine_id: int = betterproto.uint32_field(1)
    combine_count: int = betterproto.uint32_field(2)
    avatar_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class CombineRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    combine_id: int = betterproto.uint32_field(2)
    combine_count: int = betterproto.uint32_field(3)
    avatar_guid: int = betterproto.uint64_field(4)
    cost_item_list: List["ItemParam"] = betterproto.message_field(5)
    result_item_list: List["ItemParam"] = betterproto.message_field(6)
    total_random_item_list: List["ItemParam"] = betterproto.message_field(7)
    total_return_item_list: List["ItemParam"] = betterproto.message_field(8)
    total_extra_item_list: List["ItemParam"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class CommonPlayerTipsNotify(betterproto.Message):
    text_map_id_list: List[str] = betterproto.string_field(1)
    notify_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CompoundDataNotify(betterproto.Message):
    unlock_compound_list: List[int] = betterproto.uint32_field(1)
    compound_que_data_list: List["CompoundQueueData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CompoundQueueData(betterproto.Message):
    compound_id: int = betterproto.uint32_field(1)
    output_count: int = betterproto.uint32_field(2)
    wait_count: int = betterproto.uint32_field(3)
    output_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CompoundUnlockNotify(betterproto.Message):
    compound_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CookDataNotify(betterproto.Message):
    grade: int = betterproto.uint32_field(1)
    recipe_data_list: List["CookRecipeData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CookGradeDataNotify(betterproto.Message):
    grade: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CookRecipeDataNotify(betterproto.Message):
    recipe_data: "CookRecipeData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CookRecipeData(betterproto.Message):
    recipe_id: int = betterproto.uint32_field(1)
    proficiency: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CoopCg(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    is_unlock: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CoopCgShowNotify(betterproto.Message):
    cg_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CoopCgUpdateNotify(betterproto.Message):
    cg_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CoopChapter(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    state: "CoopChapterState" = betterproto.enum_field(2)
    lock_reason_list: List[int] = betterproto.uint32_field(3)
    coop_point_list: List["CoopPoint"] = betterproto.message_field(4)
    coop_reward_list: List["CoopReward"] = betterproto.message_field(5)
    coop_cg_list: List["CoopCg"] = betterproto.message_field(6)
    total_end_count: int = betterproto.uint32_field(7)
    finished_end_count: int = betterproto.uint32_field(8)
    seen_ending_map: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    finish_dialog_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class CoopChapterUpdateNotify(betterproto.Message):
    chapter_list: List["CoopChapter"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CoopDataNotify(betterproto.Message):
    chapter_list: List["CoopChapter"] = betterproto.message_field(1)
    is_have_progress: bool = betterproto.bool_field(2)
    cur_coop_point: int = betterproto.uint32_field(3)
    viewed_chapter_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CoopPoint(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    state: "CoopPointState" = betterproto.enum_field(2)
    self_confidence: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CoopPointUpdateNotify(betterproto.Message):
    coop_point: "CoopPoint" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CoopProgressUpdateNotify(betterproto.Message):
    is_have_progress: bool = betterproto.bool_field(1)
    cur_coop_point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CoopReward(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    state: "CoopRewardState" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CoopRewardUpdateNotify(betterproto.Message):
    reward_list: List["CoopReward"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateEntityInfo(betterproto.Message):
    monster_id: int = betterproto.uint32_field(1, group="Entity")
    npc_id: int = betterproto.uint32_field(2, group="Entity")
    gadget_id: int = betterproto.uint32_field(3, group="Entity")
    item_id: int = betterproto.uint32_field(4, group="Entity")
    gadget: "CreateGadgetInfo" = betterproto.message_field(13, group="EntityCreateInfo")
    level: int = betterproto.uint32_field(5)
    pos: "Vector" = betterproto.message_field(6)
    rot: "Vector" = betterproto.message_field(7)
    scene_id: int = betterproto.uint32_field(10)
    room_id: int = betterproto.uint32_field(11)
    client_unique_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class CreateGadgetInfo(betterproto.Message):
    born_type: "GadgetBornType" = betterproto.enum_field(1)
    chest: "CreateGadgetInfoChest" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CreateGadgetInfoChest(betterproto.Message):
    chest_drop_id: int = betterproto.uint32_field(1)
    is_show_cutscene: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CreateMassiveEntityNotify(betterproto.Message):
    massive_entity_list: List["ServerMassiveEntity"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateMassiveEntityReq(betterproto.Message):
    massive_entity_list: List["ClientMassiveEntity"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateMassiveEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CreateVehicleReq(betterproto.Message):
    vehicle_id: int = betterproto.uint32_field(1)
    scene_point_id: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(3)
    rot: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CreateVehicleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    vehicle_id: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class CrucibleActivityDetailInfo(betterproto.Message):
    cost_time: int = betterproto.uint32_field(1)
    uid_info_list: List["CrucibleBattleUidInfo"] = betterproto.message_field(2)
    pos: "Vector" = betterproto.message_field(3)
    battle_world_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class CrucibleBattleUidInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    icon: int = betterproto.uint32_field(3)
    online_id: str = betterproto.string_field(4)
    profile_picture: "ProfilePicture" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CurVehicleInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    pos: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CustomCommonNodeInfo(betterproto.Message):
    parent_index: int = betterproto.int32_field(1)
    config_id: int = betterproto.uint32_field(2)
    slot_identifier: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CustomGadgetTreeInfo(betterproto.Message):
    node_list: List["CustomCommonNodeInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CutSceneBeginNotify(betterproto.Message):
    cutscene_id: int = betterproto.uint32_field(1)
    is_wait_others: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CutSceneEndNotify(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cutscene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CutSceneFinishNotify(betterproto.Message):
    cutscene_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CylinderRegionSize(betterproto.Message):
    radius: float = betterproto.float_field(1)
    height: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class DailyDungeonEntryInfo(betterproto.Message):
    dungeon_entry_id: int = betterproto.uint32_field(1)
    dungeon_entry_config_id: int = betterproto.uint32_field(2)
    recommend_dungeon_id: int = betterproto.uint32_field(3)
    recommend_dungeon_entry_info: "DungeonEntryInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DailyTaskDataNotify(betterproto.Message):
    score_reward_id: int = betterproto.uint32_field(3)
    is_taken_score_reward: bool = betterproto.bool_field(4)
    finished_num: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DailyTaskFilterCityReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DailyTaskFilterCityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DailyTaskInfo(betterproto.Message):
    daily_task_id: int = betterproto.uint32_field(1)
    reward_id: int = betterproto.uint32_field(2)
    progress: int = betterproto.uint32_field(3)
    finish_progress: int = betterproto.uint32_field(4)
    is_finished: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class DailyTaskProgressNotify(betterproto.Message):
    info: "DailyTaskInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DailyTaskScoreRewardNotify(betterproto.Message):
    reward_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DailyTaskUnlockedCitiesNotify(betterproto.Message):
    unlocked_city_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DataResVersionNotify(betterproto.Message):
    client_data_version: int = betterproto.uint32_field(1)
    client_silence_data_version: int = betterproto.uint32_field(2)
    client_md5: str = betterproto.string_field(5)
    client_silence_md5: str = betterproto.string_field(6)
    res_version_config: "ResVersionConfig" = betterproto.message_field(10)
    client_version_suffix: str = betterproto.string_field(11)
    client_silence_version_suffix: str = betterproto.string_field(12)
    is_data_need_relogin: bool = betterproto.bool_field(14)
    op_type: "DataResVersionNotifyDataResVersionOpType" = betterproto.enum_field(15)


@dataclass(eq=False, repr=False)
class DealAddFriendReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    deal_add_friend_result: "DealAddFriendResultType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class DealAddFriendRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)
    deal_add_friend_result: "DealAddFriendResultType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class DebugNotify(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    retcode: "DebugNotifyRetcode" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class DeleteFriendNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DeleteFriendReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DeleteFriendRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DeliveryActivityDetailInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)
    finished_delivery_quest_index: List[int] = betterproto.uint32_field(2)
    is_taken_reward: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DelMailReq(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DelMailRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mail_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DelScenePlayTeamEntityNotify(betterproto.Message):
    del_entity_id_list: List[int] = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DelTeamEntityNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    del_entity_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DestroyMassiveEntityNotify(betterproto.Message):
    massive_entity_list: List["ClientMassiveEntity"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DestroyMaterialReq(betterproto.Message):
    material_list: List["MaterilaInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DestroyMaterialRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    item_id_list: List[int] = betterproto.uint32_field(2)
    item_count_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DigActivityChangeGadgetStateReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DigActivityChangeGadgetStateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DigActivityDetailInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    dig_mark_point_list: List["DigMarkPoint"] = betterproto.message_field(2)
    stage_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DigActivityMarkPointChangeNotify(betterproto.Message):
    dig_mark_point_list: List["DigMarkPoint"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DigMarkPoint(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)
    bundle_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DisableRoguelikeTrapNotify(betterproto.Message):
    card_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DoGachaReq(betterproto.Message):
    gacha_type: int = betterproto.uint32_field(1)
    gacha_times: int = betterproto.uint32_field(2)
    gacha_random: int = betterproto.uint32_field(3)
    gacha_schedule_id: int = betterproto.uint32_field(4)
    gacha_tag: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class DoGachaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gacha_type: int = betterproto.uint32_field(2)
    gacha_times: int = betterproto.uint32_field(3)
    gacha_schedule_id: int = betterproto.uint32_field(4)
    gacha_item_list: List["GachaItem"] = betterproto.message_field(5)
    new_gacha_random: int = betterproto.uint32_field(6)
    cost_item_id: int = betterproto.uint32_field(7)
    cost_item_num: int = betterproto.uint32_field(8)
    ten_cost_item_id: int = betterproto.uint32_field(9)
    ten_cost_item_num: int = betterproto.uint32_field(10)
    left_gacha_times: int = betterproto.uint32_field(11)
    gacha_times_limit: int = betterproto.uint32_field(12)
    wish_item_id: int = betterproto.uint32_field(13)
    wish_progress: int = betterproto.uint32_field(14)
    wish_max_progress: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class DoRoguelikeDungeonCardGachaReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    cell_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DoRoguelikeDungeonCardGachaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    card_list: List[int] = betterproto.uint32_field(2)
    is_can_refresh: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DoSetPlayerBornDataNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DraftGuestReplyInviteNotify(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    guest_uid: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DraftGuestReplyInviteReq(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    is_agree: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DraftGuestReplyInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    draft_id: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DraftGuestReplyTwiceConfirmNotify(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    guest_uid: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DraftGuestReplyTwiceConfirmReq(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    is_agree: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DraftGuestReplyTwiceConfirmRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    draft_id: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DraftInviteFailInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    reason: "DraftInviteFailReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class DraftInviteResultNotify(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    is_all_argee: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DraftOwnerInviteNotify(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    invite_deadline_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DraftOwnerStartInviteReq(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DraftOwnerStartInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    draft_id: int = betterproto.uint32_field(2)
    wrong_uid: int = betterproto.uint32_field(3)
    invite_fail_info_list: List["DraftInviteFailInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DraftOwnerTwiceConfirmNotify(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    twice_confirm_deadline_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DraftTwiceConfirmResultNotify(betterproto.Message):
    draft_id: int = betterproto.uint32_field(1)
    is_all_argee: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DragonSpineActivityDetailInfo(betterproto.Message):
    chapter_info_list: List["DragonSpineChapterInfo"] = betterproto.message_field(1)
    weapon_enhance_level: int = betterproto.uint32_field(2)
    shimmering_essence: int = betterproto.uint32_field(3)
    warm_essence: int = betterproto.uint32_field(4)
    wondrous_essence: int = betterproto.uint32_field(5)
    is_content_closed: bool = betterproto.bool_field(6)
    content_finish_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class DragonSpineChapterFinishNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    chapter_id: int = betterproto.uint32_field(2)
    weapon_enhance_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DragonSpineChapterInfo(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)
    progress: int = betterproto.uint32_field(3)
    finished_mission_num: int = betterproto.uint32_field(4)
    open_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class DragonSpineChapterOpenNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    chapter_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DragonSpineChapterProgressChangeNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    chapter_id: int = betterproto.uint32_field(2)
    cur_progress: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DragonSpineCoinChangeNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    shimmering_essence: int = betterproto.uint32_field(2)
    warm_essence: int = betterproto.uint32_field(3)
    wondrous_essence: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class DropHintNotify(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(1)
    position: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DropItemReq(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(1)
    guid: int = betterproto.uint64_field(2)
    count: int = betterproto.uint32_field(3)
    pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DropItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    store_type: "StoreType" = betterproto.enum_field(2)
    guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class DropSubfieldReq(betterproto.Message):
    drop_type: "DropSubfieldType" = betterproto.enum_field(1)
    drop_param: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(3)
    subfield_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class DropSubfieldRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamAvatar(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    avatar_info: "AvatarInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamChangeAvatarReq(betterproto.Message):
    avatar_guid_list: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamChangeAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamCreateReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamCreateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamDismissNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    reason: "DungeonCandidateTeamDismissReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInfoNotify(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    avatar_list: List["DungeonCandidateTeamAvatar"] = betterproto.message_field(2)
    ready_player_uid: List[int] = betterproto.uint32_field(3)
    match_type: int = betterproto.uint32_field(4)
    player_state_map: Dict[
        int, "DungeonCandidateTeamPlayerState"
    ] = betterproto.map_field(5, betterproto.TYPE_UINT32, betterproto.TYPE_ENUM)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInviteNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)
    vaild_deadline_time_sec: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInviteReq(betterproto.Message):
    player_uids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamKickReq(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamKickRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamLeaveReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamLeaveRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamPlayerLeaveNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    reason: "DungeonCandidateTeamPlayerLeaveReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamRefuseNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamReplyInviteReq(betterproto.Message):
    is_accept: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamReplyInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_trans_point: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetChangingAvatarReq(betterproto.Message):
    is_changing_avatar: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetChangingAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetReadyReq(betterproto.Message):
    is_ready: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DungeonCandidateTeamSetReadyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonChallengeBeginNotify(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    challenge_index: int = betterproto.uint32_field(2)
    param_list: List[int] = betterproto.uint32_field(3)
    group_id: int = betterproto.uint32_field(4)
    father_index: int = betterproto.uint32_field(5)
    uid_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class DungeonChallengeFinishNotify(betterproto.Message):
    channeller_slab_loop_dungeon_result_info: "ChannellerSlabLoopDungeonResultInfo" = (
        betterproto.message_field(101, group="Detail")
    )
    effigy_challenge_dungeon_result_info: "EffigyChallengeDungeonResultInfo" = (
        betterproto.message_field(102, group="Detail")
    )
    challenge_index: int = betterproto.uint32_field(1)
    is_success: bool = betterproto.bool_field(2)
    is_new_record: bool = betterproto.bool_field(3)
    challenge_record_type: int = betterproto.uint32_field(4)
    current_value: int = betterproto.uint32_field(5)
    strengthen_point_data_map: Dict[int, "StrengthenPointData"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class DungeonDataNotify(betterproto.Message):
    dungeon_data_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class DungeonDieOptionReq(betterproto.Message):
    die_option: "PlayerDieOption" = betterproto.enum_field(1)
    is_quit_immediately: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DungeonDieOptionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    die_option: "PlayerDieOption" = betterproto.enum_field(2)
    revive_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DungeonEntryCond(betterproto.Message):
    cond_reason: "DungeonEntryBlockReason" = betterproto.enum_field(1)
    param1: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DungeonEntryInfo(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    is_passed: bool = betterproto.bool_field(2)
    left_times: int = betterproto.uint32_field(3)
    start_time: int = betterproto.uint32_field(4)
    end_time: int = betterproto.uint32_field(5)
    max_boss_chest_num: int = betterproto.uint32_field(6)
    boss_chest_num: int = betterproto.uint32_field(7)
    next_refresh_time: int = betterproto.uint32_field(8)
    weekly_boss_resin_discount_info: "WeeklyBossResinDiscountInfo" = (
        betterproto.message_field(9)
    )


@dataclass(eq=False, repr=False)
class DungeonEntryInfoReq(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonEntryInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    point_id: int = betterproto.uint32_field(2)
    dungeon_entry_list: List["DungeonEntryInfo"] = betterproto.message_field(3)
    recommend_dungeon_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class DungeonEntryToBeExploreNotify(betterproto.Message):
    dungeon_entry_scene_point_id: int = betterproto.uint32_field(1)
    dungeon_entry_config_id: int = betterproto.uint32_field(2)
    scene_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DungeonFollowNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonGetStatueDropReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DungeonGetStatueDropRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonInterruptChallengeReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    challenge_index: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DungeonInterruptChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    challenge_id: int = betterproto.uint32_field(2)
    challenge_index: int = betterproto.uint32_field(3)
    group_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class DungeonPlayerDieNotify(betterproto.Message):
    monster_id: int = betterproto.uint32_field(6, group="Entity")
    gadget_id: int = betterproto.uint32_field(7, group="Entity")
    dungeon_id: int = betterproto.uint32_field(1)
    die_type: "PlayerDieType" = betterproto.enum_field(2)
    revive_count: int = betterproto.uint32_field(3)
    wait_time: int = betterproto.uint32_field(4)
    murderer_entity_id: int = betterproto.uint32_field(5)
    strengthen_point_data_map: Dict[int, "StrengthenPointData"] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class DungeonPlayerDieReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    die_type: "PlayerDieType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class DungeonPlayerDieRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)
    cd: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteReplyNotify(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    is_accept: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteReplyReq(betterproto.Message):
    is_accept: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DungeonRestartInviteReplyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_trans_point: bool = betterproto.bool_field(2)
    is_accept: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class DungeonRestartReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DungeonRestartResultNotify(betterproto.Message):
    is_add_accpet: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DungeonRestartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    point_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DungeonReviseLevelNotify(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    revise_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DungeonSettleExhibitionInfo(betterproto.Message):
    player_info: "OnlinePlayerInfo" = betterproto.message_field(1)
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DungeonSettleNotify(betterproto.Message):
    tower_level_end_notify: "TowerLevelEndNotify" = betterproto.message_field(
        101, group="Detail"
    )
    trial_avatar_first_pass_dungeon_notify: "TrialAvatarFirstPassDungeonNotify" = (
        betterproto.message_field(102, group="Detail")
    )
    channeller_slab_loop_dungeon_result_info: "ChannellerSlabLoopDungeonResultInfo" = (
        betterproto.message_field(103, group="Detail")
    )
    effigy_challenge_dungeon_result_info: "EffigyChallengeDungeonResultInfo" = (
        betterproto.message_field(104, group="Detail")
    )
    roguelike_dungeon_settle_info: "RoguelikeDungeonSettleInfo" = (
        betterproto.message_field(105, group="Detail")
    )
    dungeon_id: int = betterproto.uint32_field(1)
    is_success: bool = betterproto.bool_field(2)
    fail_cond_list: List[int] = betterproto.uint32_field(3)
    settle_show: Dict[int, "ParamList"] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    close_time: int = betterproto.uint32_field(5)
    strengthen_point_data_map: Dict[int, "StrengthenPointData"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    result: int = betterproto.uint32_field(7)
    exhibition_info_list: List[
        "DungeonSettleExhibitionInfo"
    ] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class DungeonShowReminderNotify(betterproto.Message):
    reminder_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonSlipRevivePointActivateReq(betterproto.Message):
    slip_revive_point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonSlipRevivePointActivateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    slip_revive_point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DungeonWayPointActivateReq(betterproto.Message):
    way_point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DungeonWayPointActivateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    way_point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DungeonWayPointNotify(betterproto.Message):
    active_way_point_list: List[int] = betterproto.uint32_field(1)
    is_add: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class EchoNotify(betterproto.Message):
    seq_id: int = betterproto.uint32_field(1)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EchoShellDetailInfo(betterproto.Message):
    taken_reward_list: List[int] = betterproto.uint32_field(1)
    shell_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EchoShellInfo(betterproto.Message):
    shell_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EchoShellTakeRewardReq(betterproto.Message):
    reward_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EchoShellTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reward_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EchoShellUpdateNotify(betterproto.Message):
    shell_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EffigyActivityDetailInfo(betterproto.Message):
    daily_info_list: List["EffigyDailyInfo"] = betterproto.message_field(1)
    last_difficulty_id: int = betterproto.uint32_field(2)
    cur_score: int = betterproto.uint32_field(3)
    taken_reward_index_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EffigyChallengeDungeonResultInfo(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    is_success: bool = betterproto.bool_field(2)
    challenge_score: int = betterproto.uint32_field(3)
    challenge_max_score: int = betterproto.uint32_field(4)
    is_in_time_limit: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class EffigyChallengeInfoNotify(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(2)
    condition_id_list: List[int] = betterproto.uint32_field(3)
    challenge_score: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EffigyChallengeResultNotify(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    is_success: bool = betterproto.bool_field(2)
    challenge_score: int = betterproto.uint32_field(3)
    challenge_max_score: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EffigyDailyInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    challenge_id: int = betterproto.uint32_field(3)
    challenge_count: int = betterproto.uint32_field(4)
    challenge_max_score: int = betterproto.uint32_field(5)
    is_first_pass_reward_taken: bool = betterproto.bool_field(6)
    challenge_total_score: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class EndCameraSceneLookNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ENetReasonComparer(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EnterChessDungeonReq(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterChessDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    map_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterFishingReq(betterproto.Message):
    fish_pool_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterFishingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    fish_pool_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterMechanicusDungeonReq(betterproto.Message):
    difficult_level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterMechanicusDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    difficult_level: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)
    wrong_uid: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EnterRoguelikeDungeonNotify(betterproto.Message):
    dungeon_weight_config_id: int = betterproto.uint32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(3)
    backstage_avatar_guid_list: List[int] = betterproto.uint64_field(4)
    cur_cell_id: int = betterproto.uint32_field(5)
    cell_info_map: Dict[int, "RogueCellInfo"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    cur_level: int = betterproto.uint32_field(7)
    stage_id: int = betterproto.uint32_field(8)
    rune_record_list: List["RoguelikeRuneRecord"] = betterproto.message_field(11)
    is_mist_clear: bool = betterproto.bool_field(12)
    explored_cell_list: List[int] = betterproto.uint32_field(13)
    bonus_resource_prop: float = betterproto.float_field(14)
    refresh_cost_item_id: int = betterproto.uint32_field(15)
    refresh_cost_item_count: int = betterproto.uint32_field(16)
    is_first_enter: bool = betterproto.bool_field(17)
    revise_monster_level: int = betterproto.uint32_field(18)


@dataclass(eq=False, repr=False)
class EnterSceneDoneReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterSceneDoneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    enter_scene_token: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterScenePeerNotify(betterproto.Message):
    dest_scene_id: int = betterproto.uint32_field(1)
    peer_id: int = betterproto.uint32_field(2)
    host_peer_id: int = betterproto.uint32_field(3)
    enter_scene_token: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EnterSceneReadyReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterSceneReadyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    enter_scene_token: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterSceneWeatherAreaNotify(betterproto.Message):
    weather_gadget_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterTransPointRegionNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterTrialAvatarActivityDungeonReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    trial_avatar_index_id: int = betterproto.uint32_field(2)
    enter_point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EnterTrialAvatarActivityDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    trial_avatar_index_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EnterWorldAreaReq(betterproto.Message):
    area_type: int = betterproto.uint32_field(1)
    area_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterWorldAreaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    area_type: int = betterproto.uint32_field(2)
    area_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EntityAbilityInvokeEntry(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    invokes: List["AbilityInvokeEntry"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EntityAiKillSelfNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EntityAiSyncNotify(betterproto.Message):
    info_list: List["AiSyncInfo"] = betterproto.message_field(1)
    local_avatar_alerted_monster_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EntityAuthorityChangeNotify(betterproto.Message):
    authority_change_list: List["AuthorityChange"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EntityAuthorityInfo(betterproto.Message):
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(1)
    renderer_changed_info: "EntityRendererChangedInfo" = betterproto.message_field(2)
    ai_info: "SceneEntityAiInfo" = betterproto.message_field(3)
    born_pos: "Vector" = betterproto.message_field(4)
    pose_para_list: List["AnimatorParameterValueInfoPair"] = betterproto.message_field(
        5
    )


@dataclass(eq=False, repr=False)
class EntityClientData(betterproto.Message):
    wind_change_scene_time: int = betterproto.uint32_field(1)
    windmill_sync_angle: float = betterproto.float_field(2)
    wind_change_target_level: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class EntityConfigHashEntry(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    hash_value: int = betterproto.int32_field(2)
    job_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EntityConfigHashNotify(betterproto.Message):
    ability_entry_list: List["EntityConfigHashEntry"] = betterproto.message_field(1)
    combat_entry_list: List["EntityConfigHashEntry"] = betterproto.message_field(2)
    avatar_entry_list: List["EntityConfigHashEntry"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EntityEnvironmentInfo(betterproto.Message):
    json_climate_type: int = betterproto.uint32_field(1)
    climate_area_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EntityFightPropChangeReasonNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    prop_type: int = betterproto.uint32_field(2)
    prop_delta: float = betterproto.float_field(3)
    reason: "PropChangeReason" = betterproto.enum_field(4)
    param_list: List[int] = betterproto.uint32_field(5)
    change_hp_reason: "ChangHpReason" = betterproto.enum_field(6)
    change_energy_reson: "ChangeEnergyReason" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class EntityFightPropNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class EntityFightPropUpdateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class EntityForceSyncReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion_info: "MotionInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)
    room_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EntityForceSyncRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    fail_motion: "MotionInfo" = betterproto.message_field(3)
    scene_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EntityJumpNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    jump_type: "EntityJumpNotifyType" = betterproto.enum_field(2)
    pos: "Vector" = betterproto.message_field(3)
    rot: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EntityMoveFailInfo(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    fail_motion: "MotionInfo" = betterproto.message_field(3)
    scene_time: int = betterproto.uint32_field(4)
    reliable_seq: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EntityMoveInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion_info: "MotionInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)
    reliable_seq: int = betterproto.uint32_field(4)
    is_reliable: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class EntityMoveRoomNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    dest_room_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EntityPropNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class EntityRendererChangedInfo(betterproto.Message):
    changed_renderers: Dict[str, int] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_UINT32
    )
    visibility_count: int = betterproto.uint32_field(2)
    is_cached: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class EntityTagChangeNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    is_add: bool = betterproto.bool_field(2)
    tag: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class EquipParamList(betterproto.Message):
    item_list: List["EquipParam"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EquipParam(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    item_num: int = betterproto.uint32_field(2)
    item_level: int = betterproto.uint32_field(3)
    promote_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class Equip(betterproto.Message):
    reliquary: "Reliquary" = betterproto.message_field(1, group="Detail")
    weapon: "Weapon" = betterproto.message_field(2, group="Detail")
    is_locked: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class EquipRoguelikeRuneReq(betterproto.Message):
    rune_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EquipRoguelikeRuneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    rune_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EvtAiSyncCombatThreatInfoNotify(betterproto.Message):
    combat_threat_info_map: Dict[int, "AiThreatInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class EvtAiSyncSkillCdNotify(betterproto.Message):
    ai_cd_map: Dict[int, "AiSkillCdInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class EvtAnimatorParameterInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    name_id: int = betterproto.int32_field(2)
    is_server_cache: bool = betterproto.bool_field(3)
    value: "AnimatorParameterValueInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EvtAnimatorParameterNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    animator_param_info: "EvtAnimatorParameterInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtAnimatorStateChangedInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    to_state_hash: int = betterproto.uint32_field(2)
    normalized_time_compact: int = betterproto.uint32_field(3)
    face_angle_compact: int = betterproto.int32_field(4)
    pos: "Vector" = betterproto.message_field(5)
    fade_duration: float = betterproto.float_field(6)


@dataclass(eq=False, repr=False)
class EvtAnimatorStateChangedNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    evt_animator_state_changed_info: "EvtAnimatorStateChangedInfo" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class EvtAvatarEnterFocusNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    fast_focus: bool = betterproto.bool_field(3)
    use_focus_sticky: bool = betterproto.bool_field(4)
    use_auto_focus: bool = betterproto.bool_field(5)
    use_gyro: bool = betterproto.bool_field(6)
    can_move: bool = betterproto.bool_field(7)
    show_cross_hair: bool = betterproto.bool_field(8)
    focus_forward: "Vector" = betterproto.message_field(9)
    enter_normal_focus_shoot: bool = betterproto.bool_field(10)
    enter_holding_focus_shoot: bool = betterproto.bool_field(11)
    disable_anim: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class EvtAvatarExitFocusNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    finish_forward: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EvtAvatarLockChairReq(betterproto.Message):
    chair_id: int = betterproto.uint64_field(1)
    position: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtAvatarLockChairRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    position: "Vector" = betterproto.message_field(3)
    chair_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class EvtAvatarSitDownNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    position: "Vector" = betterproto.message_field(2)
    chair_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class EvtAvatarStandUpNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    direction: int = betterproto.int32_field(2)
    perform_i_d: int = betterproto.int32_field(3)
    chair_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class EvtAvatarUpdateFocusNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    focus_forward: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EvtBeingHitInfo(betterproto.Message):
    peer_id: int = betterproto.uint32_field(1)
    attack_result: "AttackResult" = betterproto.message_field(2)
    frame_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EvtBeingHitNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    being_hit_info: "EvtBeingHitInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtBeingHitsCombineNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    evt_being_hit_info_list: List["EvtBeingHitInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtBulletDeactiveNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    disappear_pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EvtBulletHitNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    forward_peer: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(3)
    hit_entity_id: int = betterproto.uint32_field(4)
    hit_collider_type: "HitColliderType" = betterproto.enum_field(5)
    hit_box_index: int = betterproto.int32_field(6)
    hit_point: "Vector" = betterproto.message_field(7)
    hit_normal: "Vector" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class EvtBulletMoveNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    cur_pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EvtCombatForceSetPosInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    collider_entity_id: int = betterproto.uint32_field(2)
    ice_id: int = betterproto.uint32_field(3)
    target_pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EvtCombatSteerMotionInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    velocity: "Vector" = betterproto.message_field(2)
    face_dir: "Vector" = betterproto.message_field(3)
    pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EvtCompensatePosDiffInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    cur_hash: int = betterproto.uint32_field(2)
    face_angle_compact: int = betterproto.int32_field(3)
    cur_pos: "Vector" = betterproto.message_field(4)
    normalized_time_compact: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EvtCostStaminaNotify(betterproto.Message):
    cost_stamina: float = betterproto.float_field(1)
    skill_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EvtCreateGadgetNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    config_id: int = betterproto.uint32_field(3)
    camp_id: int = betterproto.uint32_field(4)
    camp_type: int = betterproto.uint32_field(5)
    init_pos: "Vector" = betterproto.message_field(6)
    init_euler_angles: "Vector" = betterproto.message_field(7)
    guid: int = betterproto.uint64_field(8)
    owner_entity_id: int = betterproto.uint32_field(9)
    target_entity_id: int = betterproto.uint32_field(10)
    is_async_load: bool = betterproto.bool_field(11)
    target_lock_point_index: int = betterproto.uint32_field(12)
    room_id: int = betterproto.uint32_field(13)
    prop_owner_entity_id: int = betterproto.uint32_field(14)
    sight_group_with_owner: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class EvtDestroyGadgetNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EvtDestroyServerGadgetNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EvtDoSkillSuccNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    caster_id: int = betterproto.uint32_field(2)
    skill_id: int = betterproto.uint32_field(3)
    forward: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EvtEntityRenderersChangedNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    is_server_cache: bool = betterproto.bool_field(3)
    renderer_changed_info: "EntityRendererChangedInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EvtEntityStartDieEndNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    immediately: bool = betterproto.bool_field(3)
    die_state_flag: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class EvtFaceToDirInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    face_dir: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtFaceToDirNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    evt_face_to_dir_info: "EvtFaceToDirInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtFaceToEntityNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    face_entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EvtFixedRushMove(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    speed: float = betterproto.float_field(2)
    target_pos: "Vector" = betterproto.message_field(3)
    override_collider: str = betterproto.string_field(4)
    animator_state_id_list: List[int] = betterproto.uint32_field(5)
    need_set_is_in_air: bool = betterproto.bool_field(6)
    check_animator_state_on_exit_only: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class EvtHittingOtherInfo(betterproto.Message):
    peer_id: int = betterproto.uint32_field(1)
    attack_result: "AttackResult" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtLightCoreMove(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    speed: float = betterproto.float_field(2)
    target_pos: "Vector" = betterproto.message_field(3)
    acelerate: float = betterproto.float_field(4)
    max_absorb_time: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class EvtMonsterDoBlink(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    target_pos: "Vector" = betterproto.message_field(2)
    target_rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EvtMotionInfoDuringSteerAttack(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    velocity: "Vector" = betterproto.message_field(2)
    face_dir: "Vector" = betterproto.message_field(3)
    pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EvtRushMoveInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    velocity: "Vector" = betterproto.message_field(2)
    time_range: float = betterproto.float_field(3)
    state_name_hash: int = betterproto.int32_field(4)
    face_angle_compact: int = betterproto.int32_field(5)
    pos: "Vector" = betterproto.message_field(6)
    rush_attack_target_pos: "Vector" = betterproto.message_field(7)
    rush_to_pos: "Vector" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class EvtRushMoveNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    evt_rush_move_info: "EvtRushMoveInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtSetAttackTargetInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    attack_target_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EvtSetAttackTargetNotify(betterproto.Message):
    forward_type: "ForwardType" = betterproto.enum_field(1)
    evt_set_attack_target_info: "EvtSetAttackTargetInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EvtSyncEntityPositionInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    state_hash: int = betterproto.uint32_field(2)
    normalized_time_compact: int = betterproto.uint32_field(3)
    face_angle_compact: int = betterproto.int32_field(4)
    pos: "Vector" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class EvtSyncTransform(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    entity_pos: "Vector" = betterproto.message_field(2)
    entity_rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ExclusiveRuleInfo(betterproto.Message):
    rule_type: int = betterproto.uint32_field(1)
    object_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ExclusiveRuleNotify(betterproto.Message):
    rule_info_list: List["ExclusiveRuleInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ExecuteGadgetLuaReq(betterproto.Message):
    source_entity_id: int = betterproto.uint32_field(1)
    param1: int = betterproto.int32_field(2)
    param2: int = betterproto.int32_field(3)
    param3: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ExecuteGadgetLuaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ExecuteGroupTriggerReq(betterproto.Message):
    source_entity_id: int = betterproto.uint32_field(1)
    source_name: str = betterproto.string_field(2)
    target_entity_id: int = betterproto.uint32_field(3)
    param1: int = betterproto.int32_field(4)
    param2: int = betterproto.int32_field(5)
    param3: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class ExecuteGroupTriggerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ExhibitionDisplayInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    param: int = betterproto.uint32_field(2)
    detail_param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ExitFishingReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ExitFishingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ExitSceneWeatherAreaNotify(betterproto.Message):
    weather_gadget_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ExitTransPointRegionNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ExpeditionActivityDetailInfo(betterproto.Message):
    path_info_list: List["ExpeditionPathInfo"] = betterproto.message_field(1)
    expedition_count: int = betterproto.uint32_field(2)
    challenge_info_list: List["ExpeditionChallengeInfo"] = betterproto.message_field(3)
    is_content_closed: bool = betterproto.bool_field(4)
    content_close_time: int = betterproto.uint32_field(5)
    cur_challenge_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ExpeditionAssistInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    assist_time: int = betterproto.uint32_field(2)
    target_nick_name: str = betterproto.string_field(3)
    online_id: str = betterproto.string_field(4)
    costume_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ExpeditionChallengeEnterRegionNotify(betterproto.Message):
    is_puzzle_finished: bool = betterproto.bool_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ExpeditionChallengeFinishedNotify(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ExpeditionChallengeInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    open_time: int = betterproto.uint32_field(2)
    is_finished: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ExpeditionPathInfo(betterproto.Message):
    path_id: int = betterproto.uint32_field(1)
    state: "ExpeditionState" = betterproto.enum_field(2)
    start_time: int = betterproto.uint32_field(3)
    avatar_id_list: List[int] = betterproto.uint32_field(4)
    assist_uid: int = betterproto.uint32_field(5)
    assist_avatar_id: int = betterproto.uint32_field(6)
    mark_id: int = betterproto.uint32_field(7)
    bonus_probability: float = betterproto.float_field(8)
    challenge_id: int = betterproto.uint32_field(9)
    assist_costume_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ExpeditionRecallReq(betterproto.Message):
    path_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ExpeditionRecallRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    path_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ExpeditionStartReq(betterproto.Message):
    path_id: int = betterproto.uint32_field(1)
    avatar_id_list: List[int] = betterproto.uint32_field(2)
    assist_uid: int = betterproto.uint32_field(3)
    assist_avatar_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ExpeditionStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    path_id: int = betterproto.uint32_field(2)
    avatar_id_list: List[int] = betterproto.uint32_field(3)
    assist_uid: int = betterproto.uint32_field(4)
    assist_avatar_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ExpeditionTakeRewardReq(betterproto.Message):
    path_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ExpeditionTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    path_id: int = betterproto.uint32_field(2)
    is_bonus: bool = betterproto.bool_field(3)
    reward_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FallPlayerBrief(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)
    is_ground: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class FallPlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    cur_score: int = betterproto.uint32_field(2)
    ball_catch_count_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_ground: bool = betterproto.bool_field(4)
    time_cost: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class FallSettleInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    catch_count: int = betterproto.uint32_field(2)
    flower_ring_catch_count_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    final_score: int = betterproto.uint32_field(4)
    player_info: "OnlinePlayerInfo" = betterproto.message_field(5)
    remain_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class FeatureBlockInfo(betterproto.Message):
    feature_type: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FetterData(betterproto.Message):
    fetter_id: int = betterproto.uint32_field(1)
    fetter_state: int = betterproto.uint32_field(2)
    cond_index_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FightPropPair(betterproto.Message):
    prop_type: int = betterproto.uint32_field(1)
    prop_value: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class FindHilichurlAcceptQuestNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FindHilichurlDayContentInfo(betterproto.Message):
    start_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FindHilichurlDetailInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)
    player_day_index: int = betterproto.uint32_field(2)
    day_content_info_list: List[
        "FindHilichurlDayContentInfo"
    ] = betterproto.message_field(3)
    is_content_closed: bool = betterproto.bool_field(4)
    content_close_time: int = betterproto.uint32_field(5)
    min_open_player_level: int = betterproto.uint32_field(6)
    is_end_quest_accept: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class FindHilichurlFinishSecondQuestNotify(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishDeliveryNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    day_index: int = betterproto.uint32_field(2)
    finished_quest_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FinishedParentQuestNotify(betterproto.Message):
    parent_quest_list: List["ParentQuest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FinishedParentQuestUpdateNotify(betterproto.Message):
    parent_quest_list: List["ParentQuest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FinishMainCoopReq(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    ending_save_point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FinishMainCoopRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    id: int = betterproto.uint32_field(2)
    ending_save_point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FishAttractNotify(betterproto.Message):
    fish_id_list: List[int] = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    uid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FishBaitGoneNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FishBattleBeginReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FishBattleBeginRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class FishBattleEndReq(betterproto.Message):
    battle_result: "FishBattleResult" = betterproto.enum_field(1)
    is_always_bonus: bool = betterproto.bool_field(2)
    max_bonus_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FishBattleEndRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    battle_result: "FishBattleResult" = betterproto.enum_field(2)
    is_got_reward: bool = betterproto.bool_field(3)
    no_reward_reason: "FishBattleEndRspFishNoRewardReason" = betterproto.enum_field(4)
    reward_item_list: List["ItemParam"] = betterproto.message_field(5)
    drop_item_list: List["ItemParam"] = betterproto.message_field(6)
    talent_item_list: List["ItemParam"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class FishBiteReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FishBiteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class FishCastRodReq(betterproto.Message):
    bait_id: int = betterproto.uint32_field(1)
    rod_id: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(3)
    rod_entity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FishCastRodRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class FishChosenNotify(betterproto.Message):
    fish_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FishEscapeNotify(betterproto.Message):
    fish_id_list: List[int] = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    uid: int = betterproto.uint32_field(3)
    reason: "FishEscapeReason" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class FishInfo(betterproto.Message):
    into_bag_count: int = betterproto.uint32_field(1)
    free_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FishingGallerySettleInfo(betterproto.Message):
    fish_map: Dict[int, "FishInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    fishing_score_list: List["FishingScore"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FishingGallerySettleNotify(betterproto.Message):
    settle_info: "FishingGallerySettleInfo" = betterproto.message_field(1)
    gallery_id: int = betterproto.uint32_field(2)
    level_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FishingScore(betterproto.Message):
    fishing_score: int = betterproto.uint32_field(1)
    is_new_record: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class FishPoolDataNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    today_fish_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FishPoolInfo(betterproto.Message):
    pool_id: int = betterproto.uint32_field(1)
    fish_area_list: List[int] = betterproto.uint32_field(2)
    today_fish_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FleurFairActivityDetailInfo(betterproto.Message):
    chapter_info_list: List["FleurFairChapterInfo"] = betterproto.message_field(1)
    is_content_closed: bool = betterproto.bool_field(2)
    content_close_time: int = betterproto.uint32_field(3)
    minigame_info_map: Dict[int, "FleurFairMinigameInfo"] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    dungeon_section_info_map: Dict[
        int, "FleurFairDungeonSectionInfo"
    ] = betterproto.map_field(5, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    is_dungeon_unlocked: bool = betterproto.bool_field(6)
    dungeon_punish_over_time: int = betterproto.uint32_field(7)
    obtained_token: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FleurFairBalloonInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FleurFairBalloonSettleInfo(betterproto.Message):
    settle_info: "BalloonSettleInfo" = betterproto.message_field(1)
    is_new_record: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class FleurFairBalloonSettleNotify(betterproto.Message):
    settle_info_map: Dict[int, "FleurFairBalloonSettleInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    minigame_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FleurFairBossSettleInfo(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    cost_time: int = betterproto.uint32_field(2)
    energy: int = betterproto.uint32_field(3)
    stat_info_list: List["FleurFairPlayerStatInfo"] = betterproto.message_field(4)
    reward_token_num: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class FleurFairBuffEnergyNotify(betterproto.Message):
    energy: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FleurFairChapterInfo(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)
    open_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FleurFairDungeonSectionInfo(betterproto.Message):
    section_id: int = betterproto.uint32_field(1)
    open_time: int = betterproto.uint32_field(2)
    is_open: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class FleurFairFallInfo(betterproto.Message):
    best_score: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FleurFairFallSettleInfo(betterproto.Message):
    settle_info: "FallSettleInfo" = betterproto.message_field(1)
    is_new_record: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class FleurFairFallSettleNotify(betterproto.Message):
    settle_info_map: Dict[int, "FleurFairFallSettleInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    minigame_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FleurFairFinishGalleryStageNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FleurFairGallerySettleInfo(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    energy: int = betterproto.uint32_field(2)
    gallery_stage_count: int = betterproto.uint32_field(3)
    gallery_stage_index: int = betterproto.uint32_field(4)
    energy_stat_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class FleurFairMinigameInfo(betterproto.Message):
    balloon_info: "FleurFairBalloonInfo" = betterproto.message_field(11, group="Detail")
    fall_info: "FleurFairFallInfo" = betterproto.message_field(12, group="Detail")
    music_info: "FleurFairMusicGameInfo" = betterproto.message_field(13, group="Detail")
    minigame_id: int = betterproto.uint32_field(1)
    open_time: int = betterproto.uint32_field(2)
    is_open: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameInfo(betterproto.Message):
    music_record_map: Dict[int, "FleurFairMusicRecord"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class FleurFairMusicGameSettleReq(betterproto.Message):
    music_basic_id: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)
    combo: int = betterproto.uint32_field(3)
    correct_hit: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameSettleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    music_basic_id: int = betterproto.uint32_field(2)
    is_unlock_next_level: bool = betterproto.bool_field(3)
    is_new_record: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameStartReq(betterproto.Message):
    music_basic_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FleurFairMusicGameStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    music_basic_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FleurFairMusicRecord(betterproto.Message):
    max_score: int = betterproto.uint32_field(1)
    max_combo: int = betterproto.uint32_field(2)
    is_unlock: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class FleurFairPlayerStatInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    stat_id: int = betterproto.uint32_field(2)
    param: int = betterproto.int32_field(3)
    head_image: int = betterproto.uint32_field(4)
    nick_name: str = betterproto.string_field(5)
    online_id: str = betterproto.string_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class FleurFairReplayMiniGameReq(betterproto.Message):
    minigame_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FleurFairReplayMiniGameRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    minigame_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FleurFairStageSettleNotify(betterproto.Message):
    gallery_settle_info: "FleurFairGallerySettleInfo" = betterproto.message_field(
        11, group="Detail"
    )
    boss_settle_info: "FleurFairBossSettleInfo" = betterproto.message_field(
        12, group="Detail"
    )
    stage_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FlightActivityDetailInfo(betterproto.Message):
    daily_record_list: List["FlightDailyRecord"] = betterproto.message_field(1)
    preview_reward_id: int = betterproto.uint32_field(2)
    min_open_player_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FlightActivityRestartReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FlightActivityRestartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FlightActivitySettleNotify(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    left_time: int = betterproto.uint32_field(2)
    collect_num: int = betterproto.uint32_field(3)
    total_num: int = betterproto.uint32_field(4)
    score: int = betterproto.uint32_field(5)
    is_new_record: bool = betterproto.bool_field(6)
    medal_level: int = betterproto.uint32_field(7)
    group_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FlightDailyRecord(betterproto.Message):
    is_touched: bool = betterproto.bool_field(1)
    best_score: int = betterproto.uint32_field(2)
    start_time: int = betterproto.uint32_field(3)
    watcher_id_list: List[int] = betterproto.uint32_field(4)
    group_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class FocusAvatarReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    is_focus: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class FocusAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_focus: bool = betterproto.bool_field(2)
    avatar_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ForceAddPlayerFriendReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ForceAddPlayerFriendRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ForceDragAvatarNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion_info: "MotionInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)
    last_move_time_ms: int = betterproto.uint64_field(4)
    delta_time_ms: int = betterproto.uint64_field(5)
    is_first_valid: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class ForceDragBackTransferNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ForceUpdateInfo(betterproto.Message):
    force_update_url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ForgeDataNotify(betterproto.Message):
    forge_id_list: List[int] = betterproto.uint32_field(1)
    max_queue_num: int = betterproto.uint32_field(2)
    forge_queue_map: Dict[int, "ForgeQueueData"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ForgeFormulaDataNotify(betterproto.Message):
    forge_id: int = betterproto.uint32_field(1)
    is_locked: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ForgeGetQueueDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ForgeGetQueueDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    max_queue_num: int = betterproto.uint32_field(2)
    forge_queue_map: Dict[int, "ForgeQueueData"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class ForgeQueueDataNotify(betterproto.Message):
    forge_queue_map: Dict[int, "ForgeQueueData"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    removed_forge_queue_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ForgeQueueData(betterproto.Message):
    queue_id: int = betterproto.uint32_field(1)
    forge_id: int = betterproto.uint32_field(2)
    finish_count: int = betterproto.uint32_field(3)
    unfinish_count: int = betterproto.uint32_field(4)
    next_finish_timestamp: int = betterproto.uint32_field(5)
    total_finish_timestamp: int = betterproto.uint32_field(6)
    avatar_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ForgeQueueManipulateReq(betterproto.Message):
    forge_queue_id: int = betterproto.uint32_field(1)
    manipulate_type: "ForgeQueueManipulateType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class ForgeQueueManipulateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    manipulate_type: "ForgeQueueManipulateType" = betterproto.enum_field(2)
    output_item_list: List["ItemParam"] = betterproto.message_field(3)
    return_item_list: List["ItemParam"] = betterproto.message_field(4)
    extra_output_item_list: List["ItemParam"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ForgeStartReq(betterproto.Message):
    forge_id: int = betterproto.uint32_field(1)
    forge_count: int = betterproto.uint32_field(2)
    avatar_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ForgeStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class FoundationInfo(betterproto.Message):
    status: "FoundationStatus" = betterproto.enum_field(1)
    uid_list: List[int] = betterproto.uint32_field(2)
    current_building_id: int = betterproto.uint32_field(3)
    begin_build_time_ms: int = betterproto.uint64_field(4)
    demolition_refund: int = betterproto.uint32_field(5)
    building_list: List["BuildingInfo"] = betterproto.message_field(6)
    current_num: int = betterproto.uint32_field(7)
    max_num: int = betterproto.uint32_field(8)
    locked_by_uid: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class FoundationNotify(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    info: "FoundationInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FoundationReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    op_type: "FoundationOpType" = betterproto.enum_field(2)
    building_id: int = betterproto.uint32_field(3)
    point_config_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FoundationRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gadget_entity_id: int = betterproto.uint32_field(2)
    op_type: "FoundationOpType" = betterproto.enum_field(3)
    building_id: int = betterproto.uint32_field(4)
    point_config_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class FriendBrief(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    level: int = betterproto.uint32_field(3)
    avatar_id: int = betterproto.uint32_field(4)
    world_level: int = betterproto.uint32_field(5)
    signature: str = betterproto.string_field(6)
    online_state: "FriendOnlineState" = betterproto.enum_field(7)
    param: int = betterproto.uint32_field(8)
    is_mp_mode_available: bool = betterproto.bool_field(10)
    online_id: str = betterproto.string_field(11)
    last_active_time: int = betterproto.uint32_field(12)
    name_card_id: int = betterproto.uint32_field(13)
    mp_player_num: int = betterproto.uint32_field(14)
    is_chat_no_disturb: bool = betterproto.bool_field(15)
    chat_sequence: int = betterproto.uint32_field(16)
    remark_name: str = betterproto.string_field(17)
    show_avatar_info_list: List["SocialShowAvatarInfo"] = betterproto.message_field(22)
    friend_enter_home_option: "FriendEnterHomeOption" = betterproto.enum_field(23)
    profile_picture: "ProfilePicture" = betterproto.message_field(24)
    is_game_source: bool = betterproto.bool_field(25)
    is_psn_source: bool = betterproto.bool_field(26)
    platform_type: "PlatformType" = betterproto.enum_field(27)


@dataclass(eq=False, repr=False)
class FriendInfoChangeNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    online_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FunitureMakeMakeInfoChangeNotify(betterproto.Message):
    make_info: "FurnitureMakeMakeInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FurnitureCurModuleArrangeCountNotify(betterproto.Message):
    furniture_arrange_count_list: List["Uint32Pair"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FurnitureMakeBeHelpedData(betterproto.Message):
    player_name: str = betterproto.string_field(1)
    time: int = betterproto.uint32_field(2)
    uid: int = betterproto.uint32_field(3)
    icon: int = betterproto.uint32_field(4)
    profile_picture: "ProfilePicture" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class FurnitureMakeBeHelpedNotify(betterproto.Message):
    furniture_make_helped_data: "FurnitureMakeBeHelpedData" = betterproto.message_field(
        1
    )
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FurnitureMakeCancelReq(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    make_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FurnitureMakeCancelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    make_id: int = betterproto.uint32_field(2)
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class FurnitureMakeData(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    make_id: int = betterproto.uint32_field(2)
    begin_time: int = betterproto.uint32_field(3)
    dur_time: int = betterproto.uint32_field(4)
    accelerate_time: int = betterproto.uint32_field(5)
    avatar_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class FurnitureMakeFinishNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FurnitureMakeHelpData(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    times: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FurnitureMakeHelpReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FurnitureMakeHelpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    help_data_list: List["FurnitureMakeHelpData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FurnitureMakeMakeInfo(betterproto.Message):
    furniture_id: int = betterproto.uint32_field(1)
    make_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FurnitureMakeReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FurnitureMakeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(2)
    help_data_list: List["FurnitureMakeHelpData"] = betterproto.message_field(3)
    helped_data_list: List["FurnitureMakeBeHelpedData"] = betterproto.message_field(4)
    make_info_list: List["FurnitureMakeMakeInfo"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class FurnitureMakeSlot(betterproto.Message):
    furniture_make_data_list: List["FurnitureMakeData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FurnitureMakeStartReq(betterproto.Message):
    make_id: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FurnitureMakeStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Furniture(betterproto.Message):
    count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GachaInfo(betterproto.Message):
    gacha_type: int = betterproto.uint32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    begin_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    cost_item_id: int = betterproto.uint32_field(5)
    cost_item_num: int = betterproto.uint32_field(6)
    gacha_prefab_path: str = betterproto.string_field(7)
    gacha_prob_url: str = betterproto.string_field(8)
    gacha_record_url: str = betterproto.string_field(9)
    gacha_preview_prefab_path: str = betterproto.string_field(10)
    ten_cost_item_id: int = betterproto.uint32_field(11)
    ten_cost_item_num: int = betterproto.uint32_field(12)
    left_gacha_times: int = betterproto.uint32_field(13)
    gacha_times_limit: int = betterproto.uint32_field(14)
    gacha_sort_id: int = betterproto.uint32_field(15)
    gacha_prob_url_oversea: str = betterproto.string_field(16)
    gacha_record_url_oversea: str = betterproto.string_field(17)
    gacha_up_info_list: List["GachaUpInfo"] = betterproto.message_field(18)
    title_textmap: str = betterproto.string_field(19)
    display_up5_item_list: List[int] = betterproto.uint32_field(20)
    display_up4_item_list: List[int] = betterproto.uint32_field(21)
    wish_item_id: int = betterproto.uint32_field(22)
    wish_progress: int = betterproto.uint32_field(23)
    wish_max_progress: int = betterproto.uint32_field(24)
    is_new_wish: bool = betterproto.bool_field(25)


@dataclass(eq=False, repr=False)
class GachaItem(betterproto.Message):
    gacha_item: "ItemParam" = betterproto.message_field(1)
    transfer_items: List["GachaTransferItem"] = betterproto.message_field(2)
    is_flash_card: bool = betterproto.bool_field(3)
    is_gacha_item_new: bool = betterproto.bool_field(4)
    token_item_list: List["ItemParam"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GachaOpenWishNotify(betterproto.Message):
    gacha_type: int = betterproto.uint32_field(1)
    gacha_schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GachaSimpleInfoNotify(betterproto.Message):
    is_new: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GachaTransferItem(betterproto.Message):
    item: "ItemParam" = betterproto.message_field(1)
    is_transfer_item_new: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GachaUpInfo(betterproto.Message):
    item_parent_type: int = betterproto.uint32_field(1)
    item_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GachaWishReq(betterproto.Message):
    gacha_type: int = betterproto.uint32_field(1)
    gacha_schedule_id: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GachaWishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gacha_type: int = betterproto.uint32_field(2)
    gacha_schedule_id: int = betterproto.uint32_field(3)
    wish_item_id: int = betterproto.uint32_field(4)
    wish_progress: int = betterproto.uint32_field(5)
    wish_max_progress: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GadgetAutoPickDropInfoNotify(betterproto.Message):
    item_list: List["Item"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GadgetChainLevelChangeNotify(betterproto.Message):
    gadget_chain_level_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GadgetChainLevelUpdateNotify(betterproto.Message):
    gadget_chain_level_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GadgetCrucibleInfo(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    prepare_end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GadgetCustomTreeInfoNotify(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    custom_gadget_tree_info: "CustomGadgetTreeInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GadgetGeneralRewardInfoNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    general_reward_info: "GadgetGeneralRewardInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GadgetGeneralRewardInfo(betterproto.Message):
    resin: int = betterproto.uint32_field(1)
    dead_time: int = betterproto.uint32_field(2)
    remain_uid_list: List[int] = betterproto.uint32_field(3)
    qualify_uid_list: List[int] = betterproto.uint32_field(4)
    item_param: "ItemParam" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GadgetInteractReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    op_type: "InterOpType" = betterproto.enum_field(2)
    gadget_id: int = betterproto.uint32_field(3)
    is_use_condense_resin: bool = betterproto.bool_field(4)
    resin_cost_type: "ResinCostType" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class GadgetInteractRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gadget_entity_id: int = betterproto.uint32_field(2)
    interact_type: "InteractType" = betterproto.enum_field(3)
    op_type: "InterOpType" = betterproto.enum_field(4)
    gadget_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GadgetPlayDataNotify(betterproto.Message):
    play_type: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    progress: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GadgetPlayInfo(betterproto.Message):
    crucible_info: "GadgetCrucibleInfo" = betterproto.message_field(
        21, group="PlayInfo"
    )
    play_type: int = betterproto.uint32_field(1)
    duration: int = betterproto.uint32_field(2)
    progress_stage_list: List[int] = betterproto.uint32_field(3)
    start_cd: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(5)
    progress: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GadgetPlayStartNotify(betterproto.Message):
    play_type: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    start_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GadgetPlayStopNotify(betterproto.Message):
    play_type: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    is_win: bool = betterproto.bool_field(3)
    cost_time: int = betterproto.uint32_field(4)
    uid_info_list: List["GadgetPlayUidInfo"] = betterproto.message_field(5)
    score: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GadgetPlayUidInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)
    icon: int = betterproto.uint32_field(3)
    nickname: str = betterproto.string_field(4)
    online_id: str = betterproto.string_field(5)
    battle_watcher_id: int = betterproto.uint32_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class GadgetPlayUidOpNotify(betterproto.Message):
    play_type: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    uid_list: List[int] = betterproto.uint32_field(3)
    op: int = betterproto.uint32_field(4)
    param_str: str = betterproto.string_field(5)
    param_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GadgetStateNotify(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    gadget_state: int = betterproto.uint32_field(2)
    is_enable_interact: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GadgetTalkChangeNotify(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    cur_gadget_talk_state: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GalleryBalloonScoreNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    uid_score_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GalleryBalloonShootNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    add_score: int = betterproto.int32_field(2)
    combo: int = betterproto.uint32_field(3)
    combo_disable_time: int = betterproto.uint64_field(4)
    cur_score: int = betterproto.uint32_field(5)
    trigger_entity_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GalleryBounceConjuringHitNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    add_score: int = betterproto.uint32_field(2)
    is_perfect: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GalleryBrokenFloorFallNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    fall_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GalleryBulletHitNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    hit_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GalleryFallCatchNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    add_score: int = betterproto.uint32_field(2)
    cur_score: int = betterproto.uint32_field(3)
    ball_catch_count_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_ground: bool = betterproto.bool_field(5)
    time_cost: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GalleryFallScoreNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    uid_brief_map: Dict[int, "FallPlayerBrief"] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class GalleryFlowerCatchNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    add_score: int = betterproto.uint32_field(2)
    cur_score: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GalleryFlowerStartParam(betterproto.Message):
    target_score: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GalleryPreStartNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    pre_start_end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GalleryStartNotify(betterproto.Message):
    flower_start_param: "GalleryFlowerStartParam" = betterproto.message_field(
        11, group="Detail"
    )
    gallery_id: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)
    player_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GalleryStopNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GallerySumoKillMonsterNotify(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)
    kill_normal_mosnter_num: int = betterproto.uint32_field(3)
    kill_elite_monster_num: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GatherGadgetInfo(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    is_forbid_guest: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GeneralMatchInfo(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)
    player_list: List["MatchPlayerInfo"] = betterproto.message_field(2)
    match_param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetActivityInfoReq(betterproto.Message):
    activity_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetActivityInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_info_list: List["ActivityInfo"] = betterproto.message_field(2)
    activated_sale_id_list: List[int] = betterproto.uint32_field(3)
    disable_transfer_point_interaction_list: List[
        "Uint32Pair"
    ] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetActivityScheduleReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetActivityScheduleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_schedule_list: List["ActivityScheduleInfo"] = betterproto.message_field(2)
    remain_fly_sea_lamp_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetActivityShopSheetInfoReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetActivityShopSheetInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop_type: int = betterproto.uint32_field(2)
    sheet_info_list: List["ActivityShopSheetInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetAllActivatedBargainDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllActivatedBargainDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    snapshot_list: List["BargainSnapshot"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetAllH5ActivityInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllH5ActivityInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    h5_activity_info_list: List["H5ActivityInfo"] = betterproto.message_field(2)
    client_red_dot_timestamp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetAllMailReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllMailRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mail_list: List["MailData"] = betterproto.message_field(2)
    is_truncated: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GetAllSceneGalleryInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllSceneGalleryInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gallery_info_list: List["SceneGalleryInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetAllUnlockNameCardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllUnlockNameCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    name_card_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetAreaExplorePointReq(betterproto.Message):
    area_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetAreaExplorePointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    area_id_list: List[int] = betterproto.uint32_field(2)
    explore_point_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetAuthkeyReq(betterproto.Message):
    auth_appid: str = betterproto.string_field(1)
    sign_type: int = betterproto.uint32_field(2)
    authkey_ver: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetAuthkeyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    authkey: str = betterproto.string_field(2)
    auth_appid: str = betterproto.string_field(3)
    sign_type: int = betterproto.uint32_field(4)
    authkey_ver: int = betterproto.uint32_field(5)
    game_biz: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class GetAuthSalesmanInfoReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetAuthSalesmanInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    day_reward_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetBargainDataReq(betterproto.Message):
    bargain_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetBargainDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    bargain_id: int = betterproto.uint32_field(2)
    snapshot: "BargainSnapshot" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetBattlePassProductReq(betterproto.Message):
    battle_pass_product_play_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetBattlePassProductRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    battle_pass_product_play_type: int = betterproto.uint32_field(2)
    cur_schedule_id: int = betterproto.uint32_field(3)
    product_id: str = betterproto.string_field(4)
    price_tier: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GetBlossomBriefInfoListReq(betterproto.Message):
    city_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetBlossomBriefInfoListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    brief_info_list: List["BlossomBriefInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetBonusActivityRewardReq(betterproto.Message):
    bonus_activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetBonusActivityRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    bonus_activity_info_list: "BonusActivityInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetChatEmojiCollectionReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetChatEmojiCollectionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chat_emoji_collection_data: "ChatEmojiCollectionData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetCityHuntingOfferReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetCityHuntingOfferRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    hunting_offer_list: List["HuntingOfferData"] = betterproto.message_field(3)
    cur_week_finished_count: int = betterproto.uint32_field(4)
    ongoing_hunting_pair: "HuntingPair" = betterproto.message_field(5)
    next_refresh_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GetCityReputationInfoReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetCityReputationInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    city_reputation_info: "CityReputationInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetCityReputationMapInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCityReputationMapInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reward_city_list: List[int] = betterproto.uint32_field(2)
    is_new_request: bool = betterproto.bool_field(3)
    is_new_hunting: bool = betterproto.bool_field(4)
    unlock_hunting_city_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetCompoundDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCompoundDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    unlock_compound_list: List[int] = betterproto.uint32_field(2)
    compound_que_data_list: List["CompoundQueueData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetDailyDungeonEntryInfoReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetDailyDungeonEntryInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    daily_dungeon_info_list: List["DailyDungeonEntryInfo"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class GetDungeonEntryExploreConditionReq(betterproto.Message):
    dungeon_entry_scene_point_id: int = betterproto.uint32_field(1)
    dungeon_entry_config_id: int = betterproto.uint32_field(2)
    scene_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetDungeonEntryExploreConditionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    dungeon_entry_cond: "DungeonEntryCond" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetExpeditionAssistInfoListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetExpeditionAssistInfoListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    assist_info_list: List["ExpeditionAssistInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetFriendShowAvatarInfoReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetFriendShowAvatarInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    uid: int = betterproto.uint32_field(2)
    show_avatar_info_list: List["ShowAvatarInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetFriendShowNameCardInfoReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetFriendShowNameCardInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    uid: int = betterproto.uint32_field(2)
    show_name_card_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetFurnitureCurModuleArrangeCountReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetGachaInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetGachaInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gacha_info_list: List["GachaInfo"] = betterproto.message_field(2)
    gacha_random: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetHomeLevelUpRewardReq(betterproto.Message):
    level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetHomeLevelUpRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetHuntingOfferRewardReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    hunting_pair: "HuntingPair" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetHuntingOfferRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    hunting_pair: "HuntingPair" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetInvestigationMonsterReq(betterproto.Message):
    city_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetInvestigationMonsterRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    monster_list: List["InvestigationMonster"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetMailItemReq(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetMailItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mail_id_list: List[int] = betterproto.uint32_field(2)
    item_list: List["EquipParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetMapAreaReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMapAreaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    map_area_info_list: List["MapAreaInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetMapMarkTipsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMapMarkTipsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mark_tips_list: List["MapMarkTipsInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetMechanicusInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMechanicusInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mechanicus_info: "MechanicusInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetNextResourceInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetNextResourceInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    next_res_version_config: "ResVersionConfig" = betterproto.message_field(2)
    next_resource_url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetOnlinePlayerInfoReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(2, group="PlayerId")
    online_id: str = betterproto.string_field(3, group="PlayerId")
    psn_id: str = betterproto.string_field(4, group="PlayerId")
    is_online_id: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetOnlinePlayerInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)
    target_player_info: "OnlinePlayerInfo" = betterproto.message_field(3)
    param: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GetOnlinePlayerListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetOnlinePlayerListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    player_info_list: List["OnlinePlayerInfo"] = betterproto.message_field(2)
    param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetOpActivityInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetOpActivityInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    op_activity_info_list: List["OpActivityInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetPlayerAskFriendListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerAskFriendListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    ask_friend_list: List["FriendBrief"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetPlayerBlacklistReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerBlacklistRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    blacklist: List["FriendBrief"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetPlayerFriendListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerFriendListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    friend_list: List["FriendBrief"] = betterproto.message_field(2)
    ask_friend_list: List["FriendBrief"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetPlayerHomeCompInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerMpModeAvailabilityReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPlayerMpModeAvailabilityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mp_ret: int = betterproto.int32_field(2)
    param_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetPlayerSocialDetailReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetPlayerSocialDetailRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    detail_data: "SocialDetail" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetPlayerTokenReq(betterproto.Message):
    account_type: int = betterproto.uint32_field(1)
    account_uid: str = betterproto.string_field(2)
    account_token: str = betterproto.string_field(3)
    account_ext: str = betterproto.string_field(4)
    uid: int = betterproto.uint32_field(5)
    is_guest: bool = betterproto.bool_field(6)
    platform_type: int = betterproto.uint32_field(7)
    cloud_client_ip: int = betterproto.uint32_field(8)
    online_id: str = betterproto.string_field(9)
    psn_region: str = betterproto.string_field(10)
    channel_id: int = betterproto.uint32_field(11)
    sub_channel_id: int = betterproto.uint32_field(12)
    country_code: str = betterproto.string_field(13)
    psn_id: str = betterproto.string_field(14)
    client_ip_str: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class GetPlayerTokenRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    uid: int = betterproto.uint32_field(3)
    token: str = betterproto.string_field(4)
    black_uid_end_time: int = betterproto.uint32_field(5)
    account_type: int = betterproto.uint32_field(6)
    account_uid: str = betterproto.string_field(7)
    is_proficient_player: bool = betterproto.bool_field(8)
    secret_key: str = betterproto.string_field(9)
    gm_uid: int = betterproto.uint32_field(10)
    secret_key_seed: int = betterproto.uint64_field(11)
    security_cmd_buffer: bytes = betterproto.bytes_field(12)
    platform_type: int = betterproto.uint32_field(13)
    extra_bin_data: bytes = betterproto.bytes_field(14)
    is_guest: bool = betterproto.bool_field(15)
    channel_id: int = betterproto.uint32_field(16)
    sub_channel_id: int = betterproto.uint32_field(17)
    tag: int = betterproto.uint32_field(18)
    country_code: str = betterproto.string_field(19)
    is_login_white_list: bool = betterproto.bool_field(20)
    psn_id: str = betterproto.string_field(21)
    client_version_random_key: str = betterproto.string_field(22)
    reg_platform: int = betterproto.uint32_field(23)
    client_ip_str: str = betterproto.string_field(24)


@dataclass(eq=False, repr=False)
class GetPushTipsRewardReq(betterproto.Message):
    push_tips_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetPushTipsRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    push_tips_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetQuestTalkHistoryReq(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetQuestTalkHistoryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    parent_quest_id: int = betterproto.uint32_field(2)
    talk_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetRecentMpPlayerListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRecentMpPlayerListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    recent_mp_player_brief_list: List["FriendBrief"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetRegionSearchReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetReunionMissionInfoReq(betterproto.Message):
    mission_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetReunionMissionInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mission_info: "ReunionMissionInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetReunionPrivilegeInfoReq(betterproto.Message):
    privilege_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetReunionPrivilegeInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    privilege_info: "ReunionPrivilegeInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetReunionSignInInfoReq(betterproto.Message):
    sign_in_config_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetReunionSignInInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    sign_in_info: "ReunionSignInInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetSceneAreaReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    belong_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetSceneAreaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    area_id_list: List[int] = betterproto.uint32_field(3)
    city_info_list: List["CityInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetSceneNpcPositionReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    npc_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetSceneNpcPositionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    npc_info_list: List["NpcPositionInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetScenePerformanceReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetScenePerformanceRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    group_num: int = betterproto.uint32_field(3)
    entity_num: int = betterproto.uint32_field(4)
    dynamic_group_num: int = betterproto.uint32_field(5)
    monster_num: int = betterproto.uint32_field(6)
    gadget_num: int = betterproto.uint32_field(7)
    gather_num: int = betterproto.uint32_field(8)
    gather_num_insight: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class GetScenePointReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    belong_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetScenePointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    unlocked_point_list: List[int] = betterproto.uint32_field(3)
    belong_uid: int = betterproto.uint32_field(4)
    unlock_area_list: List[int] = betterproto.uint32_field(5)
    locked_point_list: List[int] = betterproto.uint32_field(6)
    to_be_explore_dungeon_entry_list: List[int] = betterproto.uint32_field(7)
    not_explored_dungeon_entry_list: List[int] = betterproto.uint32_field(8)
    group_unlimit_point_list: List[int] = betterproto.uint32_field(9)
    not_interact_dungeon_entry_list: List[int] = betterproto.uint32_field(10)
    hide_point_list: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class GetShopmallDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetShopmallDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop_type_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetShopReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetShopRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop: "Shop" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetSignInRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    reward_day: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetSignInRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    sign_in_info: "SignInInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetWidgetSlotReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetWidgetSlotRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    slot_list: List["WidgetSlotData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetWorldMpInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetWorldMpInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_in_mp_mode: bool = betterproto.bool_field(2)
    quit_mp_valid_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GiveUpRoguelikeDungeonCardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GiveUpRoguelikeDungeonCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GivingRecordChangeNotify(betterproto.Message):
    giving_record: "GivingRecord" = betterproto.message_field(1)
    is_deactive: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GivingRecordNotify(betterproto.Message):
    giving_record_list: List["GivingRecord"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GivingRecord(betterproto.Message):
    giving_id: int = betterproto.uint32_field(1)
    is_finished: bool = betterproto.bool_field(2)
    last_group_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GmShowNavMeshReq(betterproto.Message):
    center: "Vector" = betterproto.message_field(1)
    extent: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GmShowNavMeshRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    tiles: List["PbNavMeshTile"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GmShowObstacleReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GmShowObstacleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    obstacles: List["ObstacleInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GmTalkNotify(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GmTalkReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GmTalkRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    retmsg: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GrantRewardNotify(betterproto.Message):
    reward: "Reward" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GroupLinkAllNotify(betterproto.Message):
    bundle_list: List["GroupLinkBundle"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GroupLinkBundle(betterproto.Message):
    bundle_id: int = betterproto.uint32_field(1)
    center: "Vector" = betterproto.message_field(2)
    radius: int = betterproto.uint32_field(3)
    is_activated: bool = betterproto.bool_field(4)
    scene_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GroupLinkChangeNotify(betterproto.Message):
    bundle: "GroupLinkBundle" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GroupLinkDeleteNotify(betterproto.Message):
    bundle_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GroupSuiteNotify(betterproto.Message):
    group_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class GroupUnloadNotify(betterproto.Message):
    group_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GuestBeginEnterSceneNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GuestPostEnterSceneNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class H5ActivityIdsNotify(betterproto.Message):
    h5_activity_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    client_red_dot_timestamp: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class H5ActivityInfo(betterproto.Message):
    h5_schedule_id: int = betterproto.uint32_field(1)
    h5_activity_id: int = betterproto.uint32_field(2)
    begin_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    content_close_time: int = betterproto.uint32_field(5)
    prefab_path: str = betterproto.string_field(6)
    url: str = betterproto.string_field(7)
    is_entrance_open: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class HashedString(betterproto.Message):
    hash: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HideAndSeekActivityDetailInfo(betterproto.Message):
    chosen_hunter_skill_list: List[int] = betterproto.uint32_field(1)
    chosen_hider_skill_list: List[int] = betterproto.uint32_field(2)
    unlock_map_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HideAndSeekPlayerBattleInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    skill_list: List[int] = betterproto.uint32_field(2)
    is_ready: bool = betterproto.bool_field(3)
    costume_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HideAndSeekPlayerReadyNotify(betterproto.Message):
    uid_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HideAndSeekPlayerSetAvatarNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectAvatarReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectSkillReq(betterproto.Message):
    skill_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HideAndSeekSelectSkillRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    skill_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HideAndSeekSetReadyReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HideAndSeekSetReadyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HideAndSeekSettleInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    card_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(2)
    head_image: int = betterproto.uint32_field(4)
    nickname: str = betterproto.string_field(5)
    online_id: str = betterproto.string_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class HideAndSeekSettleNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    stage_type: int = betterproto.uint32_field(2)
    cost_time: int = betterproto.uint32_field(3)
    winner_list: List[int] = betterproto.uint32_field(4)
    reason: "HideAndSeekSettleNotifySettleReason" = betterproto.enum_field(5)
    score_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(6)
    settle_info_list: List["HideAndSeekSettleInfo"] = betterproto.message_field(7)
    is_record_score: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class HideAndSeekStageInfo(betterproto.Message):
    stage_type: "HideAndSeekStageType" = betterproto.enum_field(1)
    hunter_uid: int = betterproto.uint32_field(2)
    hider_uid_list: List[int] = betterproto.uint32_field(3)
    battle_info_map: Dict[int, "HideAndSeekPlayerBattleInfo"] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    map_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HitClientTrivialNotify(betterproto.Message):
    position: "Vector" = betterproto.message_field(1)
    owner_entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HitCollision(betterproto.Message):
    hit_collider_type: "HitColliderType" = betterproto.enum_field(1)
    hit_box_index: int = betterproto.int32_field(2)
    hit_point: "Vector" = betterproto.message_field(3)
    hit_dir: "Vector" = betterproto.message_field(4)
    attackee_hit_force_angle: float = betterproto.float_field(5)
    attackee_hit_entity_angle: float = betterproto.float_field(6)


@dataclass(eq=False, repr=False)
class HitTreeNotify(betterproto.Message):
    tree_type: int = betterproto.uint32_field(1)
    tree_pos: "Vector" = betterproto.message_field(2)
    drop_pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeAnimalData(betterproto.Message):
    furniture_id: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(2)
    spawn_rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeAvatarAllFinishRewardNotify(betterproto.Message):
    event_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeAvatarCostumeChangeNotify(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    costume_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventGetReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventGetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    item_list: List["ItemParam"] = betterproto.message_field(2)
    event_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    event_id: int = betterproto.uint32_field(2)
    suite_id: int = betterproto.uint32_field(3)
    random_position: int = betterproto.uint32_field(4)
    guid: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class HomeAvatarRewardEventNotify(betterproto.Message):
    is_event_trigger: bool = betterproto.bool_field(5)
    reward_event: "HomeAvatarRewardEventInfo" = betterproto.message_field(7)
    pending_list: List["HomeAvatarRewardEventInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonAllEventNotify(betterproto.Message):
    summon_event_list: List["HomeAvatarSummonEventInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonEventInfo(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    suit_id: int = betterproto.uint32_field(3)
    event_over_time: int = betterproto.uint32_field(4)
    random_position: int = betterproto.uint32_field(5)
    guid: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonEventReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    suit_id: int = betterproto.uint32_field(2)
    guid: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonEventRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonFinishReq(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeAvatarSummonFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeAvatarTalkFinishInfoNotify(betterproto.Message):
    avatar_talk_info_list: List["HomeAvatarTalkFinishInfo"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class HomeAvatarTalkFinishInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    finish_talk_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeAvatarTalkReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    talk_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeAvatarTalkRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_talk_info: "HomeAvatarTalkFinishInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeAvtarAllFinishRewardNotify(betterproto.Message):
    event_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeBasicInfoNotify(betterproto.Message):
    basic_info: "HomeBasicInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeBasicInfo(betterproto.Message):
    cur_module_id: int = betterproto.uint32_field(1)
    cur_room_scene_id: int = betterproto.uint32_field(2)
    is_in_edit_mode: bool = betterproto.bool_field(3)
    exp: int = betterproto.uint64_field(4)
    level: int = betterproto.uint32_field(5)
    home_owner_uid: int = betterproto.uint32_field(6)
    limited_shop_info: "HomeLimitedShopInfo" = betterproto.message_field(7)
    owner_nick_name: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class HomeBlockArrangementInfo(betterproto.Message):
    block_id: int = betterproto.uint32_field(1)
    persistent_furniture_list: List["HomeFurnitureData"] = betterproto.message_field(2)
    deploy_furniure_list: List["HomeFurnitureData"] = betterproto.message_field(3)
    deploy_npc_list: List["HomeNpcData"] = betterproto.message_field(4)
    furniture_suite_list: List["HomeFurnitureSuiteData"] = betterproto.message_field(5)
    deploy_animal_list: List["HomeAnimalData"] = betterproto.message_field(6)
    is_unlocked: bool = betterproto.bool_field(7)
    comfort_value: int = betterproto.uint32_field(8)
    weekend_djinn_info_list: List["WeekendDjinnInfo"] = betterproto.message_field(9)
    dot_pattern_list: List["HomeBlockDotPattern"] = betterproto.message_field(10)
    field_list: List["HomeBlockFieldData"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class HomeBlockArrangementMuipData(betterproto.Message):
    block_id: int = betterproto.uint32_field(1)
    furniture_data_list: List[
        "HomeFurnitureArrangementMuipData"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeBlockDotPattern(betterproto.Message):
    height: int = betterproto.uint32_field(1)
    width: int = betterproto.uint32_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class HomeBlockFieldData(betterproto.Message):
    guid: int = betterproto.uint32_field(1)
    furniture_id: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(3)
    rot: "Vector" = betterproto.message_field(4)
    sub_field_list: List["HomeBlockSubFieldData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class HomeBlockNotify(betterproto.Message):
    end_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeBlockSubFieldData(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeChangeEditModeReq(betterproto.Message):
    is_enter_edit_mode: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class HomeChangeEditModeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_enter_edit_mode: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class HomeChangeModuleReq(betterproto.Message):
    target_module_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeChangeModuleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_module_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeChooseModuleReq(betterproto.Message):
    module_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeChooseModuleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    module_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeComfortInfoNotify(betterproto.Message):
    module_info_list: List["HomeModuleComfortInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeCustomFurnitureInfoNotify(betterproto.Message):
    custom_furniture_info_list: List[
        "HomeCustomFurnitureInfo"
    ] = betterproto.message_field(1)
    used_sub_furniture_count_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    delete_custom_furniture_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeCustomFurnitureInfo(betterproto.Message):
    guid: int = betterproto.uint32_field(1)
    sub_furniture_list: List["CustomCommonNodeInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeEditCustomFurnitureReq(betterproto.Message):
    custom_furniture_info: "HomeCustomFurnitureInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeEditCustomFurnitureRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    custom_furniture_info: "HomeCustomFurnitureInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeFishFarmingInfoNotify(betterproto.Message):
    fish_farming_info_list: List["HomeFishFarmingInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeFishFarmingInfo(betterproto.Message):
    fishpond_guid: int = betterproto.uint32_field(1)
    fish_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeFurnitureArrangementMuipData(betterproto.Message):
    furniture_id: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(2)
    spawn_rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeFurnitureData(betterproto.Message):
    furniture_id: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(3)
    spawn_rot: "Vector" = betterproto.message_field(4)
    parent_furniture_index: int = betterproto.int32_field(7)
    guid: int = betterproto.uint32_field(8)
    version: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class HomeFurnitureSuiteData(betterproto.Message):
    suite_id: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(2)
    included_furniture_index_list: List[int] = betterproto.int32_field(3)
    guid: int = betterproto.uint32_field(5)
    is_allow_summon: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class HomeGetArrangementInfoReq(betterproto.Message):
    scene_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeGetArrangementInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scene_arrangement_info_list: List[
        "HomeSceneArrangementInfo"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeGetBasicInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeGetFishFarmingInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeGetFishFarmingInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    fish_farming_info_list: List["HomeFishFarmingInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeGetOnlineStatusReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeGetOnlineStatusRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    player_info_list: List["OnlinePlayerInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeKickPlayerReq(betterproto.Message):
    is_kick_all: bool = betterproto.bool_field(1)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeKickPlayerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_kick_all: bool = betterproto.bool_field(2)
    target_uid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeLimitedShopBuyGoodsReq(betterproto.Message):
    goods: "HomeLimitedShopGoods" = betterproto.message_field(1)
    buy_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeLimitedShopBuyGoodsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    goods: "HomeLimitedShopGoods" = betterproto.message_field(2)
    buy_count: int = betterproto.uint32_field(3)
    goods_list: List["HomeLimitedShopGoods"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeLimitedShopGoodsListReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeLimitedShopGoodsListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop: "HomeLimitedShop" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeLimitedShopGoods(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    goods_item: "ItemParam" = betterproto.message_field(2)
    cost_item_list: List["ItemParam"] = betterproto.message_field(3)
    bought_num: int = betterproto.uint32_field(4)
    buy_limit: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoChangeNotify(betterproto.Message):
    goods_list: List["HomeLimitedShopGoods"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoNotify(betterproto.Message):
    shop_info: "HomeLimitedShopInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    next_open_time: int = betterproto.uint32_field(3)
    next_guest_open_time: int = betterproto.uint32_field(4)
    next_close_time: int = betterproto.uint32_field(5)
    djinn_pos: "Vector" = betterproto.message_field(6)
    djinn_rot: "Vector" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeLimitedShopInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shop_info: "HomeLimitedShopInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeLimitedShop(betterproto.Message):
    goods_list: List["HomeLimitedShopGoods"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeMarkPointFurnitureData(betterproto.Message):
    npc_data: "HomeMarkPointNpcData" = betterproto.message_field(6, group="Extra")
    suite_data: "HomeMarkPointSuiteData" = betterproto.message_field(7, group="Extra")
    guid: int = betterproto.uint32_field(1)
    furniture_id: int = betterproto.uint32_field(2)
    furniture_type: int = betterproto.uint32_field(3)
    pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeMarkPointNotify(betterproto.Message):
    mark_point_data_list: List["HomeMarkPointSceneData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeMarkPointNpcData(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    costume_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeMarkPointSceneData(betterproto.Message):
    module_id: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    furniture_list: List["HomeMarkPointFurnitureData"] = betterproto.message_field(3)
    teapot_spirit_pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeMarkPointSuiteData(betterproto.Message):
    suite_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeModuleComfortInfo(betterproto.Message):
    module_id: int = betterproto.uint32_field(1)
    world_scene_block_comfort_value_list: List[int] = betterproto.uint32_field(2)
    room_scene_comfort_value: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeModuleSeenReq(betterproto.Message):
    seen_module_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeModuleSeenRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    seen_module_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomeModuleUnlockNotify(betterproto.Message):
    module_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeNpcData(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(2)
    spawn_rot: "Vector" = betterproto.message_field(3)
    costume_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HomePlantFieldData(betterproto.Message):
    field_guid: int = betterproto.uint32_field(1)
    furniture_id: int = betterproto.uint32_field(2)
    sub_field_list: List["HomePlantSubFieldData"] = betterproto.message_field(3)
    scene_id: int = betterproto.uint32_field(4)
    spawn_pos: "Vector" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class HomePlantFieldNotify(betterproto.Message):
    field: "HomePlantFieldData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomePlantInfoNotify(betterproto.Message):
    field_list: List["HomePlantFieldData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomePlantInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomePlantInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    field_list: List["HomePlantFieldData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomePlantSeedReq(betterproto.Message):
    seed_id_list: List[int] = betterproto.uint32_field(1)
    field_guid: int = betterproto.uint32_field(2)
    index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomePlantSeedRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HomePlantSubFieldData(betterproto.Message):
    seed_id: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)
    entity_id_list: List[int] = betterproto.uint32_field(3)
    field_status: "HomePlantFieldStatus" = betterproto.enum_field(4)
    home_gather_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class HomePlantWeedReq(betterproto.Message):
    field_guid: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HomePlantWeedRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HomePriorCheckNotify(betterproto.Message):
    end_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeResourceNotify(betterproto.Message):
    home_coin: "HomeResource" = betterproto.message_field(1)
    fetter_exp: "HomeResource" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeResource(betterproto.Message):
    store_value: int = betterproto.uint32_field(1)
    store_limit: int = betterproto.uint32_field(2)
    next_refresh_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeResourceTakeFetterExpReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeResourceTakeFetterExpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    fetter_exp: "HomeResource" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeResourceTakeHomeCoinReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeResourceTakeHomeCoinRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    home_coin: "HomeResource" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeSceneArrangementInfo(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    block_arrangement_info_list: List[
        "HomeBlockArrangementInfo"
    ] = betterproto.message_field(2)
    is_set_born_pos: bool = betterproto.bool_field(3)
    born_pos: "Vector" = betterproto.message_field(4)
    born_rot: "Vector" = betterproto.message_field(5)
    door_list: List["HomeFurnitureData"] = betterproto.message_field(7)
    stair_list: List["HomeFurnitureData"] = betterproto.message_field(8)
    main_house: "HomeFurnitureData" = betterproto.message_field(9)
    comfort_value: int = betterproto.uint32_field(10)
    djinn_pos: "Vector" = betterproto.message_field(11)
    tmp_version: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class HomeSceneArrangementMuipData(betterproto.Message):
    module_id: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    is_room: bool = betterproto.bool_field(3)
    block_data_list: List["HomeBlockArrangementMuipData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HomeSceneInitFinishReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HomeSceneInitFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HomeSceneJumpReq(betterproto.Message):
    is_enter_room_scene: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class HomeSceneJumpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_enter_room_scene: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class HomeTransferData(betterproto.Message):
    guid: int = betterproto.uint32_field(1)
    spawn_pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HomeTransferReq(betterproto.Message):
    guid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class HomeTransferRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HomeUpdateArrangementInfoReq(betterproto.Message):
    scene_arrangement_info: "HomeSceneArrangementInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeUpdateArrangementInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HomeUpdateFishFarmingInfoReq(betterproto.Message):
    fish_farming_info: "HomeFishFarmingInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HomeUpdateFishFarmingInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class HomeVerifyBlockData(betterproto.Message):
    block_id: int = betterproto.uint32_field(1)
    furnitures: List["HomeVerifyFurnitureData"] = betterproto.message_field(2)
    images: List["HomeVerifyImageData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HomeVerifyData(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    region: str = betterproto.string_field(2)
    timestamp: int = betterproto.uint32_field(3)
    lang: "LanguageType" = betterproto.enum_field(4)
    home_info: "HomeVerifySceneData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class HomeVerifyFurnitureData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    num: int = betterproto.uint32_field(2)
    type: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HomeVerifyImageData(betterproto.Message):
    width: int = betterproto.uint32_field(1)
    height: int = betterproto.uint32_field(2)
    image: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class HomeVerifySceneData(betterproto.Message):
    module_id: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    is_room: int = betterproto.uint32_field(3)
    blocks: List["HomeVerifyBlockData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HostPlayerNotify(betterproto.Message):
    host_uid: int = betterproto.uint32_field(1)
    host_peer_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HuntingFailNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HuntingGiveUpReq(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HuntingGiveUpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    hunting_pair: "HuntingPair" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HuntingOfferData(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)
    city_id: int = betterproto.uint32_field(2)
    state: "HuntingOfferState" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class HuntingOngoingNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)
    next_position: "Vector" = betterproto.message_field(2)
    fail_time: int = betterproto.uint32_field(3)
    is_started: bool = betterproto.bool_field(4)
    finish_clue_count: int = betterproto.uint32_field(5)
    is_final: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class HuntingPair(betterproto.Message):
    refresh_id: int = betterproto.uint32_field(1)
    monster_config_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class HuntingRevealClueNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)
    finished_group_id: int = betterproto.uint32_field(2)
    clue_position: "Vector" = betterproto.message_field(3)
    finish_clue_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class HuntingRevealFinalNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)
    finished_group_id: int = betterproto.uint32_field(2)
    final_position: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HuntingStartNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)
    clue_position: "Vector" = betterproto.message_field(2)
    fail_time: int = betterproto.uint32_field(3)
    is_final: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class HuntingSuccessNotify(betterproto.Message):
    hunting_pair: "HuntingPair" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class InBattleChessInfo(betterproto.Message):
    round: int = betterproto.uint32_field(1)
    total_round: int = betterproto.uint32_field(2)
    player_info_map: Dict[int, "ChessPlayerInfo"] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    left_monsters: int = betterproto.uint32_field(5)
    excaped_monsters: int = betterproto.uint32_field(6)
    max_escapable_monsters: int = betterproto.uint32_field(7)
    mystery_info: "ChessMysteryInfo" = betterproto.message_field(8)
    selected_card_info_list: List["ChessCardInfo"] = betterproto.message_field(9)
    ban_card_tag_list: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class InBattleChessSettleInfo(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    score_list: List["ExhibitionDisplayInfo"] = betterproto.message_field(2)
    chess_level: int = betterproto.uint32_field(3)
    chess_exp: int = betterproto.uint32_field(4)
    old_chess_level: int = betterproto.uint32_field(5)
    old_chess_exp: int = betterproto.uint32_field(6)
    scene_time_ms: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class InBattleFleurFairInfo(betterproto.Message):
    ability_group_id_list: List[int] = betterproto.uint32_field(1)
    gallery_id_list: List[int] = betterproto.uint32_field(2)
    preview_stage_index: int = betterproto.uint32_field(3)
    preview_display_duration: int = betterproto.uint32_field(4)
    gallery_stage_index: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class InBattleMechanicusBuildingInfo(betterproto.Message):
    building_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    cost_points: int = betterproto.uint32_field(3)
    refund_points: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InBattleMechanicusBuildingPointsNotify(betterproto.Message):
    player_building_points_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class InBattleMechanicusCardInfo(betterproto.Message):
    card_id: int = betterproto.uint32_field(1)
    cost_points: int = betterproto.uint32_field(2)
    rand_effect_id: int = betterproto.uint32_field(3)
    begin_round: int = betterproto.uint32_field(4)
    end_round: int = betterproto.uint32_field(5)
    challenge_state: "InBattleMechanicusCardChallengeState" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class InBattleMechanicusCardResultNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    wait_begin_time_us: int = betterproto.uint64_field(3)
    wait_seconds: int = betterproto.uint32_field(4)
    card_list: List["InBattleMechanicusCardInfo"] = betterproto.message_field(5)
    player_confirmed_card_map: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class InBattleMechanicusConfirmCardNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    player_uid: int = betterproto.uint32_field(3)
    card_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InBattleMechanicusConfirmCardReq(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    card_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class InBattleMechanicusConfirmCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    play_index: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)
    card_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InBattleMechanicusExcapeMonsterNotify(betterproto.Message):
    excaped_monster_num: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class InBattleMechanicusInfo(betterproto.Message):
    stage: "InBattleMechanicusStageType" = betterproto.enum_field(1)
    begin_time_ms: int = betterproto.uint64_field(2)
    duration_ms: int = betterproto.uint64_field(3)
    round: int = betterproto.uint32_field(4)
    total_round: int = betterproto.uint32_field(5)
    left_monster: int = betterproto.uint32_field(6)
    monster_list: List["InBattleMechanicusMonsterInfo"] = betterproto.message_field(7)
    player_list: List["InBattleMechanicusPlayerInfo"] = betterproto.message_field(8)
    excaped_monster_num: int = betterproto.uint32_field(9)
    max_excape_monster_num: int = betterproto.uint32_field(10)
    building_stage_duration: int = betterproto.uint32_field(11)
    pick_card_list: List["InBattleMechanicusCardInfo"] = betterproto.message_field(12)
    history_card_list: List["InBattleMechanicusCardInfo"] = betterproto.message_field(
        13
    )
    wait_begin_time_us: int = betterproto.uint64_field(14)
    wait_seconds: int = betterproto.uint32_field(15)
    entrance_list: List[int] = betterproto.uint32_field(16)
    exit_list: List[int] = betterproto.uint32_field(17)


@dataclass(eq=False, repr=False)
class InBattleMechanicusLeftMonsterNotify(betterproto.Message):
    left_monster: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class InBattleMechanicusMonsterInfo(betterproto.Message):
    monster_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPickCardNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    player_uid: int = betterproto.uint32_field(3)
    card_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPickCardReq(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    card_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPickCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    play_index: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)
    card_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class InBattleMechanicusPlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    building_points: int = betterproto.uint32_field(2)
    building_list: List["InBattleMechanicusBuildingInfo"] = betterproto.message_field(3)
    pick_card_id: int = betterproto.uint32_field(4)
    is_card_confirmed: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class InBattleMechanicusSettleInfo(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    watcher_list: List["MultistageSettleWatcherInfo"] = betterproto.message_field(3)
    total_token: int = betterproto.uint32_field(4)
    real_token: int = betterproto.uint32_field(5)
    difficulty_percentage: int = betterproto.uint32_field(6)
    is_success: bool = betterproto.bool_field(7)
    scene_time_ms: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class InBattleMechanicusSettleNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    watcher_list: List["MultistageSettleWatcherInfo"] = betterproto.message_field(3)
    total_token: int = betterproto.uint32_field(4)
    real_token: int = betterproto.uint32_field(5)
    difficulty_percentage: int = betterproto.uint32_field(6)
    is_success: bool = betterproto.bool_field(7)
    scene_time_ms: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class InteractDailyDungeonInfoNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InterruptGalleryReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class InterruptGalleryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gallery_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class InvestigationMonster(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    city_id: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    is_alive: bool = betterproto.bool_field(4)
    next_refresh_time: int = betterproto.uint32_field(5)
    refresh_interval: int = betterproto.uint32_field(6)
    pos: "Vector" = betterproto.message_field(7)
    lock_state: "InvestigationMonsterLockState" = betterproto.enum_field(8)
    max_boss_chest_num: int = betterproto.uint32_field(9)
    boss_chest_num: int = betterproto.uint32_field(10)
    resin: int = betterproto.uint32_field(11)
    is_area_locked: bool = betterproto.bool_field(12)
    next_boss_chest_refresh_time: int = betterproto.uint32_field(13)
    weekly_boss_resin_discount_info: "WeeklyBossResinDiscountInfo" = (
        betterproto.message_field(14)
    )
    scene_id: int = betterproto.uint32_field(15)
    group_id: int = betterproto.uint32_field(16)
    monster_id: int = betterproto.uint32_field(17)


@dataclass(eq=False, repr=False)
class InvestigationMonsterUpdateNotify(betterproto.Message):
    investigation_monster: "InvestigationMonster" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Investigation(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    progress: int = betterproto.uint32_field(2)
    total_progress: int = betterproto.uint32_field(3)
    state: "InvestigationState" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class InvestigationTarget(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    investigation_id: int = betterproto.uint32_field(2)
    state: "InvestigationTargetState" = betterproto.enum_field(3)
    progress: int = betterproto.uint32_field(4)
    total_progress: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ItemAddHintNotify(betterproto.Message):
    item_list: List["ItemHint"] = betterproto.message_field(1)
    position: "Vector" = betterproto.message_field(2)
    is_position_valid: bool = betterproto.bool_field(3)
    reason: int = betterproto.uint32_field(4)
    quest_id: int = betterproto.uint32_field(5)
    is_transfered_from_avatar_card: bool = betterproto.bool_field(6)
    overflow_transformed_item_list: List["ItemHint"] = betterproto.message_field(7)
    is_general_reward_hiden: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class ItemCdGroupTimeNotify(betterproto.Message):
    item_cd_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT64
    )


@dataclass(eq=False, repr=False)
class ItemGivingReq(betterproto.Message):
    giving_id: int = betterproto.uint32_field(1)
    item_param_list: List["ItemParam"] = betterproto.message_field(2)
    item_guid_count_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT64, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class ItemGivingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    giving_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ItemHint(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    is_new: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ItemParam(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Item(betterproto.Message):
    material: "Material" = betterproto.message_field(5, group="Detail")
    equip: "Equip" = betterproto.message_field(6, group="Detail")
    furniture: "Furniture" = betterproto.message_field(7, group="Detail")
    item_id: int = betterproto.uint32_field(1)
    guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class JoinHomeWorldFailNotify(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class JoinPlayerFailNotify(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class JoinPlayerSceneReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class JoinPlayerSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class KeepAliveNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LeaveSceneReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LeaveSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class LeaveWorldNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LevelupCityReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    area_id: int = betterproto.uint32_field(2)
    item_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class LevelupCityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    area_id: int = betterproto.uint32_field(3)
    city_info: "CityInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LifeStateChangeNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    life_state: int = betterproto.uint32_field(2)
    source_entity_id: int = betterproto.uint32_field(3)
    attack_tag: str = betterproto.string_field(4)
    die_type: "PlayerDieType" = betterproto.enum_field(5)
    move_reliable_seq: int = betterproto.uint32_field(6)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class LiveEndNotify(betterproto.Message):
    live_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LiveStartNotify(betterproto.Message):
    live_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LoadActivityTerrainNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LockedPersonallineData(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(3, group="Param")
    level: int = betterproto.uint32_field(4, group="Param")
    personal_line_id: int = betterproto.uint32_field(1)
    lock_reason: "LockedPersonallineDataLockReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class LuaEnvironmentEffectNotify(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    effect_alias: str = betterproto.string_field(2)
    float_param_list: List[float] = betterproto.float_field(3)
    int_param_list: List[int] = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class LuaSetOptionNotify(betterproto.Message):
    option_type: "LuaSetOptionNotifyLuaOptionType" = betterproto.enum_field(1)
    lua_set_param: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LunaRiteAreaFinishNotify(betterproto.Message):
    area_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LunaRiteAreaInfo(betterproto.Message):
    area_id: int = betterproto.uint32_field(1)
    challenge_index: int = betterproto.uint32_field(2)
    sacrifice_list: List[int] = betterproto.uint32_field(3)
    sacrifice_reward_list: List[int] = betterproto.uint32_field(4)
    hint_status: "LunaRiteHintStatusType" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class LunaRiteDetailInfo(betterproto.Message):
    area_info_list: List["LunaRiteAreaInfo"] = betterproto.message_field(1)
    hint_point: List["LunaRiteHintPoint"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LunaRiteGroupBundleRegisterNotify(betterproto.Message):
    group_link_bundle_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LunaRiteHintPoint(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    area_id: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(3)
    type: "LunaRiteHintPointType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class LunaRiteHintPointRemoveNotify(betterproto.Message):
    hint_point_index: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LunaRiteHintPointReq(betterproto.Message):
    area_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LunaRiteHintPointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    area_id: int = betterproto.uint32_field(2)
    hint_point: List["LunaRiteHintPoint"] = betterproto.message_field(3)
    hint_status: "LunaRiteHintStatusType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class LunaRiteSacrificeReq(betterproto.Message):
    area_id: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class LunaRiteSacrificeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    area_id: int = betterproto.uint32_field(2)
    index: int = betterproto.uint32_field(3)
    sacrifice_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class LunaRiteTakeSacrificeRewardReq(betterproto.Message):
    area_id: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class LunaRiteTakeSacrificeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    area_id: int = betterproto.uint32_field(2)
    index: int = betterproto.uint32_field(3)
    sacrifice_reward_list: List[int] = betterproto.uint32_field(4)
    sacrifice_reward_index: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class LunchBoxData(betterproto.Message):
    slot_material_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class MailChangeNotify(betterproto.Message):
    mail_list: List["MailData"] = betterproto.message_field(1)
    del_mail_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MailData(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)
    mail_text_content: "MailTextContent" = betterproto.message_field(4)
    item_list: List["MailItem"] = betterproto.message_field(7)
    send_time: int = betterproto.uint32_field(8)
    expire_time: int = betterproto.uint32_field(9)
    importance: int = betterproto.uint32_field(10)
    is_read: bool = betterproto.bool_field(11)
    is_attachment_got: bool = betterproto.bool_field(12)
    config_id: int = betterproto.uint32_field(13)
    argument_list: List[str] = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class MailItem(betterproto.Message):
    equip_param: "EquipParam" = betterproto.message_field(1)
    delete_info: "MaterialDeleteInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MailTextContent(betterproto.Message):
    title: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)
    sender: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MainCoop(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    status: "MainCoopStatus" = betterproto.enum_field(2)
    save_point_id_list: List[int] = betterproto.uint32_field(3)
    self_confidence: int = betterproto.uint32_field(4)
    normal_var_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )
    temp_var_map: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )
    seen_ending_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class MainCoopUpdateNotify(betterproto.Message):
    main_coop_list: List["MainCoop"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MapAreaChangeNotify(betterproto.Message):
    map_area_info_list: List["MapAreaInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MapAreaInfo(betterproto.Message):
    map_area_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MapInfo(betterproto.Message):
    minx: int = betterproto.int32_field(1)
    maxx: int = betterproto.int32_field(2)
    minz: int = betterproto.int32_field(3)
    maxz: int = betterproto.int32_field(4)
    cells: List["CellInfo"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MapMarkPoint(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    pos: "Vector" = betterproto.message_field(3)
    point_type: "MapMarkPointType" = betterproto.enum_field(4)
    monster_id: int = betterproto.uint32_field(5)
    from_type: "MapMarkFromType" = betterproto.enum_field(6)
    quest_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MapMarkTipsInfo(betterproto.Message):
    tips_type: "MapMarkTipsType" = betterproto.enum_field(1)
    point_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MarkEntityInMinMapNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    position: "Vector" = betterproto.message_field(2)
    monster_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MarkMapReq(betterproto.Message):
    op: "MarkMapReqOperation" = betterproto.enum_field(1)
    old: "MapMarkPoint" = betterproto.message_field(2)
    mark: "MapMarkPoint" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MarkMapRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mark_list: List["MapMarkPoint"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MarkNewNotify(betterproto.Message):
    mark_new_type: int = betterproto.uint32_field(1)
    id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MarkTargetInvestigationMonsterNotify(betterproto.Message):
    investigation_monster_id: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)
    monster_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MassiveBoxInfo(betterproto.Message):
    id: int = betterproto.int32_field(1)
    config_id: int = betterproto.uint32_field(2)
    center: "Vector" = betterproto.message_field(3)
    extents: "Vector" = betterproto.message_field(4)
    up: "Vector" = betterproto.message_field(5)
    forward: "Vector" = betterproto.message_field(6)
    right: "Vector" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class MassiveEntityElementOpBatchNotify(betterproto.Message):
    shape_sphere: "ShapeSphere" = betterproto.message_field(7, group="CheckShape")
    shape_box: "ShapeBox" = betterproto.message_field(8, group="CheckShape")
    user_id: int = betterproto.uint32_field(1)
    attacker_id: int = betterproto.uint32_field(2)
    attack_element_durability: float = betterproto.float_field(3)
    source_element_type: int = betterproto.int32_field(4)
    reaction_source_type: int = betterproto.int32_field(5)
    entity_type: int = betterproto.int32_field(6)
    op_idx: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MassiveEntityStateChangedNotify(betterproto.Message):
    massive_entity_state_list: List["MassiveEntityState"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MassiveEntityState(betterproto.Message):
    entity_type: int = betterproto.uint32_field(1)
    obj_id: int = betterproto.int64_field(2)
    element_state: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MassiveGrassInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    center: "Vector" = betterproto.message_field(2)
    size: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MassivePropParam(betterproto.Message):
    type: int = betterproto.int32_field(1)
    reaction_info_list: List[int] = betterproto.uint32_field(2)
    param_list: List[float] = betterproto.float_field(3)
    sync_flag: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MassivePropSyncInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    prop_list: List["MassivePropParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MassiveWaterInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class MatchPlayerInfo(betterproto.Message):
    player_info: "OnlinePlayerInfo" = betterproto.message_field(1)
    is_agreed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MaterialDeleteInfo(betterproto.Message):
    count_down_delete: "MaterialDeleteInfoCountDownDelete" = betterproto.message_field(
        2, group="DeleteInfo"
    )
    date_delete: "MaterialDeleteInfoDateTimeDelete" = betterproto.message_field(
        3, group="DeleteInfo"
    )
    delay_week_count_down_delete: "MaterialDeleteInfoDelayWeekCountDownDelete" = (
        betterproto.message_field(4, group="DeleteInfo")
    )
    has_delete_config: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MaterialDeleteInfoCountDownDelete(betterproto.Message):
    delete_time_num_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    config_count_down_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MaterialDeleteInfoDateTimeDelete(betterproto.Message):
    delete_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MaterialDeleteInfoDelayWeekCountDownDelete(betterproto.Message):
    delete_time_num_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    config_delay_week: int = betterproto.uint32_field(2)
    config_count_down_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MaterialDeleteReturnNotify(betterproto.Message):
    delete_material_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    return_item_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    type: "MaterialDeleteReturnType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class MaterialDeleteUpdateNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Material(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    delete_info: "MaterialDeleteInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MaterilaInfo(betterproto.Message):
    guid: int = betterproto.uint64_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MathQuaternion(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)
    w: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class McoinExchangeHcoinReq(betterproto.Message):
    mcoin_cost: int = betterproto.uint32_field(1)
    hcoin: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class McoinExchangeHcoinRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mcoin_cost: int = betterproto.uint32_field(2)
    hcoin: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MechanicusCandidateTeamCreateReq(betterproto.Message):
    difficult_level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MechanicusCandidateTeamCreateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    difficult_level: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MechanicusCloseNotify(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MechanicusCoinNotify(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)
    coin: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MechanicusInfo(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)
    coin: int = betterproto.uint32_field(2)
    gear_level_pair_list: List["Uint32Pair"] = betterproto.message_field(3)
    open_sequence_id_list: List[int] = betterproto.uint32_field(4)
    is_finish_teach_dungeon: bool = betterproto.bool_field(5)
    finish_difficult_level_list: List[int] = betterproto.uint32_field(6)
    punish_over_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MechanicusLevelupGearReq(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)
    gear_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MechanicusLevelupGearRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mechanicus_id: int = betterproto.uint32_field(2)
    gear_id: int = betterproto.uint32_field(3)
    after_gear_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MechanicusOpenNotify(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MechanicusSequenceOpenNotify(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)
    sequence_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MechanicusUnlockGearReq(betterproto.Message):
    mechanicus_id: int = betterproto.uint32_field(1)
    gear_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MechanicusUnlockGearRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mechanicus_id: int = betterproto.uint32_field(2)
    gear_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MeetNpcReq(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MeetNpcRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    npc_first_met_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MetNpcIdListNotify(betterproto.Message):
    npc_first_met_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MiracleRingDataNotify(betterproto.Message):
    last_deliver_item_time: int = betterproto.uint32_field(1)
    last_take_reward_time: int = betterproto.uint32_field(2)
    miracle_ring_cd: int = betterproto.uint32_field(3)
    is_gadget_created: bool = betterproto.bool_field(4)
    gadget_entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MiracleRingDeliverItemReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    op_type: "InterOpType" = betterproto.enum_field(2)
    gadget_id: int = betterproto.uint32_field(3)
    food_weapon_guid_list: List[int] = betterproto.uint64_field(4)
    item_param_list: List["ItemParam"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MiracleRingDeliverItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gadget_entity_id: int = betterproto.uint32_field(2)
    interact_type: "InteractType" = betterproto.enum_field(3)
    op_type: "InterOpType" = betterproto.enum_field(4)
    gadget_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class MiracleRingDestroyNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MiracleRingDropResultNotify(betterproto.Message):
    drop_result: int = betterproto.int32_field(1)
    last_take_reward_time: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class MiracleRingTakeRewardReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    gadget_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MiracleRingTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class MistTrialActivityDetailInfo(betterproto.Message):
    trial_level_data_list: List["MistTrialLevelData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MistTrialDunegonFailNotify(betterproto.Message):
    dungeon_id: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class MistTrialGetChallengeMissionReq(betterproto.Message):
    trial_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MistTrialGetChallengeMissionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    trial_id: int = betterproto.uint32_field(2)
    mission_info_list: List["MistTrialMissionInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MistTrialLevelData(betterproto.Message):
    level_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)
    open_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MistTrialMissionInfo(betterproto.Message):
    watcher_list_id: int = betterproto.uint32_field(1)
    param: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MistTrialSelectAvatarAndEnterDungeonReq(betterproto.Message):
    select_trial_avatar_id_list: List[int] = betterproto.uint32_field(1)
    trial_id: int = betterproto.uint32_field(2)
    enter_point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MistTrialSelectAvatarAndEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    trial_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ModifierDurability(betterproto.Message):
    reduce_ratio: float = betterproto.float_field(1)
    remaining_durability: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class ModifierProperty(betterproto.Message):
    key: "AbilityString" = betterproto.message_field(1)
    value: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class MonsterAiConfigHashNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    hash_value: int = betterproto.int32_field(2)
    job_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MonsterAlertChangeNotify(betterproto.Message):
    avatar_entity_id: int = betterproto.uint32_field(2)
    is_alert: int = betterproto.uint32_field(3)
    monster_entity_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MonsterForceAlertNotify(betterproto.Message):
    monster_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MonsterPointArrayRouteUpdateNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    monster_route: "MonsterRoute" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MonsterRoute(betterproto.Message):
    route_points: List["RoutePoint"] = betterproto.message_field(1)
    speed_level: int = betterproto.uint32_field(2)
    route_type: int = betterproto.uint32_field(3)
    arrive_range: float = betterproto.float_field(4)


@dataclass(eq=False, repr=False)
class MonsterSummonTagNotify(betterproto.Message):
    monster_entity_id: int = betterproto.uint32_field(1)
    summon_tag_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class MoonfinTrialActivityDetailInfo(betterproto.Message):
    level_info_map: Dict[int, "MoonfinTrialLevelInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    special_fish_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MoonfinTrialLevelInfo(betterproto.Message):
    best_record: int = betterproto.uint32_field(1)
    open_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MotionInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)
    speed: "Vector" = betterproto.message_field(3)
    state: "MotionState" = betterproto.enum_field(4)
    params: List["Vector"] = betterproto.message_field(5)
    ref_pos: "Vector" = betterproto.message_field(6)
    ref_id: int = betterproto.uint32_field(7)
    scene_time: int = betterproto.uint32_field(8)
    interval_velocity: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class MpBlockNotify(betterproto.Message):
    end_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MpLevelEntityInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    authority_peer_id: int = betterproto.uint32_field(2)
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MpPlayGuestReplyInviteReq(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    is_agree: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MpPlayGuestReplyInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mp_play_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MpPlayGuestReplyNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class MpPlayInviteResultNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    all_argee: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MpPlayOwnerCheckReq(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    is_skip_match: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MpPlayOwnerCheckRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mp_play_id: int = betterproto.uint32_field(2)
    wrong_uid: int = betterproto.uint32_field(3)
    is_skip_match: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class MpPlayOwnerInviteNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    cd: int = betterproto.uint32_field(2)
    is_remain_reward: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class MpPlayOwnerStartInviteReq(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    is_skip_match: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class MpPlayOwnerStartInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mp_play_id: int = betterproto.uint32_field(2)
    is_skip_match: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class MpPlayPrepareInterruptNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MpPlayPrepareNotify(betterproto.Message):
    mp_play_id: int = betterproto.uint32_field(1)
    prepare_end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MpPlayRewardInfo(betterproto.Message):
    resin: int = betterproto.uint32_field(1)
    remain_uid_list: List[int] = betterproto.uint32_field(2)
    qualify_uid_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MsgParam(betterproto.Message):
    int_param: int = betterproto.uint32_field(1, group="Param")
    flt_param: float = betterproto.float_field(2, group="Param")
    str_param: str = betterproto.string_field(3, group="Param")


@dataclass(eq=False, repr=False)
class MultistagePlayEndNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MultistagePlayFinishStageReq(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MultistagePlayFinishStageRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    play_index: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MultistagePlayInfoNotify(betterproto.Message):
    info: "MultistagePlayInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MultistagePlayInfo(betterproto.Message):
    mechanicus_info: "InBattleMechanicusInfo" = betterproto.message_field(
        101, group="Detail"
    )
    fleur_fair_info: "InBattleFleurFairInfo" = betterproto.message_field(
        102, group="Detail"
    )
    hide_and_seek_info: "HideAndSeekStageInfo" = betterproto.message_field(
        103, group="Detail"
    )
    chess_info: "InBattleChessInfo" = betterproto.message_field(104, group="Detail")
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    stage_index: int = betterproto.uint32_field(3)
    stage_type: int = betterproto.uint32_field(4)
    begin_time: int = betterproto.uint32_field(5)
    duration: int = betterproto.uint32_field(6)
    play_type: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MultistagePlaySettleNotify(betterproto.Message):
    mechanicus_settle_info: "InBattleMechanicusSettleInfo" = betterproto.message_field(
        101, group="Detail"
    )
    chess_settle_info: "InBattleChessSettleInfo" = betterproto.message_field(
        102, group="Detail"
    )
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MultistagePlayStageEndNotify(betterproto.Message):
    play_index: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MultistageSettleWatcherInfo(betterproto.Message):
    watcher_id: int = betterproto.uint32_field(1)
    cur_progress: int = betterproto.uint32_field(2)
    total_progress: int = betterproto.uint32_field(3)
    is_inverse: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class MusicGameActivityDetailInfo(betterproto.Message):
    music_game_record_map: Dict[int, "MusicGameRecord"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class MusicGameRecord(betterproto.Message):
    max_score: int = betterproto.uint32_field(1)
    max_combo: int = betterproto.uint32_field(2)
    is_unlock: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class MusicGameSettleReq(betterproto.Message):
    music_basic_id: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)
    combo: int = betterproto.uint32_field(3)
    correct_hit: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MusicGameSettleRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    music_basic_id: int = betterproto.uint32_field(2)
    is_unlock_next_level: bool = betterproto.bool_field(3)
    is_new_record: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class MusicGameStartReq(betterproto.Message):
    music_basic_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MusicGameStartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    music_basic_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NavMeshStatsNotify(betterproto.Message):
    infos: List["PbNavMeshStatsInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NormalUidOpNotify(betterproto.Message):
    param_index: int = betterproto.uint32_field(1)
    param_list: List[int] = betterproto.uint32_field(2)
    param_uid_list: List[int] = betterproto.uint32_field(3)
    duration: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class NpcPositionInfo(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NpcTalkReq(betterproto.Message):
    npc_entity_id: int = betterproto.uint32_field(1)
    talk_id: int = betterproto.uint32_field(3)
    entity_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class NpcTalkRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    npc_entity_id: int = betterproto.uint32_field(2)
    cur_talk_id: int = betterproto.uint32_field(4)
    entity_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ObstacleInfo(betterproto.Message):
    obstacle_id: int = betterproto.int32_field(1)
    shape: "ObstacleInfoShapeType" = betterproto.enum_field(2)
    center: "Vector" = betterproto.message_field(3)
    rotation: "MathQuaternion" = betterproto.message_field(4)
    extents: "Vector3Int" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ObstacleModifyNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    add_obstacles: List["ObstacleInfo"] = betterproto.message_field(2)
    remove_obstacle_ids: List[int] = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class OfferingInfo(betterproto.Message):
    offering_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class OfferingInteractReq(betterproto.Message):
    offering_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class OfferingInteractRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    offering_data: "PlayerOfferingData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class OneoffGatherPointDetectorDataNotify(betterproto.Message):
    oneoff_gather_point_detector_data_list: List[
        "OneoffGatherPointDetectorData"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class OneoffGatherPointDetectorData(betterproto.Message):
    material_id: int = betterproto.uint32_field(1)
    is_all_collected: bool = betterproto.bool_field(2)
    is_hint_valid: bool = betterproto.bool_field(3)
    hint_center_pos: "Vector" = betterproto.message_field(4)
    hint_radius: int = betterproto.uint32_field(5)
    group_id: int = betterproto.uint32_field(6)
    config_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class OnlinePlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    player_level: int = betterproto.uint32_field(3)
    avatar_id: int = betterproto.uint32_field(4)
    mp_setting_type: "MpSettingType" = betterproto.enum_field(5)
    cur_player_num_in_world: int = betterproto.uint32_field(6)
    world_level: int = betterproto.uint32_field(7)
    online_id: str = betterproto.string_field(8)
    name_card_id: int = betterproto.uint32_field(9)
    blacklist_uid_list: List[int] = betterproto.uint32_field(10)
    signature: str = betterproto.string_field(11)
    profile_picture: "ProfilePicture" = betterproto.message_field(12)
    psn_id: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class OpActivityDataNotify(betterproto.Message):
    op_activity_info_list: List["OpActivityInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class OpActivityInfo(betterproto.Message):
    bonus_info: "BonusOpActivityInfo" = betterproto.message_field(5, group="Detail")
    activity_id: int = betterproto.uint32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    begin_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    is_has_change: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class OpActivityStateNotify(betterproto.Message):
    opened_op_activity_info_list: List[
        "OpActivityTagBriefInfo"
    ] = betterproto.message_field(1)
    finished_bonus_activity_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class OpActivityTagBriefInfo(betterproto.Message):
    op_activity_type: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    has_reward: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class OpActivityUpdateNotify(betterproto.Message):
    op_activity_info: "OpActivityInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class OpenBlossomCircleCampGuideNotify(betterproto.Message):
    refresh_id: int = betterproto.uint32_field(1)
    circle_camp_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class OpenStateChangeNotify(betterproto.Message):
    open_state_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class OpenStateUpdateNotify(betterproto.Message):
    open_state_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class OrderDisplayNotify(betterproto.Message):
    order_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class OrderFinishNotify(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    add_mcoin: int = betterproto.uint32_field(2)
    card_product_remain_days: int = betterproto.uint32_field(3)
    order_id: int = betterproto.uint32_field(4)
    item_list: List["ItemParam"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class OtherPlayerEnterHomeNotify(betterproto.Message):
    nickname: str = betterproto.string_field(1)
    reason: "OtherPlayerEnterHomeNotifyReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class PacketHead(betterproto.Message):
    packet_id: int = betterproto.uint32_field(1)
    rpc_id: int = betterproto.uint32_field(2)
    client_sequence_id: int = betterproto.uint32_field(3)
    enet_channel_id: int = betterproto.uint32_field(4)
    enet_is_reliable: int = betterproto.uint32_field(5)
    sent_ms: int = betterproto.uint64_field(6)
    user_id: int = betterproto.uint32_field(11)
    user_ip: int = betterproto.uint32_field(12)
    user_session_id: int = betterproto.uint32_field(13)
    recv_time_ms: int = betterproto.uint64_field(21)
    rpc_begin_time_ms: int = betterproto.uint32_field(22)
    ext_map: Dict[int, int] = betterproto.map_field(
        23, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    sender_app_id: int = betterproto.uint32_field(24)
    source_service: int = betterproto.uint32_field(31)
    target_service: int = betterproto.uint32_field(32)
    service_app_id_map: Dict[int, int] = betterproto.map_field(
        33, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_set_game_thread: bool = betterproto.bool_field(34)
    game_thread_index: int = betterproto.uint32_field(35)


@dataclass(eq=False, repr=False)
class ParamList(betterproto.Message):
    param_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ParentQuest(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(1)
    child_quest_list: List["ChildQuest"] = betterproto.message_field(2)
    is_finished: bool = betterproto.bool_field(3)
    is_random: bool = betterproto.bool_field(4)
    random_info: "ParentQuestRandomInfo" = betterproto.message_field(5)
    quest_var: List[int] = betterproto.int32_field(6)
    parent_quest_state: int = betterproto.uint32_field(7)
    quest_var_seq: int = betterproto.uint32_field(8)
    time_var_map: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class ParentQuestRandomInfo(betterproto.Message):
    entrance_id: int = betterproto.uint32_field(1)
    template_id: int = betterproto.uint32_field(2)
    factor_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ParkourLevelInfo(betterproto.Message):
    open_time: int = betterproto.uint32_field(1)
    best_record: int = betterproto.uint32_field(2)
    is_open: bool = betterproto.bool_field(3)
    pos: "Vector" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PathfindingEnterSceneReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    version: int = betterproto.uint32_field(2)
    obstacles: List["ObstacleInfo"] = betterproto.message_field(3)
    is_editor: bool = betterproto.bool_field(4)
    activity_id: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PathfindingEnterSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PathfindingPingNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PbNavMeshPoly(betterproto.Message):
    vects: List[int] = betterproto.int32_field(1)
    edge_types: List["PbNavMeshPolyEdgeType"] = betterproto.enum_field(2)
    area: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class PbNavMeshStatsInfo(betterproto.Message):
    total_authority_ai: int = betterproto.int32_field(1)
    total_no_authority_ai: int = betterproto.int32_field(2)
    authority_ai_in_combat: int = betterproto.int32_field(3)
    no_authority_ai_in_combat: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class PbNavMeshTile(betterproto.Message):
    vecs: List["Vector"] = betterproto.message_field(1)
    polys: List["PbNavMeshPoly"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PersonalLineAllDataReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PersonalLineAllDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cur_finished_daily_task_count: int = betterproto.uint32_field(2)
    legendary_key_count: int = betterproto.uint32_field(3)
    ongoing_personal_line_list: List[int] = betterproto.uint32_field(4)
    can_be_unlocked_personal_line_list: List[int] = betterproto.uint32_field(5)
    locked_personal_line_list: List[
        "LockedPersonallineData"
    ] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class PersonalLineNewUnlockNotify(betterproto.Message):
    personal_line_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PersonalSceneJumpReq(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PersonalSceneJumpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    dest_scene_id: int = betterproto.uint32_field(2)
    dest_pos: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PingReq(betterproto.Message):
    seq: int = betterproto.uint32_field(1)
    client_time: int = betterproto.uint32_field(2)
    sc_data: bytes = betterproto.bytes_field(3)
    ue_time: float = betterproto.float_field(4)
    total_tick_time: float = betterproto.double_field(5)


@dataclass(eq=False, repr=False)
class PingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    seq: int = betterproto.uint32_field(2)
    client_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlaceInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptAllGiveFlowerReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptAllGiveFlowerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    accept_flower_result_info_list: List[
        "PlantFlowerAcceptFlowerResultInfo"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptFlowerResultInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    accept_flower_num_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    unaccept_flower_num_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptGiveFlowerReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlantFlowerAcceptGiveFlowerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    accept_flower_result_info: "PlantFlowerAcceptFlowerResultInfo" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class PlantFlowerActivityDetailInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)
    today_seed_reward_id: int = betterproto.uint32_field(2)
    is_today_has_awarded: bool = betterproto.bool_field(3)
    is_content_closed: bool = betterproto.bool_field(4)
    wish_flower_num_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    used_flower_num_map: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerEditFlowerCombinationReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    flower_combination_info: "CustomGadgetTreeInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PlantFlowerEditFlowerCombinationRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlantFlowerFriendFlowerWishData(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    profile_picture: "ProfilePicture" = betterproto.message_field(2)
    nickname: str = betterproto.string_field(3)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerGetCanGiveFriendFlowerReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlantFlowerGetCanGiveFriendFlowerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerGetFriendFlowerWishListReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlantFlowerGetFriendFlowerWishListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    friend_flower_wish_list: List[
        "PlantFlowerFriendFlowerWishData"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PlantFlowerGetRecvFlowerListReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlantFlowerGetRecvFlowerListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    recv_flower_list: List["PlantFlowerRecvFlowerData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PlantFlowerGetSeedInfoReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlantFlowerGetSeedInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    seed_reward_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlantFlowerGiveFriendFlowerReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerGiveFriendFlowerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    limit_flower_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlantFlowerHaveRecvFlowerNotify(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlantFlowerRecvFlowerData(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    profile_picture: "ProfilePicture" = betterproto.message_field(2)
    nickname: str = betterproto.string_field(3)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerSetFlowerWishReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    flower_num_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class PlantFlowerSetFlowerWishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlantFlowerTakeSeedRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlantFlowerTakeSeedRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlatformChangeRouteNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    platform: "PlatformInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlatformInfo(betterproto.Message):
    route_id: int = betterproto.uint32_field(1)
    start_index: int = betterproto.int32_field(2)
    start_route_time: int = betterproto.uint32_field(3)
    start_scene_time: int = betterproto.uint32_field(4)
    start_pos: "Vector" = betterproto.message_field(7)
    is_started: bool = betterproto.bool_field(8)
    start_rot: "MathQuaternion" = betterproto.message_field(9)
    stop_scene_time: int = betterproto.uint32_field(10)
    pos_offset: "Vector" = betterproto.message_field(11)
    rot_offset: "MathQuaternion" = betterproto.message_field(12)
    moving_platform_type: "MovingPlatformType" = betterproto.enum_field(13)
    is_active: bool = betterproto.bool_field(14)
    route: "Route" = betterproto.message_field(15)
    point_id: int = betterproto.uint32_field(16)


@dataclass(eq=False, repr=False)
class PlatformStartRouteNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    platform: "PlatformInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlatformStopRouteNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    scene_time: int = betterproto.uint32_field(2)
    platform: "PlatformInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PlayerAllowEnterMpAfterAgreeMatchNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeNotify(betterproto.Message):
    src_player_info: "OnlinePlayerInfo" = betterproto.message_field(1)
    src_app_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeResultNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    is_agreed: bool = betterproto.bool_field(2)
    reason: "PlayerApplyEnterHomeResultNotifyReason" = betterproto.enum_field(3)
    target_nickname: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeResultReq(betterproto.Message):
    apply_uid: int = betterproto.uint32_field(1)
    is_agreed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterHomeResultRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    apply_uid: int = betterproto.uint32_field(2)
    is_agreed: bool = betterproto.bool_field(3)
    param: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpAfterMatchAgreedNotify(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(1)
    src_player_info: "OnlinePlayerInfo" = betterproto.message_field(2)
    matchserver_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpNotify(betterproto.Message):
    src_player_info: "OnlinePlayerInfo" = betterproto.message_field(1)
    src_app_id: int = betterproto.uint32_field(2)
    src_thread_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpResultNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    is_agreed: bool = betterproto.bool_field(2)
    reason: "PlayerApplyEnterMpResultNotifyReason" = betterproto.enum_field(3)
    target_nickname: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpResultReq(betterproto.Message):
    apply_uid: int = betterproto.uint32_field(1)
    is_agreed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpResultRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    apply_uid: int = betterproto.uint32_field(2)
    is_agreed: bool = betterproto.bool_field(3)
    param: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerApplyEnterMpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)
    param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerCancelMatchReq(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class PlayerCancelMatchRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    match_type: "MatchType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class PlayerChatCdNotify(betterproto.Message):
    over_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerChatNotify(betterproto.Message):
    channel_id: int = betterproto.uint32_field(1)
    chat_info: "ChatInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerChatReq(betterproto.Message):
    channel_id: int = betterproto.uint32_field(1)
    chat_info: "ChatInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerChatRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chat_forbidden_endtime: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerCompoundMaterialReq(betterproto.Message):
    compound_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerCompoundMaterialRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    compound_que_data: "CompoundQueueData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerConfirmMatchReq(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(1)
    is_agreed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerConfirmMatchRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    match_type: "MatchType" = betterproto.enum_field(2)
    is_agreed: bool = betterproto.bool_field(3)
    match_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerCookArgsReq(betterproto.Message):
    recipe_id: int = betterproto.uint32_field(1)
    assist_avatar: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerCookArgsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    qte_range_ratio: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class PlayerCookReq(betterproto.Message):
    recipe_id: int = betterproto.uint32_field(1)
    qte_quality: int = betterproto.uint32_field(2)
    assist_avatar: int = betterproto.uint32_field(3)
    cook_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerCookRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    recipe_data: "CookRecipeData" = betterproto.message_field(2)
    item_list: List["ItemParam"] = betterproto.message_field(3)
    qte_quality: int = betterproto.uint32_field(4)
    cook_count: int = betterproto.uint32_field(5)
    extral_item_list: List["ItemParam"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class PlayerDataNotify(betterproto.Message):
    nick_name: str = betterproto.string_field(1)
    server_time: int = betterproto.uint64_field(2)
    is_first_login_today: bool = betterproto.bool_field(3)
    region_id: int = betterproto.uint32_field(4)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class PlayerEnterDungeonReq(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    point_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerEnterSceneInfoNotify(betterproto.Message):
    cur_avatar_entity_id: int = betterproto.uint32_field(1)
    avatar_enter_info: List["AvatarEnterSceneInfo"] = betterproto.message_field(2)
    team_enter_info: "TeamEnterSceneInfo" = betterproto.message_field(3)
    mp_level_entity_info: "MpLevelEntityInfo" = betterproto.message_field(4)
    enter_scene_token: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class PlayerEnterSceneNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    scene_begin_time: int = betterproto.uint64_field(3)
    type: "EnterType" = betterproto.enum_field(4)
    target_uid: int = betterproto.uint32_field(6)
    prev_scene_id: int = betterproto.uint32_field(9)
    prev_pos: "Vector" = betterproto.message_field(10)
    dungeon_id: int = betterproto.uint32_field(11)
    world_level: int = betterproto.uint32_field(12)
    enter_scene_token: int = betterproto.uint32_field(13)
    is_first_login_enter_scene: bool = betterproto.bool_field(14)
    scene_tag_id_list: List[int] = betterproto.uint32_field(15)
    is_skip_ui: bool = betterproto.bool_field(16)
    enter_reason: int = betterproto.uint32_field(17)
    world_type: int = betterproto.uint32_field(18)
    scene_transaction: str = betterproto.string_field(19)


@dataclass(eq=False, repr=False)
class PlayerEyePointStateNotify(betterproto.Message):
    sphere_radius: float = betterproto.float_field(100, group="RegionSize")
    cubic_size: "Vector" = betterproto.message_field(101, group="RegionSize")
    cylinder_size: "CylinderRegionSize" = betterproto.message_field(
        102, group="RegionSize"
    )
    polygon_size: "PolygonRegionSize" = betterproto.message_field(
        103, group="RegionSize"
    )
    is_use_eye_point: bool = betterproto.bool_field(1)
    eye_point_pos: "Vector" = betterproto.message_field(2)
    region_entity_id: int = betterproto.uint32_field(3)
    region_group_id: int = betterproto.uint32_field(4)
    region_config_id: int = betterproto.uint32_field(5)
    region_shape: int = betterproto.uint32_field(6)
    is_filter_stream_pos: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class PlayerFishingDataNotify(betterproto.Message):
    last_fish_rod_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerForceExitReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PlayerForceExitRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PlayerGameTimeNotify(betterproto.Message):
    game_time: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)
    is_home: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PlayerGeneralMatchConfirmNotify(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PlayerGeneralMatchDismissNotify(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)
    reason: "MatchReason" = betterproto.enum_field(2)
    uid_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerGetForceQuitBanInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PlayerGetForceQuitBanInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    match_id: int = betterproto.uint32_field(2)
    expire_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerHomeCompInfoNotify(betterproto.Message):
    comp_info: "PlayerHomeCompInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PlayerHomeCompInfo(betterproto.Message):
    friend_enter_home_option: "FriendEnterHomeOption" = betterproto.enum_field(1)
    unlocked_module_id_list: List[int] = betterproto.uint32_field(2)
    levelup_reward_got_level_list: List[int] = betterproto.uint32_field(3)
    seen_module_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PlayerInjectFixNotify(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    inject_fix: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class PlayerInvestigationAllInfoNotify(betterproto.Message):
    investigation_list: List["Investigation"] = betterproto.message_field(1)
    investigation_target_list: List["InvestigationTarget"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class PlayerInvestigationNotify(betterproto.Message):
    investigation_list: List["Investigation"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PlayerInvestigationTargetNotify(betterproto.Message):
    investigation_target_list: List["InvestigationTarget"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class PlayerLevelRewardUpdateNotify(betterproto.Message):
    level_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerLocationInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PlayerLoginReq(betterproto.Message):
    token: str = betterproto.string_field(1)
    client_version: str = betterproto.string_field(2)
    system_version: str = betterproto.string_field(3)
    device_name: str = betterproto.string_field(4)
    device_uuid: str = betterproto.string_field(5)
    target_uid: int = betterproto.uint32_field(6)
    login_rand: int = betterproto.uint64_field(7)
    is_editor: bool = betterproto.bool_field(8)
    language_type: int = betterproto.uint32_field(9)
    account_type: int = betterproto.uint32_field(10)
    account_uid: str = betterproto.string_field(11)
    platform: str = betterproto.string_field(12)
    device_info: str = betterproto.string_field(13)
    platform_type: int = betterproto.uint32_field(14)
    is_guest: bool = betterproto.bool_field(15)
    cloud_client_ip: int = betterproto.uint32_field(16)
    gm_uid: int = betterproto.uint32_field(17)
    checksum: str = betterproto.string_field(18)
    online_id: str = betterproto.string_field(19)
    client_token: int = betterproto.uint32_field(20)
    security_cmd_reply: bytes = betterproto.bytes_field(21)
    extra_bin_data: bytes = betterproto.bytes_field(22)
    cps: str = betterproto.string_field(23)
    channel_id: int = betterproto.uint32_field(24)
    sub_channel_id: int = betterproto.uint32_field(25)
    checksum_client_version: str = betterproto.string_field(26)
    tag: int = betterproto.uint32_field(27)
    tracking_io_info: "TrackingIoInfo" = betterproto.message_field(28)
    country_code: str = betterproto.string_field(29)
    client_data_version: int = betterproto.uint32_field(30)
    environment_error_code: bytes = betterproto.bytes_field(31)
    target_home_owner_uid: int = betterproto.uint32_field(32)
    psn_id: str = betterproto.string_field(33)
    client_verison_hash: str = betterproto.string_field(34)
    is_transfer: bool = betterproto.bool_field(35)
    reg_platform: int = betterproto.uint32_field(36)
    target_home_param: int = betterproto.uint32_field(37)
    adjust_tracking_info: "AdjustTrackingInfo" = betterproto.message_field(38)


@dataclass(eq=False, repr=False)
class PlayerLoginRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    player_data: bytes = betterproto.bytes_field(2)
    is_new_player: bool = betterproto.bool_field(3)
    target_uid: int = betterproto.uint32_field(4)
    login_rand: int = betterproto.uint64_field(5)
    is_use_ability_hash: bool = betterproto.bool_field(6)
    ability_hash_code: int = betterproto.int32_field(7)
    ability_hash_map: Dict[str, int] = betterproto.map_field(
        8, betterproto.TYPE_STRING, betterproto.TYPE_INT32
    )
    client_data_version: int = betterproto.uint32_field(9)
    is_relogin: bool = betterproto.bool_field(11)
    client_silence_data_version: int = betterproto.uint32_field(13)
    game_biz: str = betterproto.string_field(14)
    player_data_version: int = betterproto.uint32_field(15)
    client_md5: str = betterproto.string_field(16)
    client_silence_md5: str = betterproto.string_field(17)
    res_version_config: "ResVersionConfig" = betterproto.message_field(20)
    block_info_map: Dict[int, "BlockInfo"] = betterproto.map_field(
        21, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    client_version_suffix: str = betterproto.string_field(24)
    client_silence_version_suffix: str = betterproto.string_field(25)
    short_ability_hash_map: List["ShortAbilityHashPair"] = betterproto.message_field(27)
    sc_info: bytes = betterproto.bytes_field(28)
    is_audit: bool = betterproto.bool_field(29)
    is_sc_open: bool = betterproto.bool_field(30)
    register_cps: str = betterproto.string_field(31)
    feature_block_info_list: List["FeatureBlockInfo"] = betterproto.message_field(32)
    is_data_need_relogin: bool = betterproto.bool_field(33)
    country_code: str = betterproto.string_field(34)
    next_res_version_config: "ResVersionConfig" = betterproto.message_field(35)
    next_resource_url: str = betterproto.string_field(36)
    target_home_owner_uid: int = betterproto.uint32_field(37)
    is_enable_client_hash_debug: bool = betterproto.bool_field(38)
    is_transfer: bool = betterproto.bool_field(39)
    total_tick_time: float = betterproto.double_field(40)


@dataclass(eq=False, repr=False)
class PlayerLogoutNotify(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PlayerLogoutReq(betterproto.Message):
    reason: "PlayerLogoutReqReason" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class PlayerLogoutRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PlayerLuaShellNotify(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    lua_shell: bytes = betterproto.bytes_field(2)
    use_type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerMatchAgreedResultNotify(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    reason: "PlayerMatchAgreedResultNotifyReason" = betterproto.enum_field(2)
    match_type: "MatchType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class PlayerMatchInfoNotify(betterproto.Message):
    host_uid: int = betterproto.uint32_field(1)
    match_type: "MatchType" = betterproto.enum_field(2)
    match_begin_time: int = betterproto.uint32_field(3)
    estimate_match_cost_time: int = betterproto.uint32_field(4)
    dungeon_id: int = betterproto.uint32_field(11)
    mp_play_id: int = betterproto.uint32_field(12)
    mechanicus_difficult_level: int = betterproto.uint32_field(13)
    match_id: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class PlayerMatchStopNotify(betterproto.Message):
    host_uid: int = betterproto.uint32_field(1)
    reason: "MatchReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class PlayerMatchSuccNotify(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(1)
    confirm_end_time: int = betterproto.uint32_field(2)
    host_uid: int = betterproto.uint32_field(3)
    dungeon_id: int = betterproto.uint32_field(11)
    mp_play_id: int = betterproto.uint32_field(12)
    mechanicus_difficult_level: int = betterproto.uint32_field(13)
    general_match_info: "GeneralMatchInfo" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class PlayerOfferingDataNotify(betterproto.Message):
    offering_data_list: List["PlayerOfferingData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PlayerOfferingData(betterproto.Message):
    offering_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    taken_level_reward_list: List[int] = betterproto.uint32_field(3)
    is_new_max_level: bool = betterproto.bool_field(4)
    is_first_interact: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class PlayerOfferingReq(betterproto.Message):
    offering_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerOfferingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    offering_data: "PlayerOfferingData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerPreEnterMpNotify(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    state: "PlayerPreEnterMpNotifyState" = betterproto.enum_field(2)
    nickname: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PlayerPropChangeNotify(betterproto.Message):
    prop_type: int = betterproto.uint32_field(1)
    prop_delta: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerPropChangeReasonNotify(betterproto.Message):
    prop_type: int = betterproto.uint32_field(1)
    old_value: float = betterproto.float_field(2)
    cur_value: float = betterproto.float_field(3)
    reason: "PropChangeReason" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class PlayerPropNotify(betterproto.Message):
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class PlayerQuitDungeonReq(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)
    is_quit_immediately: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerQuitDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerQuitFromHomeNotify(betterproto.Message):
    reason: "PlayerQuitFromHomeNotifyQuitReason" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class PlayerQuitFromMpNotify(betterproto.Message):
    reason: "PlayerQuitFromMpNotifyQuitReason" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class PlayerRandomCookReq(betterproto.Message):
    material_list: List["ItemParam"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PlayerRandomCookRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PlayerRechargeDataNotify(betterproto.Message):
    card_product_remain_days: int = betterproto.uint32_field(1)
    product_price_tier_list: List["ProductPriceTier"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerReportReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    reason: "ReportReasonType" = betterproto.enum_field(2)
    content: str = betterproto.string_field(3)
    target_home_module_id: int = betterproto.uint32_field(4)
    target_home_module_name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PlayerReportRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)
    cd_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerRoutineDataNotify(betterproto.Message):
    routine_info_list: List["PlayerRoutineInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PlayerRoutineInfo(betterproto.Message):
    routine_type: int = betterproto.uint32_field(1)
    finished_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerRTTInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    rtt: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetLanguageReq(betterproto.Message):
    language_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetLanguageRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetOnlyMpWithPsPlayerReq(betterproto.Message):
    is_only: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetOnlyMpWithPsPlayerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_only: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PlayerSetPauseReq(betterproto.Message):
    is_paused: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class PlayerSetPauseRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PlayerStartMatchReq(betterproto.Message):
    match_type: "MatchType" = betterproto.enum_field(1)
    dungeon_id: int = betterproto.uint32_field(11)
    mp_play_id: int = betterproto.uint32_field(12)
    mechanicus_difficult_level: int = betterproto.uint32_field(13)
    match_id: int = betterproto.uint32_field(14)
    match_param_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PlayerStartMatchRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    match_type: "MatchType" = betterproto.enum_field(2)
    param: int = betterproto.uint32_field(3)
    dungeon_id: int = betterproto.uint32_field(11)
    mp_play_id: int = betterproto.uint32_field(12)
    mechanicus_difficult_level: int = betterproto.uint32_field(13)
    match_id: int = betterproto.uint32_field(14)
    punish_end_time: int = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class PlayerStoreNotify(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(1)
    item_list: List["Item"] = betterproto.message_field(2)
    weight_limit: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerTimeNotify(betterproto.Message):
    is_paused: bool = betterproto.bool_field(1)
    player_time: int = betterproto.uint64_field(2)
    server_time: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class PlayerUidExtInfo(betterproto.Message):
    reg_platform: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerWorldLocationInfo(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    player_loc: "PlayerLocationInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlayerWorldSceneInfoListNotify(betterproto.Message):
    info_list: List["PlayerWorldSceneInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PlayerWorldSceneInfo(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    is_locked: bool = betterproto.bool_field(2)
    scene_tag_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayProduct(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    schedule_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayTeamEntityInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    player_uid: int = betterproto.uint32_field(2)
    authority_peer_id: int = betterproto.uint32_field(3)
    gadget_config_id: int = betterproto.uint32_field(5)
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class PolygonRegionSize(betterproto.Message):
    point_list: List["VectorPlane"] = betterproto.message_field(1)
    height: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class PostEnterSceneReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PostEnterSceneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    enter_scene_token: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PrivateChatNotify(betterproto.Message):
    chat_info: "ChatInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PrivateChatReq(betterproto.Message):
    text: str = betterproto.string_field(2, group="Content")
    icon: int = betterproto.uint32_field(3, group="Content")
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PrivateChatRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chat_forbidden_endtime: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PrivateChatSetSequenceReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    sequence: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PrivateChatSetSequenceRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ProductPriceTier(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ProfilePictureChangeNotify(betterproto.Message):
    profile_picture: "ProfilePicture" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ProfilePicture(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    costume_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ProjectorOptionReq(betterproto.Message):
    op_type: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ProjectorOptionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    op_type: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PropPair(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    prop_value: "PropValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PropValue(betterproto.Message):
    ival: int = betterproto.int64_field(2, group="Value")
    fval: float = betterproto.float_field(3, group="Value")
    type: int = betterproto.uint32_field(1)
    val: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class ProudSkillChangeNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    entity_id: int = betterproto.uint32_field(2)
    skill_depot_id: int = betterproto.uint32_field(3)
    proud_skill_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ProudSkillExtraLevelNotify(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    talent_type: int = betterproto.uint32_field(2)
    talent_index: int = betterproto.uint32_field(3)
    extra_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ProudSkillUpgradeReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    proud_skill_id: int = betterproto.uint32_field(2)
    old_proud_skill_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ProudSkillUpgradeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    proud_skill_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PsnBlackListNotify(betterproto.Message):
    psn_blacklist: List["FriendBrief"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PsnFriendListNotify(betterproto.Message):
    psn_friend_list: List["FriendBrief"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PsPlayerApplyEnterMpReq(betterproto.Message):
    target_psn_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PsPlayerApplyEnterMpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_psn_id: str = betterproto.string_field(2)
    param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PullPrivateChatReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    from_sequence: int = betterproto.uint32_field(2)
    pull_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PullPrivateChatRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chat_info: List["ChatInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PullRecentChatReq(betterproto.Message):
    begin_sequence: int = betterproto.uint32_field(1)
    pull_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PullRecentChatRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chat_info: List["ChatInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PushTipsAllDataNotify(betterproto.Message):
    push_tips_list: List["PushTipsData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PushTipsChangeNotify(betterproto.Message):
    push_tips_list: List["PushTipsData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PushTipsData(betterproto.Message):
    push_tips_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PushTipsReadFinishReq(betterproto.Message):
    push_tips_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PushTipsReadFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    push_tips_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class QueryCodexMonsterBeKilledNumReq(betterproto.Message):
    codex_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QueryCodexMonsterBeKilledNumRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    codex_id_list: List[int] = betterproto.uint32_field(2)
    be_killed_num_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class QueryCurrRegionHttpRsp(betterproto.Message):
    force_udpate: "ForceUpdateInfo" = betterproto.message_field(4, group="Detail")
    stop_server: "StopServerInfo" = betterproto.message_field(5, group="Detail")
    retcode: int = betterproto.int32_field(1)
    msg: str = betterproto.string_field(2)
    region_info: "RegionInfo" = betterproto.message_field(3)
    client_secret_key: bytes = betterproto.bytes_field(11)
    region_custom_config_encrypted: bytes = betterproto.bytes_field(12)
    client_region_custom_config_encrypted: bytes = betterproto.bytes_field(13)


@dataclass(eq=False, repr=False)
class QueryFilter(betterproto.Message):
    type_id: int = betterproto.int32_field(1)
    area_mask: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class QueryPathReq(betterproto.Message):
    query_type: "QueryPathReqOptionType" = betterproto.enum_field(1)
    query_id: int = betterproto.int32_field(2)
    scene_id: int = betterproto.uint32_field(3)
    source_pos: "Vector" = betterproto.message_field(4)
    destination_pos: List["Vector"] = betterproto.message_field(5)
    filter: "QueryFilter" = betterproto.message_field(6)
    destination_extend: "Vector3Int" = betterproto.message_field(7)
    source_extend: "Vector3Int" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class QueryPathRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    query_id: int = betterproto.int32_field(2)
    query_status: "QueryPathRspPathStatusType" = betterproto.enum_field(3)
    corners: List["Vector"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class QueryRegionListHttpRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    region_list: List["RegionSimpleInfo"] = betterproto.message_field(2)
    client_secret_key: bytes = betterproto.bytes_field(5)
    client_custom_config_encrypted: bytes = betterproto.bytes_field(6)
    enable_login_pc: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class QuestCreateEntityReq(betterproto.Message):
    entity: "CreateEntityInfo" = betterproto.message_field(1)
    quest_id: int = betterproto.uint32_field(2)
    is_rewind: bool = betterproto.bool_field(3)
    parent_quest_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class QuestCreateEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    entity: "CreateEntityInfo" = betterproto.message_field(3)
    quest_id: int = betterproto.uint32_field(7)
    is_rewind: bool = betterproto.bool_field(8)
    parent_quest_id: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class QuestDelNotify(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QuestDestroyEntityReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    quest_id: int = betterproto.uint32_field(2)
    scene_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class QuestDestroyEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    quest_id: int = betterproto.uint32_field(3)
    scene_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class QuestDestroyNpcReq(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)
    parent_quest_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class QuestDestroyNpcRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    npc_id: int = betterproto.uint32_field(2)
    parent_quest_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class QuestGlobalVarNotify(betterproto.Message):
    var_list: List["QuestGlobalVar"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuestGlobalVar(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class QuestListNotify(betterproto.Message):
    quest_list: List["Quest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuestListUpdateNotify(betterproto.Message):
    quest_list: List["Quest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuestProgressUpdateNotify(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    finish_progress_list: List[int] = betterproto.uint32_field(2)
    fail_progress_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class Quest(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    start_time: int = betterproto.uint32_field(4)
    is_random: bool = betterproto.bool_field(5)
    parent_quest_id: int = betterproto.uint32_field(6)
    quest_config_id: int = betterproto.uint32_field(7)
    start_game_time: int = betterproto.uint32_field(8)
    accept_time: int = betterproto.uint32_field(9)
    lacked_npc_list: List[int] = betterproto.uint32_field(10)
    finish_progress_list: List[int] = betterproto.uint32_field(11)
    fail_progress_list: List[int] = betterproto.uint32_field(12)
    lacked_npc_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    lacked_place_list: List[int] = betterproto.uint32_field(14)
    lacked_place_map: Dict[int, int] = betterproto.map_field(
        15, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class QuestTransmitReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class QuestTransmitRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    quest_id: int = betterproto.uint32_field(2)
    point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class QuestUpdateQuestTimeVarNotify(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(1)
    time_var_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class QuestUpdateQuestVarNotify(betterproto.Message):
    parent_quest_id: int = betterproto.uint32_field(1)
    quest_var: List[int] = betterproto.int32_field(2)
    parent_quest_var_seq: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class QuestUpdateQuestVarReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)
    quest_var_op_list: List["QuestVarOp"] = betterproto.message_field(2)
    parent_quest_id: int = betterproto.uint32_field(3)
    parent_quest_var_seq: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class QuestUpdateQuestVarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    quest_id: int = betterproto.uint32_field(2)
    parent_quest_id: int = betterproto.uint32_field(3)
    parent_quest_var_seq: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class QuestVarOp(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    value: int = betterproto.int32_field(2)
    is_add: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class QuickUseWidgetReq(betterproto.Message):
    location_info: "WidgetCreateLocationInfo" = betterproto.message_field(
        20, group="Param"
    )
    camera_info: "WidgetCameraInfo" = betterproto.message_field(21, group="Param")
    creator_info: "WidgetCreatorInfo" = betterproto.message_field(22, group="Param")
    thunder_bird_feather_info: "WidgetThunderBirdFeatherInfo" = (
        betterproto.message_field(23, group="Param")
    )


@dataclass(eq=False, repr=False)
class QuickUseWidgetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    material_id: int = betterproto.uint32_field(2)
    detector_data: "OneoffGatherPointDetectorData" = betterproto.message_field(3)
    client_collector_data: "ClientCollectorData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ReadMailNotify(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReadPrivateChatReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReadPrivateChatRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ReceivedTrialAvatarActivityRewardReq(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReceivedTrialAvatarActivityRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    trial_avatar_index_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RechargeReq(betterproto.Message):
    mcoin_product: "ShopMcoinProduct" = betterproto.message_field(1)
    card_product: "ShopCardProduct" = betterproto.message_field(2)
    play_product: "PlayProduct" = betterproto.message_field(4)
    concert_product: "ShopConcertProduct" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class RechargeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    product_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RedeemLegendaryKeyReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RedeemLegendaryKeyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    legendary_key_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RedPointData(betterproto.Message):
    red_point_type: int = betterproto.uint32_field(1)
    is_show: bool = betterproto.bool_field(2)
    content_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RefreshBackgroundAvatarReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RefreshBackgroundAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    hp_full_time_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT64, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class RefreshRoguelikeDungeonCardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RefreshRoguelikeDungeonCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    res_card_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RegionInfo(betterproto.Message):
    gateserver_ip: str = betterproto.string_field(1)
    gateserver_port: int = betterproto.uint32_field(2)
    pay_callback_url: str = betterproto.string_field(3)
    area_type: str = betterproto.string_field(7)
    resource_url: str = betterproto.string_field(8)
    data_url: str = betterproto.string_field(9)
    feedback_url: str = betterproto.string_field(10)
    bulletin_url: str = betterproto.string_field(11)
    resource_url_bak: str = betterproto.string_field(12)
    data_url_bak: str = betterproto.string_field(13)
    client_data_version: int = betterproto.uint32_field(14)
    handbook_url: str = betterproto.string_field(16)
    client_silence_data_version: int = betterproto.uint32_field(18)
    client_data_md5: str = betterproto.string_field(19)
    client_silence_data_md5: str = betterproto.string_field(20)
    res_version_config: "ResVersionConfig" = betterproto.message_field(22)
    secret_key: bytes = betterproto.bytes_field(23)
    official_community_url: str = betterproto.string_field(24)
    client_version_suffix: str = betterproto.string_field(26)
    client_silence_version_suffix: str = betterproto.string_field(27)
    use_gateserver_domain_name: bool = betterproto.bool_field(28)
    gateserver_domain_name: str = betterproto.string_field(29)
    user_center_url: str = betterproto.string_field(30)
    account_bind_url: str = betterproto.string_field(31)
    cdkey_url: str = betterproto.string_field(32)
    privacy_policy_url: str = betterproto.string_field(33)
    next_resource_url: str = betterproto.string_field(34)
    next_res_version_config: "ResVersionConfig" = betterproto.message_field(35)


@dataclass(eq=False, repr=False)
class RegionSearchChangeRegionNotify(betterproto.Message):
    region_id: int = betterproto.uint32_field(1)
    event: "RegionSearchChangeRegionNotifyRegionEvent" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class RegionSearchInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    region_search_list: List["RegionSearch"] = betterproto.message_field(2)
    is_entered: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class RegionSearchNotify(betterproto.Message):
    region_search_list: List["RegionSearchInfo"] = betterproto.message_field(1)
    uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RegionSearch(betterproto.Message):
    region_search_id: int = betterproto.uint32_field(1)
    state: "RegionSearchState" = betterproto.enum_field(2)
    progress: int = betterproto.uint32_field(3)
    is_entered: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class RegionSimpleInfo(betterproto.Message):
    name: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    type: str = betterproto.string_field(3)
    dispatch_url: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ReliquaryDecomposeReq(betterproto.Message):
    config_id: int = betterproto.uint32_field(1)
    target_count: int = betterproto.uint32_field(2)
    guid_list: List[int] = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class ReliquaryDecomposeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    guid_list: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class ReliquaryPromoteReq(betterproto.Message):
    target_guid: int = betterproto.uint64_field(1)
    item_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class ReliquaryPromoteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_reliquary_guid: int = betterproto.uint64_field(2)
    old_promote_level: int = betterproto.uint32_field(3)
    cur_promote_level: int = betterproto.uint32_field(4)
    old_append_prop_list: List[int] = betterproto.uint32_field(5)
    cur_append_prop_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class Reliquary(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    promote_level: int = betterproto.uint32_field(3)
    main_prop_id: int = betterproto.uint32_field(4)
    append_prop_id_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReliquaryUpgradeReq(betterproto.Message):
    target_reliquary_guid: int = betterproto.uint64_field(1)
    food_reliquary_guid_list: List[int] = betterproto.uint64_field(2)
    item_param_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReliquaryUpgradeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_reliquary_guid: int = betterproto.uint64_field(2)
    old_level: int = betterproto.uint32_field(3)
    cur_level: int = betterproto.uint32_field(4)
    power_up_rate: int = betterproto.uint32_field(5)
    old_append_prop_list: List[int] = betterproto.uint32_field(6)
    cur_append_prop_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class RemoveBlacklistReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RemoveBlacklistRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RemoveRandTaskInfoNotify(betterproto.Message):
    rand_task_id: int = betterproto.uint32_field(1)
    is_succ: bool = betterproto.bool_field(2)
    reason: "RemoveRandTaskInfoNotifyFinishReason" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class ReportFightAntiCheatNotify(betterproto.Message):
    cheat_type: int = betterproto.uint32_field(1)
    cheat_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReportTrackingIoInfoNotify(betterproto.Message):
    appid: str = betterproto.string_field(1)
    deviceid: str = betterproto.string_field(2)
    mac: str = betterproto.string_field(3)
    rydevicetype: str = betterproto.string_field(4)
    client_tz: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class RequestLiveInfoReq(betterproto.Message):
    live_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RequestLiveInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    live_id: int = betterproto.uint32_field(2)
    live_url: str = betterproto.string_field(3)
    spare_live_url: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ResinCardData(betterproto.Message):
    config_id: int = betterproto.uint32_field(1)
    remain_reward_days: int = betterproto.uint32_field(2)
    last_daily_reward_time: int = betterproto.uint32_field(3)
    expire_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ResinCardDataUpdateNotify(betterproto.Message):
    card_data_list: List["ResinCardData"] = betterproto.message_field(1)
    today_start_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResinChangeNotify(betterproto.Message):
    cur_value: int = betterproto.uint32_field(1)
    next_add_timestamp: int = betterproto.uint32_field(2)
    cur_buy_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RestartEffigyChallengeReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RestartEffigyChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ResVersionConfig(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    relogin: bool = betterproto.bool_field(2)
    md5: str = betterproto.string_field(3)
    release_total_size: str = betterproto.string_field(4)
    version_suffix: str = betterproto.string_field(5)
    branch: str = betterproto.string_field(6)
    next_script_version: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class ReunionActivateNotify(betterproto.Message):
    reunion_brief_info: "ReunionBriefInfo" = betterproto.message_field(1)
    is_activate: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ReunionBriefInfo(betterproto.Message):
    finish_time: int = betterproto.uint32_field(1)
    is_taken_first_gift: bool = betterproto.bool_field(2)
    first_gift_reward_id: int = betterproto.uint32_field(3)
    sign_in_config_id: int = betterproto.uint32_field(4)
    sign_in_has_reward: bool = betterproto.bool_field(5)
    mission_id: int = betterproto.uint32_field(6)
    mission_has_reward: bool = betterproto.bool_field(7)
    privilege_id: int = betterproto.uint32_field(8)
    version: str = betterproto.string_field(9)
    start_time: int = betterproto.uint32_field(10)
    first_day_start_time: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ReunionBriefInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReunionBriefInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    is_activate: bool = betterproto.bool_field(2)
    reunion_brief_info: "ReunionBriefInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReunionDailyRefreshNotify(betterproto.Message):
    reunion_brief_info: "ReunionBriefInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReunionMissionInfo(betterproto.Message):
    mission_id: int = betterproto.uint32_field(1)
    cur_day_watcher_list: List["ReunionWatcherInfo"] = betterproto.message_field(2)
    cur_score: int = betterproto.uint32_field(3)
    is_finished: bool = betterproto.bool_field(4)
    is_taken_reward: bool = betterproto.bool_field(5)
    next_refresh_time: int = betterproto.uint32_field(6)
    is_taken_reward_list: List[bool] = betterproto.bool_field(7)
    watcher_list: List["ReunionWatcherInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ReunionPrivilegeChangeNotify(betterproto.Message):
    privilege_info: "ReunionPrivilegeInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReunionPrivilegeInfo(betterproto.Message):
    privilege_id: int = betterproto.uint32_field(1)
    cur_day_count: int = betterproto.uint32_field(2)
    total_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReunionSettleNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReunionSignInInfo(betterproto.Message):
    config_id: int = betterproto.uint32_field(1)
    sign_in_count: int = betterproto.uint32_field(2)
    last_sign_in_time: int = betterproto.uint32_field(3)
    reward_day_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReunionWatcherInfo(betterproto.Message):
    watcher_id: int = betterproto.uint32_field(1)
    cur_progress: int = betterproto.uint32_field(2)
    total_progress: int = betterproto.uint32_field(3)
    is_taken_reward: bool = betterproto.bool_field(4)
    reward_unlock_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class Reward(betterproto.Message):
    reward_id: int = betterproto.uint32_field(1)
    item_list: List["ItemParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RobotPushPlayerDataNotify(betterproto.Message):
    bin: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class RogueAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    is_onstage: bool = betterproto.bool_field(2)
    is_alive: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class RogueCellInfo(betterproto.Message):
    cell_id: int = betterproto.uint32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)
    cell_config_id: int = betterproto.uint32_field(3)
    state: "RogueCellState" = betterproto.enum_field(4)
    cell_type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class RogueCellUpdateNotify(betterproto.Message):
    cell_info: "RogueCellInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RogueDungeonPlayerCellChangeNotify(betterproto.Message):
    old_cell_id: int = betterproto.uint32_field(1)
    cell_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueEffectRecord(betterproto.Message):
    source_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    extra_param_list: List[int] = betterproto.uint32_field(3)
    is_new: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class RogueHealAvatarsReq(betterproto.Message):
    cell_id: int = betterproto.uint32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueHealAvatarsRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cell_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RoguelikeCardGachaNotify(betterproto.Message):
    card_list: List[int] = betterproto.uint32_field(1)
    is_can_refresh: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeDungeonActivityDetailInfo(betterproto.Message):
    rune_list: List[int] = betterproto.uint32_field(1)
    shikigami_list: List["RoguelikeShikigamiRecord"] = betterproto.message_field(2)
    stage_list: List["RogueStageInfo"] = betterproto.message_field(3)
    equipped_rune_list: List[int] = betterproto.uint32_field(4)
    is_content_closed: bool = betterproto.bool_field(5)
    content_close_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class RoguelikeDungeonSettleInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    cur_level: int = betterproto.uint32_field(2)
    finished_challenge_cell_num_map: Dict[
        int, "RoguelikeSettleCoinInfo"
    ] = betterproto.map_field(3, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    is_final_level: bool = betterproto.bool_field(4)
    total_coin_b_num: int = betterproto.uint32_field(5)
    total_coin_c_num: int = betterproto.uint32_field(6)
    is_coin_c_reach_limit: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class RoguelikeEffectDataNotify(betterproto.Message):
    card_list: List["RogueEffectRecord"] = betterproto.message_field(1)
    curse_list: List["RogueEffectRecord"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeEffectViewReq(betterproto.Message):
    view_card_list: List[int] = betterproto.uint32_field(1)
    view_curse_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeEffectViewRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class RoguelikeGadgetInfo(betterproto.Message):
    cell_config_id: int = betterproto.uint32_field(1)
    cell_type: int = betterproto.uint32_field(2)
    cell_state: int = betterproto.uint32_field(3)
    cell_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RoguelikeGiveUpReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RoguelikeGiveUpRsp(betterproto.Message):
    settle_info: "RoguelikeDungeonSettleInfo" = betterproto.message_field(
        3, group="Info"
    )
    stage_id: int = betterproto.uint32_field(1)
    retcode: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeMistClearNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RoguelikeRefreshCardCostUpdateNotify(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    item_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeResourceBonusPropUpdateNotify(betterproto.Message):
    bonus_resource_prop: float = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class RoguelikeRuneRecord(betterproto.Message):
    rune_id: int = betterproto.uint32_field(1)
    left_count: int = betterproto.uint32_field(2)
    max_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RoguelikeRuneRecordUpdateNotify(betterproto.Message):
    rune_record_list: List["RoguelikeRuneRecord"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RoguelikeSelectAvatarAndEnterDungeonReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(2)
    backstage_avatar_guid_list: List[int] = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class RoguelikeSelectAvatarAndEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    stage_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeSettleCoinInfo(betterproto.Message):
    cell_num: int = betterproto.uint32_field(1)
    coin_b: int = betterproto.uint32_field(2)
    coin_c: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RoguelikeShikigamiRecord(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RoguelikeTakeStageFirstPassRewardReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RoguelikeTakeStageFirstPassRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    stage_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueResumeDungeonReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RogueResumeDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    stage_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueShowAvatarTeamInfo(betterproto.Message):
    avatar_list: List["RogueAvatarInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RogueStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)
    coin_c_num: int = betterproto.uint32_field(3)
    max_passed_level: int = betterproto.uint32_field(4)
    is_in_combat: bool = betterproto.bool_field(5)
    is_passed: bool = betterproto.bool_field(6)
    is_taken_reward: bool = betterproto.bool_field(7)
    avatar_team: "RogueShowAvatarTeamInfo" = betterproto.message_field(10)
    cur_level: int = betterproto.uint32_field(11)
    explore_cell_num: int = betterproto.uint32_field(12)
    rune_record_list: List["RoguelikeRuneRecord"] = betterproto.message_field(13)
    is_explored: bool = betterproto.bool_field(14)
    cached_coin_b_num: int = betterproto.uint32_field(15)
    cached_coin_c_num: int = betterproto.uint32_field(16)
    revise_monster_level: int = betterproto.uint32_field(17)


@dataclass(eq=False, repr=False)
class RogueSwitchAvatarReq(betterproto.Message):
    dungeon_id: int = betterproto.uint32_field(1)
    cell_id: int = betterproto.uint32_field(2)
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(3)
    cur_avatar_guid: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class RogueSwitchAvatarRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)
    cell_id: int = betterproto.uint32_field(3)
    onstage_avatar_guid_list: List[int] = betterproto.uint64_field(4)
    cur_avatar_guid: int = betterproto.uint64_field(5)
    backstage_avatar_guid_list: List[int] = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class RoutePointChangeInfo(betterproto.Message):
    point_index: int = betterproto.uint32_field(1)
    target_velocity: float = betterproto.float_field(2)
    wait_time: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class RoutePoint(betterproto.Message):
    velocity: float = betterproto.float_field(11, group="MoveParams")
    time: float = betterproto.float_field(12, group="MoveParams")
    rotation: "Vector" = betterproto.message_field(21, group="RotateParams")
    rotation_speed: "MathQuaternion" = betterproto.message_field(
        22, group="RotateParams"
    )
    axis_speed: "MathQuaternion" = betterproto.message_field(23, group="RotateParams")
    position: "Vector" = betterproto.message_field(1)
    arrive_range: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    route_points: List["RoutePoint"] = betterproto.message_field(1)
    route_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SalesmanActivityDetailInfo(betterproto.Message):
    status: "SalesmanStatusType" = betterproto.enum_field(1)
    day_index: int = betterproto.uint32_field(2)
    last_deliver_time: int = betterproto.uint32_field(3)
    deliver_count: int = betterproto.uint32_field(4)
    selected_reward_id_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    day_reward_id: int = betterproto.uint32_field(6)
    special_reward_preview_id: int = betterproto.uint32_field(7)
    cond_day_count: int = betterproto.uint32_field(8)
    is_has_taken_special_reward: bool = betterproto.bool_field(9)
    is_today_has_delivered: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class SalesmanDeliverItemReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SalesmanDeliverItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SalesmanTakeRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    position: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SalesmanTakeRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    reward_id: int = betterproto.uint32_field(3)
    position: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SalesmanTakeSpecialRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SalesmanTakeSpecialRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SaveCoopDialogReq(betterproto.Message):
    main_coop_id: int = betterproto.uint32_field(1)
    dialog_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SaveCoopDialogRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    main_coop_id: int = betterproto.uint32_field(2)
    dialog_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SaveMainCoopReq(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    save_point_id: int = betterproto.uint32_field(2)
    self_confidence: int = betterproto.uint32_field(3)
    normal_var_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )
    temp_var_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class SaveMainCoopRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    id: int = betterproto.uint32_field(2)
    save_point_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneAreaUnlockNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    area_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneAreaWeatherNotify(betterproto.Message):
    weather_gadget_id: int = betterproto.uint32_field(1)
    weather_value_map: Dict[int, str] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_STRING
    )
    weather_area_id: int = betterproto.uint32_field(3)
    climate_type: int = betterproto.uint32_field(4)
    trans_duration: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class SceneAudioNotify(betterproto.Message):
    source_uid: int = betterproto.uint32_field(1)
    type: int = betterproto.int32_field(2)
    param1: List[int] = betterproto.uint32_field(3)
    param2: List[float] = betterproto.float_field(4)
    param3: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class SceneAvatarInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    guid: int = betterproto.uint64_field(3)
    peer_id: int = betterproto.uint32_field(4)
    equip_id_list: List[int] = betterproto.uint32_field(5)
    skill_depot_id: int = betterproto.uint32_field(6)
    talent_id_list: List[int] = betterproto.uint32_field(7)
    weapon: "SceneWeaponInfo" = betterproto.message_field(8)
    reliquary_list: List["SceneReliquaryInfo"] = betterproto.message_field(9)
    core_proud_skill_level: int = betterproto.uint32_field(11)
    inherent_proud_skill_list: List[int] = betterproto.uint32_field(12)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        14, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    server_buff_list: List["ServerBuff"] = betterproto.message_field(15)
    team_resonance_list: List[int] = betterproto.uint32_field(16)
    wearing_flycloak_id: int = betterproto.uint32_field(17)
    born_time: int = betterproto.uint32_field(18)
    costume_id: int = betterproto.uint32_field(19)
    cur_vehicle_info: "CurVehicleInfo" = betterproto.message_field(20)
    excel_info: "AvatarExcelInfo" = betterproto.message_field(21)
    anim_hash: int = betterproto.uint32_field(22)


@dataclass(eq=False, repr=False)
class SceneAvatarStaminaStepReq(betterproto.Message):
    use_client_rot: bool = betterproto.bool_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneAvatarStaminaStepRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    use_client_rot: bool = betterproto.bool_field(2)
    rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SceneCreateEntityReq(betterproto.Message):
    entity: "CreateEntityInfo" = betterproto.message_field(1)
    reason: "CreateReason" = betterproto.enum_field(2)
    is_destroy_when_disconnect: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class SceneCreateEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    entity: "CreateEntityInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SceneDataNotify(betterproto.Message):
    level_config_name_list: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SceneDestroyEntityReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneDestroyEntityRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneEntitiesMoveCombineNotify(betterproto.Message):
    entity_move_info_list: List["EntityMoveInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SceneEntitiesMovesReq(betterproto.Message):
    entity_move_info_list: List["EntityMoveInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SceneEntitiesMovesRsp(betterproto.Message):
    entity_move_fail_info_list: List["EntityMoveFailInfo"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class SceneEntityAiInfo(betterproto.Message):
    is_ai_open: bool = betterproto.bool_field(1)
    born_pos: "Vector" = betterproto.message_field(2)
    skill_cd_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    servant_info: "ServantInfo" = betterproto.message_field(4)
    ai_threat_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    skill_group_cd_map: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    cur_tactic: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SceneEntityAppearNotify(betterproto.Message):
    entity_list: List["SceneEntityInfo"] = betterproto.message_field(1)
    appear_type: "VisionType" = betterproto.enum_field(2)
    param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneEntityDisappearNotify(betterproto.Message):
    entity_list: List[int] = betterproto.uint32_field(1)
    disappear_type: "VisionType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class SceneEntityDrownReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneEntityDrownRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneEntityInfo(betterproto.Message):
    avatar: "SceneAvatarInfo" = betterproto.message_field(10, group="Entity")
    monster: "SceneMonsterInfo" = betterproto.message_field(11, group="Entity")
    npc: "SceneNpcInfo" = betterproto.message_field(12, group="Entity")
    gadget: "SceneGadgetInfo" = betterproto.message_field(13, group="Entity")
    entity_type: "ProtEntityType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)
    motion_info: "MotionInfo" = betterproto.message_field(4)
    prop_list: List["PropPair"] = betterproto.message_field(5)
    fight_prop_list: List["FightPropPair"] = betterproto.message_field(6)
    life_state: int = betterproto.uint32_field(7)
    animator_para_list: List[
        "AnimatorParameterValueInfoPair"
    ] = betterproto.message_field(9)
    last_move_scene_time_ms: int = betterproto.uint32_field(17)
    last_move_reliable_seq: int = betterproto.uint32_field(18)
    entity_client_data: "EntityClientData" = betterproto.message_field(19)
    entity_environment_info_list: List[
        "EntityEnvironmentInfo"
    ] = betterproto.message_field(20)
    entity_authority_info: "EntityAuthorityInfo" = betterproto.message_field(21)
    tag_list: List[str] = betterproto.string_field(22)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(23)


@dataclass(eq=False, repr=False)
class SceneEntityMoveNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion_info: "MotionInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)
    reliable_seq: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneEntityMoveReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion_info: "MotionInfo" = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)
    reliable_seq: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneEntityMoveRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    fail_motion: "MotionInfo" = betterproto.message_field(3)
    scene_time: int = betterproto.uint32_field(4)
    reliable_seq: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SceneEntityUpdateNotify(betterproto.Message):
    entity_list: List["SceneEntityInfo"] = betterproto.message_field(1)
    appear_type: "VisionType" = betterproto.enum_field(2)
    param: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneFishInfo(betterproto.Message):
    fish_id: int = betterproto.uint32_field(1)
    fish_pool_entity_id: int = betterproto.uint32_field(2)
    fish_pool_pos: "Vector" = betterproto.message_field(3)
    fish_pool_gadget_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneForceLockNotify(betterproto.Message):
    force_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneForceUnlockNotify(betterproto.Message):
    force_id_list: List[int] = betterproto.uint32_field(1)
    is_add: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SceneGadgetInfo(betterproto.Message):
    trifle_item: "Item" = betterproto.message_field(12, group="Content")
    gather_gadget: "GatherGadgetInfo" = betterproto.message_field(13, group="Content")
    worktop: "WorktopInfo" = betterproto.message_field(14, group="Content")
    client_gadget: "ClientGadgetInfo" = betterproto.message_field(15, group="Content")
    weather: "WeatherInfo" = betterproto.message_field(17, group="Content")
    ability_gadget: "AbilityGadgetInfo" = betterproto.message_field(18, group="Content")
    statue_gadget: "StatueGadgetInfo" = betterproto.message_field(19, group="Content")
    boss_chest: "BossChestInfo" = betterproto.message_field(20, group="Content")
    blossom_chest: "BlossomChestInfo" = betterproto.message_field(41, group="Content")
    mp_play_reward: "MpPlayRewardInfo" = betterproto.message_field(42, group="Content")
    general_reward: "GadgetGeneralRewardInfo" = betterproto.message_field(
        43, group="Content"
    )
    offering_info: "OfferingInfo" = betterproto.message_field(44, group="Content")
    foundation_info: "FoundationInfo" = betterproto.message_field(45, group="Content")
    vehicle_info: "VehicleInfo" = betterproto.message_field(46, group="Content")
    shell_info: "EchoShellInfo" = betterproto.message_field(47, group="Content")
    screen_info: "ScreenInfo" = betterproto.message_field(48, group="Content")
    fish_pool_info: "FishPoolInfo" = betterproto.message_field(59, group="Content")
    custom_gadget_tree_info: "CustomGadgetTreeInfo" = betterproto.message_field(
        60, group="Content"
    )
    roguelike_gadget_info: "RoguelikeGadgetInfo" = betterproto.message_field(
        61, group="Content"
    )
    gadget_id: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    config_id: int = betterproto.uint32_field(3)
    owner_entity_id: int = betterproto.uint32_field(4)
    born_type: "GadgetBornType" = betterproto.enum_field(5)
    gadget_state: int = betterproto.uint32_field(6)
    gadget_type: int = betterproto.uint32_field(7)
    is_show_cutscene: bool = betterproto.bool_field(8)
    authority_peer_id: int = betterproto.uint32_field(9)
    is_enable_interact: bool = betterproto.bool_field(10)
    interact_id: int = betterproto.uint32_field(11)
    mark_flag: int = betterproto.uint32_field(21)
    prop_owner_entity_id: int = betterproto.uint32_field(22)
    platform: "PlatformInfo" = betterproto.message_field(23)
    interact_uid_list: List[int] = betterproto.uint32_field(24)
    draft_id: int = betterproto.uint32_field(25)
    gadget_talk_state: int = betterproto.uint32_field(26)
    play_info: "GadgetPlayInfo" = betterproto.message_field(100)


@dataclass(eq=False, repr=False)
class SceneGalleryBalloonInfo(betterproto.Message):
    scene_player_balloon_info_map: Dict[
        int, "BalloonPlayerInfo"
    ] = betterproto.map_field(1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE)
    end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryBounceConjuringInfo(betterproto.Message):
    total_score: int = betterproto.uint32_field(1)
    total_destroyed_machine_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryBrokenFloorInfo(betterproto.Message):
    fall_count_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryBulletInfo(betterproto.Message):
    hit_count_map: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryBuoyantCombatInfo(betterproto.Message):
    kill_monster_count: int = betterproto.uint32_field(1)
    kill_special_monster_count: int = betterproto.uint32_field(2)
    score: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneGalleryFallInfo(betterproto.Message):
    scene_player_fall_info_map: Dict[int, "FallPlayerInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryFlowerInfo(betterproto.Message):
    cur_score: int = betterproto.uint32_field(1)
    target_score: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneGalleryHandballInfo(betterproto.Message):
    is_have_ball: bool = betterproto.bool_field(1)
    ball_place_info: "PlaceInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryHideAndSeekInfo(betterproto.Message):
    visible_uid_list: List[int] = betterproto.uint32_field(1)
    caught_uid_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneGalleryInfoNotify(betterproto.Message):
    gallery_info: "SceneGalleryInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SceneGalleryInfo(betterproto.Message):
    balloon_info: "SceneGalleryBalloonInfo" = betterproto.message_field(
        10, group="Info"
    )
    fall_info: "SceneGalleryFallInfo" = betterproto.message_field(11, group="Info")
    flower_info: "SceneGalleryFlowerInfo" = betterproto.message_field(12, group="Info")
    bullet_info: "SceneGalleryBulletInfo" = betterproto.message_field(13, group="Info")
    broken_floor_info: "SceneGalleryBrokenFloorInfo" = betterproto.message_field(
        14, group="Info"
    )
    hide_and_seek_info: "SceneGalleryHideAndSeekInfo" = betterproto.message_field(
        15, group="Info"
    )
    buoyant_combat_info: "SceneGalleryBuoyantCombatInfo" = betterproto.message_field(
        16, group="Info"
    )
    bounce_conjuring_info: "SceneGalleryBounceConjuringInfo" = (
        betterproto.message_field(17, group="Info")
    )
    handball_info: "SceneGalleryHandballInfo" = betterproto.message_field(
        18, group="Info"
    )
    sumo_info: "SceneGallerySumoInfo" = betterproto.message_field(19, group="Info")
    gallery_id: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)
    stage: "GalleryStageType" = betterproto.enum_field(3)
    pre_start_end_time: int = betterproto.uint32_field(4)
    progress_info_list: List["SceneGalleryProgressInfo"] = betterproto.message_field(5)
    player_count: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SceneGalleryProgressInfo(betterproto.Message):
    key: str = betterproto.string_field(1)
    progress_stage_list: List[int] = betterproto.uint32_field(2)
    progress: int = betterproto.uint32_field(3)
    ui_form: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneGallerySumoInfo(betterproto.Message):
    score: int = betterproto.uint32_field(1)
    kill_normal_mosnter_num: int = betterproto.uint32_field(2)
    kill_elite_monster_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneInitFinishReq(betterproto.Message):
    enter_scene_token: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneInitFinishRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    enter_scene_token: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneKickPlayerNotify(betterproto.Message):
    kicker_uid: int = betterproto.uint32_field(1)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneKickPlayerReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneKickPlayerRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneMonsterInfo(betterproto.Message):
    fish_info: "SceneFishInfo" = betterproto.message_field(50, group="Content")
    monster_id: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)
    config_id: int = betterproto.uint32_field(3)
    weapon_list: List["SceneWeaponInfo"] = betterproto.message_field(4)
    authority_peer_id: int = betterproto.uint32_field(5)
    affix_list: List[int] = betterproto.uint32_field(6)
    is_elite: bool = betterproto.bool_field(7)
    owner_entity_id: int = betterproto.uint32_field(8)
    summoned_tag: int = betterproto.uint32_field(9)
    summon_tag_map: Dict[int, int] = betterproto.map_field(
        10, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    pose_id: int = betterproto.uint32_field(11)
    born_type: "MonsterBornType" = betterproto.enum_field(12)
    block_id: int = betterproto.uint32_field(13)
    mark_flag: int = betterproto.uint32_field(14)
    title_id: int = betterproto.uint32_field(15)
    special_name_id: int = betterproto.uint32_field(16)
    attack_target_id: int = betterproto.uint32_field(17)
    monster_route: "MonsterRoute" = betterproto.message_field(18)
    ai_config_id: int = betterproto.uint32_field(19)
    level_route_id: int = betterproto.uint32_field(20)
    init_pose_id: int = betterproto.uint32_field(21)


@dataclass(eq=False, repr=False)
class SceneNpcInfo(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)
    room_id: int = betterproto.uint32_field(2)
    parent_quest_id: int = betterproto.uint32_field(3)
    block_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInfoListNotify(betterproto.Message):
    battle_info_list: List["ScenePlayBattleInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInfoNotify(betterproto.Message):
    battle_info: "ScenePlayBattleInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInfo(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    play_type: int = betterproto.uint32_field(2)
    state: int = betterproto.uint32_field(3)
    prepare_end_time: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(5)
    duration: int = betterproto.uint32_field(6)
    progress_stage_list: List[int] = betterproto.uint32_field(7)
    progress: int = betterproto.uint32_field(8)
    mode: int = betterproto.uint32_field(9)
    type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ScenePlayBattleInterruptNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    play_type: int = betterproto.uint32_field(2)
    interrupt_state: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ScenePlayBattleResultNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    play_type: int = betterproto.uint32_field(2)
    is_win: bool = betterproto.bool_field(3)
    cost_time: int = betterproto.uint32_field(4)
    settle_player_info_list: List[
        "ScenePlayBattleSettlePlayerInfo"
    ] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ScenePlayBattleSettlePlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    statistic_id: int = betterproto.uint32_field(2)
    param: int = betterproto.int64_field(3)
    head_image: int = betterproto.uint32_field(4)
    nickname: str = betterproto.string_field(5)
    online_id: str = betterproto.string_field(6)
    profile_picture: "ProfilePicture" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class ScenePlayBattleUidOpNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    play_type: int = betterproto.uint32_field(2)
    entity_id: int = betterproto.uint32_field(3)
    uid_list: List[int] = betterproto.uint32_field(4)
    op: int = betterproto.uint32_field(5)
    param_str: str = betterproto.string_field(6)
    param_list: List[int] = betterproto.uint32_field(7)
    param_target_list: List[int] = betterproto.uint32_field(8)
    param_index: int = betterproto.uint32_field(9)
    param_duration: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ScenePlayerInfoNotify(betterproto.Message):
    player_info_list: List["ScenePlayerInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ScenePlayerInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    peer_id: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)
    is_connected: bool = betterproto.bool_field(4)
    scene_id: int = betterproto.uint32_field(5)
    online_player_info: "OnlinePlayerInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ScenePlayerLocationNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    player_loc_list: List["PlayerLocationInfo"] = betterproto.message_field(2)
    vehicle_loc_list: List["VehicleLocationInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ScenePlayerSoundNotify(betterproto.Message):
    sound_name: str = betterproto.string_field(1)
    play_pos: "Vector" = betterproto.message_field(2)
    play_type: "ScenePlayerSoundNotifyPlaySoundType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class ScenePlayGuestReplyInviteReq(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    is_agree: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ScenePlayGuestReplyInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    play_id: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ScenePlayGuestReplyNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    guest_uid: int = betterproto.uint32_field(2)
    is_agree: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ScenePlayInfoListNotify(betterproto.Message):
    play_info_list: List["ScenePlayInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ScenePlayInfo(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    play_type: int = betterproto.uint32_field(2)
    entry_id: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class ScenePlayInviteResultNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    is_all_argee: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ScenePlayOutofRegionNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerCheckReq(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    is_skip_match: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerCheckRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    play_id: int = betterproto.uint32_field(2)
    is_skip_match: bool = betterproto.bool_field(3)
    wrong_uid: int = betterproto.uint32_field(4)
    param_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerInviteNotify(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    invite_cd: int = betterproto.uint32_field(2)
    is_remain_reward: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerStartInviteReq(betterproto.Message):
    play_id: int = betterproto.uint32_field(1)
    is_skip_match: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ScenePlayOwnerStartInviteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    play_id: int = betterproto.uint32_field(2)
    is_skip_match: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ScenePointUnlockNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    point_list: List[int] = betterproto.uint32_field(2)
    locked_point_list: List[int] = betterproto.uint32_field(3)
    hide_point_list: List[int] = betterproto.uint32_field(4)
    unhide_point_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SceneReliquaryInfo(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    guid: int = betterproto.uint64_field(2)
    level: int = betterproto.uint32_field(3)
    promote_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneRouteChangeInfo(betterproto.Message):
    route_id: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    is_forward: bool = betterproto.bool_field(3)
    point_list: List["RoutePointChangeInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SceneRouteChangeNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    route_list: List["SceneRouteChangeInfo"] = betterproto.message_field(2)
    scene_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneTeamAvatar(betterproto.Message):
    player_uid: int = betterproto.uint32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    scene_id: int = betterproto.uint32_field(3)
    entity_id: int = betterproto.uint32_field(4)
    avatar_info: "AvatarInfo" = betterproto.message_field(5)
    scene_avatar_info: "SceneAvatarInfo" = betterproto.message_field(6)
    avatar_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(7)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(8)
    scene_entity_info: "SceneEntityInfo" = betterproto.message_field(9)
    weapon_guid: int = betterproto.uint64_field(10)
    weapon_entity_id: int = betterproto.uint32_field(11)
    weapon_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(12)
    ability_control_block: "AbilityControlBlock" = betterproto.message_field(13)
    is_reconnect: bool = betterproto.bool_field(14)
    is_player_cur_avatar: bool = betterproto.bool_field(15)
    is_on_scene: bool = betterproto.bool_field(16)


@dataclass(eq=False, repr=False)
class SceneTeamUpdateNotify(betterproto.Message):
    scene_team_avatar_list: List["SceneTeamAvatar"] = betterproto.message_field(1)
    is_in_mp: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class SceneTimeNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    is_paused: bool = betterproto.bool_field(2)
    scene_time: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class SceneTransToPointReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneTransToPointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    scene_id: int = betterproto.uint32_field(2)
    point_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneWeaponInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    gadget_id: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint32_field(3)
    guid: int = betterproto.uint64_field(4)
    level: int = betterproto.uint32_field(5)
    promote_level: int = betterproto.uint32_field(6)
    ability_info: "AbilitySyncStateInfo" = betterproto.message_field(7)
    affix_map: Dict[int, int] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class SceneWeatherForcastReq(betterproto.Message):
    weather_area_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneWeatherForcastRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    next_climate_time: int = betterproto.uint64_field(2)
    forcast_climate_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ScreenInfo(betterproto.Message):
    live_id: int = betterproto.uint32_field(1)
    projector_entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SeaLampActivityDetailInfo(betterproto.Message):
    phase_id: int = betterproto.uint32_field(1)
    progress: int = betterproto.uint32_field(2)
    days: int = betterproto.uint32_field(3)
    contribution: int = betterproto.uint32_field(4)
    taken_contribution_reward_list: List[int] = betterproto.uint32_field(5)
    taken_phase_reward_list: List[int] = betterproto.uint32_field(6)
    factor: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SeaLampActivityInfo(betterproto.Message):
    day_index: int = betterproto.uint32_field(1)
    popularity: int = betterproto.uint32_field(2)
    sea_lamp_coin: int = betterproto.uint32_field(3)
    is_content_closed: bool = betterproto.bool_field(4)
    section_info_list: List["SeaLampSectionInfo"] = betterproto.message_field(5)
    mechanicus_id: int = betterproto.uint32_field(6)
    is_mechanicus_open: bool = betterproto.bool_field(7)
    first_day_start_time: int = betterproto.uint32_field(8)
    is_mechanicus_feature_close: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class SeaLampCoinNotify(betterproto.Message):
    sea_lamp_coin: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SeaLampContributeItemReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(2)
    item_list: List["ItemParam"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SeaLampContributeItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    total_contribution: int = betterproto.uint32_field(2)
    add_contribution: int = betterproto.uint32_field(3)
    add_progress: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SeaLampFlyLampNotify(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    item_num: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(3)
    param: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SeaLampFlyLampReq(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    item_num: int = betterproto.uint32_field(2)
    pos: "Vector" = betterproto.message_field(3)
    param: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SeaLampFlyLampRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    item_id: int = betterproto.uint32_field(2)
    item_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SeaLampPopularityNotify(betterproto.Message):
    popularity: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SeaLampSectionInfo(betterproto.Message):
    section_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SeaLampTakeContributionRewardReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(2)
    config_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SeaLampTakeContributionRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    config_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SeaLampTakePhaseRewardReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(2)
    phase_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SeaLampTakePhaseRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    phase_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SealBattleBeginNotify(betterproto.Message):
    seal_entity_id: int = betterproto.uint32_field(1)
    seal_radius: int = betterproto.uint32_field(2)
    seal_max_progress: int = betterproto.uint32_field(3)
    battle_type: "SealBattleType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class SealBattleEndNotify(betterproto.Message):
    seal_entity_id: int = betterproto.uint32_field(1)
    is_win: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SealBattleProgressNotify(betterproto.Message):
    seal_entity_id: int = betterproto.uint32_field(1)
    progress: int = betterproto.uint32_field(2)
    max_progress: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    seal_radius: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SeeMonsterReq(betterproto.Message):
    monster_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SeeMonsterRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SegmentCrcInfo(betterproto.Message):
    module: int = betterproto.uint32_field(1)
    offset: int = betterproto.uint32_field(2)
    size: int = betterproto.uint32_field(3)
    crc: str = betterproto.string_field(4)
    retcode: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class SegmentInfo(betterproto.Message):
    module: int = betterproto.uint32_field(1)
    offset: int = betterproto.uint32_field(2)
    size: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SelectAsterMidDifficultyReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    gadget_entity_id: int = betterproto.uint32_field(2)
    difficulty_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SelectAsterMidDifficultyRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    gadget_entity_id: int = betterproto.uint32_field(3)
    difficulty_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SelectEffigyChallengeConditionReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(2)
    condition_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SelectEffigyChallengeConditionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    challenge_id: int = betterproto.uint32_field(2)
    difficulty_id: int = betterproto.uint32_field(3)
    condition_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SelectRoguelikeDungeonCardReq(betterproto.Message):
    card_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SelectRoguelikeDungeonCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    card_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SelectWorktopOptionReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    option_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SelectWorktopOptionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gadget_entity_id: int = betterproto.uint32_field(2)
    option_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ServantInfo(betterproto.Message):
    master_entity_id: int = betterproto.uint32_field(1)
    born_slot_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ServerAnnounceNotify(betterproto.Message):
    announce_data_list: List["AnnounceData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ServerAnnounceRevokeNotify(betterproto.Message):
    config_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ServerBuffChangeNotify(betterproto.Message):
    server_buff_change_type: "ServerBuffChangeNotifyServerBuffChangeType" = (
        betterproto.enum_field(1)
    )
    avatar_guid_list: List[int] = betterproto.uint64_field(2)
    server_buff_list: List["ServerBuff"] = betterproto.message_field(3)
    is_creature_buff: bool = betterproto.bool_field(4)
    entity_id_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ServerBuff(betterproto.Message):
    server_buff_uid: int = betterproto.uint32_field(1)
    server_buff_id: int = betterproto.uint32_field(2)
    server_buff_type: int = betterproto.uint32_field(3)
    instanced_modifier_id: int = betterproto.uint32_field(4)
    is_modifier_added: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class ServerCondMeetQuestListUpdateNotify(betterproto.Message):
    add_quest_id_list: List[int] = betterproto.uint32_field(1)
    del_quest_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ServerDisconnectClientNotify(betterproto.Message):
    data: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ServerGlobalValueChangeNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    key_hash: int = betterproto.uint32_field(2)
    value: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class ServerLogNotify(betterproto.Message):
    log_type: "ServerLogType" = betterproto.enum_field(1)
    log_level: "ServerLogLevel" = betterproto.enum_field(2)
    server_log: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ServerMassiveEntity(betterproto.Message):
    water_info: "MassiveWaterInfo" = betterproto.message_field(6, group="EntityInfo")
    grass_info: "MassiveGrassInfo" = betterproto.message_field(7, group="EntityInfo")
    box_info: "MassiveBoxInfo" = betterproto.message_field(8, group="EntityInfo")
    entity_type: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    runtime_id: int = betterproto.uint32_field(3)
    authority_peer_id: int = betterproto.uint32_field(4)
    obj_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class ServerMessageNotify(betterproto.Message):
    index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ServerTimeNotify(betterproto.Message):
    server_time: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class ServerUpdateGlobalValueNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    key_hash: int = betterproto.uint32_field(2)
    update_type: "ServerUpdateGlobalValueNotifyUpdateType" = betterproto.enum_field(3)
    delta: float = betterproto.float_field(4)
    value: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class SetBattlePassViewedReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetBattlePassViewedRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetChatEmojiCollectionReq(betterproto.Message):
    chat_emoji_collection_data: "ChatEmojiCollectionData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetChatEmojiCollectionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetCoopChapterViewedReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetCoopChapterViewedRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chapter_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetCurExpeditionChallengeIdReq(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetCurExpeditionChallengeIdRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetEntityClientDataNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    entity_client_data: "EntityClientData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetEquipLockStateReq(betterproto.Message):
    target_equip_guid: int = betterproto.uint64_field(1)
    is_locked: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetEquipLockStateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_equip_guid: int = betterproto.uint64_field(2)
    is_locked: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class SetFriendEnterHomeOptionReq(betterproto.Message):
    option: "FriendEnterHomeOption" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class SetFriendEnterHomeOptionRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetFriendRemarkNameReq(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    remark_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetFriendRemarkNameRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    uid: int = betterproto.uint32_field(2)
    remark_name: str = betterproto.string_field(3)
    is_clear_remark: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class SetH5ActivityRedDotTimestampReq(betterproto.Message):
    client_red_dot_timestamp: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetH5ActivityRedDotTimestampRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetIsAutoUnlockSpecificEquipReq(betterproto.Message):
    is_auto_unlock_specific_equip: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SetIsAutoUnlockSpecificEquipRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetLimitOptimizationNotify(betterproto.Message):
    is_active: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SetNameCardReq(betterproto.Message):
    name_card_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetNameCardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    name_card_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetOpenStateReq(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetOpenStateRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    key: int = betterproto.uint32_field(2)
    value: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SetPlayerBirthdayReq(betterproto.Message):
    birthday: "Birthday" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetPlayerBirthdayRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    birthday: "Birthday" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetPlayerBornDataReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    nick_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetPlayerBornDataRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetPlayerHeadImageReq(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetPlayerHeadImageRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    profile_picture: "ProfilePicture" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SetPlayerNameReq(betterproto.Message):
    nick_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SetPlayerNameRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    nick_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetPlayerPropReq(betterproto.Message):
    prop_list: List["PropValue"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetPlayerPropRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetPlayerSignatureReq(betterproto.Message):
    signature: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SetPlayerSignatureRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    signature: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetSceneWeatherAreaReq(betterproto.Message):
    weather_gadget_id: int = betterproto.uint32_field(1)
    weather_value_map: Dict[int, str] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class SetSceneWeatherAreaRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SetUpAvatarTeamReq(betterproto.Message):
    team_id: int = betterproto.uint32_field(1)
    avatar_team_guid_list: List[int] = betterproto.uint64_field(2)
    cur_avatar_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class SetUpAvatarTeamRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    team_id: int = betterproto.uint32_field(2)
    avatar_team_guid_list: List[int] = betterproto.uint64_field(3)
    cur_avatar_guid: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class SetUpLunchBoxWidgetReq(betterproto.Message):
    lunch_box_data: "LunchBoxData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetUpLunchBoxWidgetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    lunch_box_data: "LunchBoxData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetWidgetSlotReq(betterproto.Message):
    op: "WidgetSlotOp" = betterproto.enum_field(2)
    tag_list: List["WidgetSlotTag"] = betterproto.enum_field(3)
    material_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SetWidgetSlotRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    op: "WidgetSlotOp" = betterproto.enum_field(2)
    tag_list: List["WidgetSlotTag"] = betterproto.enum_field(3)
    material_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ShapeBox(betterproto.Message):
    center: "Vector" = betterproto.message_field(1)
    axis0: "Vector" = betterproto.message_field(2)
    axis1: "Vector" = betterproto.message_field(3)
    axis2: "Vector" = betterproto.message_field(4)
    extents: "Vector" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ShapeSphere(betterproto.Message):
    center: "Vector" = betterproto.message_field(1)
    radius: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class ShopCardProduct(betterproto.Message):
    resin_card: "ShopCardProductResinCard" = betterproto.message_field(
        101, group="ExtraCardData"
    )
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    mcoin_base: int = betterproto.uint32_field(3)
    hcoin_per_day: int = betterproto.uint32_field(4)
    days: int = betterproto.uint32_field(5)
    remain_reward_days: int = betterproto.uint32_field(6)
    card_product_type: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ShopCardProductResinCard(betterproto.Message):
    base_item_list: List["ItemParam"] = betterproto.message_field(1)
    per_day_item_list: List["ItemParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ShopConcertProduct(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    obtain_count: int = betterproto.uint32_field(3)
    obtain_limit: int = betterproto.uint32_field(4)
    begin_time: int = betterproto.uint32_field(5)
    end_time: int = betterproto.uint32_field(6)
    buy_times: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ShopGoods(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    goods_item: "ItemParam" = betterproto.message_field(2)
    scoin: int = betterproto.uint32_field(3)
    hcoin: int = betterproto.uint32_field(4)
    cost_item_list: List["ItemParam"] = betterproto.message_field(5)
    bought_num: int = betterproto.uint32_field(6)
    buy_limit: int = betterproto.uint32_field(7)
    begin_time: int = betterproto.uint32_field(8)
    end_time: int = betterproto.uint32_field(9)
    next_refresh_time: int = betterproto.uint32_field(10)
    min_level: int = betterproto.uint32_field(11)
    max_level: int = betterproto.uint32_field(12)
    pre_goods_id_list: List[int] = betterproto.uint32_field(13)
    mcoin: int = betterproto.uint32_field(14)
    disable_type: int = betterproto.uint32_field(15)
    secondary_sheet_id: int = betterproto.uint32_field(16)
    discount_id: int = betterproto.uint32_field(17)
    discount_begin_time: int = betterproto.uint32_field(18)
    discount_end_time: int = betterproto.uint32_field(19)
    single_limit: int = betterproto.uint32_field(20)


@dataclass(eq=False, repr=False)
class ShopMcoinProduct(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)
    mcoin_base: int = betterproto.uint32_field(3)
    mcoin_non_first: int = betterproto.uint32_field(4)
    mcoin_first: int = betterproto.uint32_field(5)
    bought_num: int = betterproto.uint32_field(6)
    is_audit: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class Shop(betterproto.Message):
    shop_type: int = betterproto.uint32_field(1)
    goods_list: List["ShopGoods"] = betterproto.message_field(2)
    mcoin_product_list: List["ShopMcoinProduct"] = betterproto.message_field(3)
    card_product_list: List["ShopCardProduct"] = betterproto.message_field(4)
    next_refresh_time: int = betterproto.uint32_field(6)
    city_id: int = betterproto.uint32_field(7)
    city_reputation_level: int = betterproto.uint32_field(8)
    concert_product_list: List["ShopConcertProduct"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ShortAbilityHashPair(betterproto.Message):
    ability_name_hash: int = betterproto.int32_field(1)
    ability_config_hash: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ShowAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    talent_id_list: List[int] = betterproto.uint32_field(3)
    fight_prop_map: Dict[int, float] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_FLOAT
    )
    skill_depot_id: int = betterproto.uint32_field(5)
    core_proud_skill_level: int = betterproto.uint32_field(6)
    inherent_proud_skill_list: List[int] = betterproto.uint32_field(7)
    skill_level_map: Dict[int, int] = betterproto.map_field(
        8, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    proud_skill_extra_level_map: Dict[int, int] = betterproto.map_field(
        9, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    equip_list: List["ShowEquip"] = betterproto.message_field(10)
    fetter_info: "AvatarFetterInfo" = betterproto.message_field(11)
    costume_id: int = betterproto.uint32_field(12)
    excel_info: "AvatarExcelInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class ShowClientGuideNotify(betterproto.Message):
    guide_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ShowClientTutorialNotify(betterproto.Message):
    tutorial_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ShowCommonTipsNotify(betterproto.Message):
    title: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)
    close_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ShowEquip(betterproto.Message):
    reliquary: "Reliquary" = betterproto.message_field(2, group="Detail")
    weapon: "Weapon" = betterproto.message_field(3, group="Detail")
    item_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ShowMessageNotify(betterproto.Message):
    msg_id: "SvrMsgId" = betterproto.enum_field(1)
    params: List["MsgParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ShowTemplateReminderNotify(betterproto.Message):
    template_reminder_id: int = betterproto.uint32_field(1)
    param_list: List[int] = betterproto.int32_field(2)
    param_uid_list: List[int] = betterproto.uint32_field(3)
    is_revoke: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class SignInInfo(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    begin_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    is_cond_satisfied: bool = betterproto.bool_field(10)
    sign_in_count: int = betterproto.uint32_field(11)
    last_sign_in_time: int = betterproto.uint32_field(12)
    reward_day_list: List[int] = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class SignInInfoReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SignInInfoRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    sign_in_info_list: List["SignInInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SocialDataNotify(betterproto.Message):
    is_have_first_share: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SocialDetail(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    level: int = betterproto.uint32_field(3)
    avatar_id: int = betterproto.uint32_field(4)
    signature: str = betterproto.string_field(5)
    birthday: "Birthday" = betterproto.message_field(6)
    world_level: int = betterproto.uint32_field(7)
    reserved_list: List[int] = betterproto.uint32_field(8)
    online_state: "FriendOnlineState" = betterproto.enum_field(9)
    param: int = betterproto.uint32_field(10)
    is_friend: bool = betterproto.bool_field(11)
    is_mp_mode_available: bool = betterproto.bool_field(12)
    online_id: str = betterproto.string_field(13)
    name_card_id: int = betterproto.uint32_field(14)
    is_in_blacklist: bool = betterproto.bool_field(15)
    is_chat_no_disturb: bool = betterproto.bool_field(16)
    remark_name: str = betterproto.string_field(17)
    finish_achievement_num: int = betterproto.uint32_field(18)
    tower_floor_index: int = betterproto.uint32_field(19)
    tower_level_index: int = betterproto.uint32_field(20)
    is_show_avatar: bool = betterproto.bool_field(21)
    show_avatar_info_list: List["SocialShowAvatarInfo"] = betterproto.message_field(22)
    show_name_card_id_list: List[int] = betterproto.uint32_field(23)
    friend_enter_home_option: "FriendEnterHomeOption" = betterproto.enum_field(24)
    profile_picture: "ProfilePicture" = betterproto.message_field(25)


@dataclass(eq=False, repr=False)
class SocialShowAvatarInfo(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    costume_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SpringUseReq(betterproto.Message):
    guid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class SpringUseRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class StartArenaChallengeLevelReq(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    arena_challenge_id: int = betterproto.uint32_field(2)
    arena_challenge_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class StartArenaChallengeLevelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gadget_entity_id: int = betterproto.uint32_field(2)
    arena_challenge_id: int = betterproto.uint32_field(3)
    arena_challenge_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class StartBuoyantCombatGalleryReq(betterproto.Message):
    gallery_id: int = betterproto.uint32_field(1)
    gallery_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StartBuoyantCombatGalleryRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    gallery_id: int = betterproto.uint32_field(2)
    gallery_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class StartCoopPointReq(betterproto.Message):
    coop_point: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class StartCoopPointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    coop_point: int = betterproto.uint32_field(2)
    is_start: bool = betterproto.bool_field(3)
    start_main_coop: "MainCoop" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class StartEffigyChallengeReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(2)
    condition_id_list: List[int] = betterproto.uint32_field(3)
    point_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class StartEffigyChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    challenge_id: int = betterproto.uint32_field(2)
    difficulty_id: int = betterproto.uint32_field(3)
    condition_id_list: List[int] = betterproto.uint32_field(4)
    point_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class StartFishingReq(betterproto.Message):
    fish_pool_id: int = betterproto.uint32_field(1)
    rod_entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StartFishingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    fish_pool_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StartRogueEliteCellChallengeReq(betterproto.Message):
    cell_id: int = betterproto.uint32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)
    difficulty: "RogueEliteCellDifficultyType" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class StartRogueEliteCellChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cell_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class StartRogueNormalCellChallengeReq(betterproto.Message):
    cell_id: int = betterproto.uint32_field(1)
    dungeon_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StartRogueNormalCellChallengeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    cell_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class StatueGadgetInfo(betterproto.Message):
    opened_statue_uid_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class StopServerInfo(betterproto.Message):
    stop_begin_time: int = betterproto.uint32_field(1)
    stop_end_time: int = betterproto.uint32_field(2)
    url: str = betterproto.string_field(3)
    content_msg: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class StoreItemChangeNotify(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(1)
    item_list: List["Item"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StoreItemDelNotify(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(1)
    guid_list: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class StoreWeightLimitNotify(betterproto.Message):
    store_type: "StoreType" = betterproto.enum_field(1)
    weight_limit: int = betterproto.uint32_field(3)
    material_count_limit: int = betterproto.uint32_field(4)
    weapon_count_limit: int = betterproto.uint32_field(5)
    reliquary_count_limit: int = betterproto.uint32_field(6)
    furniture_count_limit: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class StrengthenPointData(betterproto.Message):
    base_point: int = betterproto.uint32_field(1)
    cur_point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SummerTimeDetailInfo(betterproto.Message):
    stage_map: Dict[int, "SummerTimeStageInfo"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    is_content_closed: bool = betterproto.bool_field(2)
    content_close_time: int = betterproto.uint32_field(3)
    sprint_boat_info: "SummerTimeSprintBoatInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SummerTimeFloatSignalPositionNotify(betterproto.Message):
    float_signal_id: int = betterproto.uint32_field(1)
    position: "Vector" = betterproto.message_field(2)
    is_transfer_anchor: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class SummerTimeFloatSignalUpdateNotify(betterproto.Message):
    float_signal_id: int = betterproto.uint32_field(1)
    position: "Vector" = betterproto.message_field(2)
    is_transfer_anchor: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatInfo(betterproto.Message):
    record_list: List["SummerTimeSprintBoatRecord"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatRecord(betterproto.Message):
    is_touched: bool = betterproto.bool_field(1)
    best_score: int = betterproto.uint32_field(2)
    start_time: int = betterproto.uint32_field(3)
    watcher_id_list: List[int] = betterproto.uint32_field(4)
    group_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatRestartReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)
    group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatRestartRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)
    group_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SummerTimeSprintBoatSettleNotify(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    left_time: int = betterproto.uint32_field(2)
    collect_num: int = betterproto.uint32_field(3)
    total_num: int = betterproto.uint32_field(4)
    score: int = betterproto.uint32_field(5)
    is_new_record: bool = betterproto.bool_field(6)
    medal_level: int = betterproto.uint32_field(7)
    group_id: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class SummerTimeStageInfo(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    is_open: bool = betterproto.bool_field(2)
    open_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SumoActivityDetailInfo(betterproto.Message):
    sumo_stage_map: Dict[int, "SumoStageData"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )
    difficulty_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SumoAvatarInfo(betterproto.Message):
    is_trial: bool = betterproto.bool_field(1)
    avatar_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class SumoDungeonAvatar(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    is_trial: bool = betterproto.bool_field(2)
    is_avlive: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class SumoDungeonSettleNotify(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    difficulty_id: int = betterproto.uint32_field(2)
    final_score: int = betterproto.uint32_field(3)
    is_new_record: bool = betterproto.bool_field(4)
    kill_monster_num: int = betterproto.uint32_field(5)
    kill_elite_monster_num: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SumoDungeonTeam(betterproto.Message):
    dungeon_avatar_list: List["SumoDungeonAvatar"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SumoEnterDungeonNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)
    dungeon_team_list: List["SumoDungeonTeam"] = betterproto.message_field(3)
    cur_team_index: int = betterproto.uint32_field(4)
    next_valid_switch_time: int = betterproto.uint32_field(5)
    no_switch_punish_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SumoLeaveDungeonNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SumoRestartDungeonReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SumoRestartDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    point_id: int = betterproto.uint32_field(2)
    dungeon_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SumoSaveTeamReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)
    difficulty_id: int = betterproto.uint32_field(3)
    team_list: List["SumoTeamData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SumoSaveTeamRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    stage_id: int = betterproto.uint32_field(3)
    difficulty_id: int = betterproto.uint32_field(4)
    team_list: List["SumoTeamData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SumoSelectTeamAndEnterDungeonReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)
    difficulty_id: int = betterproto.uint32_field(3)
    team_list: List["SumoTeamData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SumoSelectTeamAndEnterDungeonRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    stage_id: int = betterproto.uint32_field(3)
    difficulty_id: int = betterproto.uint32_field(4)
    team_list: List["SumoTeamData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SumoSetNoSwitchPunishTimeNotify(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)
    dungeon_team_list: List["SumoDungeonTeam"] = betterproto.message_field(3)
    cur_team_index: int = betterproto.uint32_field(4)
    next_valid_switch_time: int = betterproto.uint32_field(5)
    no_switch_punish_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SumoStageData(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    max_score: int = betterproto.uint32_field(2)
    open_time: int = betterproto.uint32_field(3)
    is_open: bool = betterproto.bool_field(4)
    team_list: List["SumoTeamData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SumoSwitchTeamReq(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SumoSwitchTeamRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    activity_id: int = betterproto.uint32_field(2)
    stage_id: int = betterproto.uint32_field(3)
    cur_team_index: int = betterproto.uint32_field(4)
    dungeon_team_list: List["SumoDungeonTeam"] = betterproto.message_field(5)
    next_valid_switch_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SumoTeamData(betterproto.Message):
    avatar_info_list: List["SumoAvatarInfo"] = betterproto.message_field(1)
    skill_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SyncScenePlayTeamEntityNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    entity_info_list: List["PlayTeamEntityInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SyncTeamEntityNotify(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    team_entity_info_list: List["TeamEntityInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TakeAchievementGoalRewardReq(betterproto.Message):
    id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeAchievementGoalRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    id_list: List[int] = betterproto.uint32_field(2)
    item_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TakeAchievementRewardReq(betterproto.Message):
    id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeAchievementRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    id_list: List[int] = betterproto.uint32_field(2)
    item_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TakeAsterSpecialRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeAsterSpecialRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeBattlePassMissionPointReq(betterproto.Message):
    mission_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeBattlePassMissionPointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mission_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeBattlePassRewardReq(betterproto.Message):
    take_option_list: List["BattlePassRewardTakeOption"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TakeBattlePassRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    take_option_list: List["BattlePassRewardTakeOption"] = betterproto.message_field(2)
    item_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TakeCityReputationExploreRewardReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    explore_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeCityReputationExploreRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    explore_id_list: List[int] = betterproto.uint32_field(3)
    item_list: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TakeCityReputationLevelRewardReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeCityReputationLevelRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    item_list: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TakeCityReputationParentQuestReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    parent_quest_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeCityReputationParentQuestRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    parent_quest_list: List[int] = betterproto.uint32_field(3)
    item_list: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TakeCompoundOutputReq(betterproto.Message):
    compound_id: int = betterproto.uint32_field(1)
    compound_group_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeCompoundOutputRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    item_list: List["ItemParam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TakeCoopRewardReq(betterproto.Message):
    reward_config_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeCoopRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reward_config_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeDeliveryDailyRewardReq(betterproto.Message):
    schedule_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeDeliveryDailyRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    schedule_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeEffigyFirstPassRewardReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeEffigyFirstPassRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    challenge_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeEffigyRewardReq(betterproto.Message):
    reward_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeEffigyRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reward_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeFirstShareRewardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TakeFirstShareRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class TakeFurnitureMakeReq(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    make_id: int = betterproto.uint32_field(2)
    is_fast_finish: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class TakeFurnitureMakeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    make_id: int = betterproto.uint32_field(2)
    furniture_make_slot: "FurnitureMakeSlot" = betterproto.message_field(3)
    output_item_list: List["ItemParam"] = betterproto.message_field(4)
    return_item_list: List["ItemParam"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class TakeHuntingOfferReq(betterproto.Message):
    city_id: int = betterproto.uint32_field(1)
    hunting_pair: "HuntingPair" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TakeHuntingOfferRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    city_id: int = betterproto.uint32_field(2)
    hunting_pair: "HuntingPair" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TakeInvestigationRewardReq(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeInvestigationRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeInvestigationTargetRewardReq(betterproto.Message):
    quest_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeInvestigationTargetRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    quest_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeMaterialDeleteReturnReq(betterproto.Message):
    type: "MaterialDeleteReturnType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class TakeMaterialDeleteReturnRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class TakeoffEquipReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    slot: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeoffEquipRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    slot: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeOfferingLevelRewardReq(betterproto.Message):
    offering_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeOfferingLevelRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    offering_id: int = betterproto.uint32_field(2)
    take_level: int = betterproto.uint32_field(3)
    item_list: List["ItemParam"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TakePlayerLevelRewardReq(betterproto.Message):
    level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakePlayerLevelRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    level: int = betterproto.uint32_field(2)
    reward_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeRegionSearchRewardReq(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    search_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeRegionSearchRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    id: int = betterproto.uint32_field(2)
    search_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeResinCardDailyRewardReq(betterproto.Message):
    product_config_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeResinCardDailyRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    product_config_id: int = betterproto.uint32_field(2)
    item_vec: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TakeReunionFirstGiftRewardReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TakeReunionFirstGiftRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reward_id: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class TakeReunionMissionRewardReq(betterproto.Message):
    mission_id: int = betterproto.uint32_field(1)
    reward_id: int = betterproto.uint32_field(2)
    reward_index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeReunionMissionRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    reward_id: int = betterproto.uint32_field(2)
    mission_info: "ReunionMissionInfo" = betterproto.message_field(3)
    reward_index: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TakeReunionSignInRewardReq(betterproto.Message):
    config_id: int = betterproto.uint32_field(1)
    reward_day: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeReunionSignInRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    sign_in_info: "ReunionSignInInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TakeReunionWatcherRewardReq(betterproto.Message):
    mission_id: int = betterproto.uint32_field(1)
    watcher_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeReunionWatcherRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    mission_id: int = betterproto.uint32_field(2)
    watcher_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TaskVarNotify(betterproto.Message):
    task_var_list: List["TaskVar"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TaskVar(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value_list: List[int] = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class TeamEnterSceneInfo(betterproto.Message):
    team_entity_id: int = betterproto.uint32_field(1)
    team_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(2)
    ability_control_block: "AbilityControlBlock" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TeamEntityInfo(betterproto.Message):
    team_entity_id: int = betterproto.uint32_field(1)
    authority_peer_id: int = betterproto.uint32_field(2)
    team_ability_info: "AbilitySyncStateInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TeamResonanceChangeNotify(betterproto.Message):
    info_list: List["AvatarTeamResonanceInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TowerAllDataReq(betterproto.Message):
    is_interact: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class TowerAllDataRsp(betterproto.Message):
    tower_schedule_id: int = betterproto.uint32_field(1)
    tower_floor_record_list: List["TowerFloorRecord"] = betterproto.message_field(2)
    daily_floor_id: int = betterproto.uint32_field(3)
    daily_level_index: int = betterproto.uint32_field(4)
    cur_level_record: "TowerCurLevelRecord" = betterproto.message_field(5)
    next_schedule_change_time: int = betterproto.uint32_field(6)
    floor_open_time_map: Dict[int, int] = betterproto.map_field(
        7, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    is_first_interact: bool = betterproto.bool_field(8)
    monthly_brief: "TowerMonthlyBrief" = betterproto.message_field(9)
    skip_to_floor_index: int = betterproto.uint32_field(10)
    commemorative_reward_id: int = betterproto.uint32_field(11)
    skip_floor_granted_reward_item_map: Dict[int, int] = betterproto.map_field(
        12, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    valid_tower_record_num: int = betterproto.uint32_field(13)
    retcode: int = betterproto.int32_field(14)
    is_finished_entrance_floor: bool = betterproto.bool_field(15)
    schedule_start_time: int = betterproto.uint32_field(16)
    last_schedule_monthly_brief: "TowerMonthlyBrief" = betterproto.message_field(17)


@dataclass(eq=False, repr=False)
class TowerBriefDataNotify(betterproto.Message):
    tower_schedule_id: int = betterproto.uint32_field(1)
    next_schedule_change_time: int = betterproto.uint32_field(2)
    total_star_num: int = betterproto.uint32_field(3)
    last_floor_index: int = betterproto.uint32_field(4)
    last_level_index: int = betterproto.uint32_field(5)
    is_finished_entrance_floor: bool = betterproto.bool_field(6)
    schedule_start_time: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class TowerBuffSelectReq(betterproto.Message):
    tower_buff_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TowerBuffSelectRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    tower_buff_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TowerCurLevelRecordChangeNotify(betterproto.Message):
    cur_level_record: "TowerCurLevelRecord" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TowerCurLevelRecord(betterproto.Message):
    cur_floor_id: int = betterproto.uint32_field(1)
    cur_level_index: int = betterproto.uint32_field(2)
    tower_team_list: List["TowerTeam"] = betterproto.message_field(3)
    buff_id_list: List[int] = betterproto.uint32_field(4)
    is_empty: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class TowerDailyRewardProgressChangeNotify(betterproto.Message):
    daily_floor_id: int = betterproto.uint32_field(1)
    daily_level_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TowerEnterLevelReq(betterproto.Message):
    enter_point_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TowerEnterLevelRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    floor_id: int = betterproto.uint32_field(2)
    level_index: int = betterproto.uint32_field(3)
    tower_buff_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TowerFightRecordPair(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    data: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TowerFloorRecordChangeNotify(betterproto.Message):
    tower_floor_record_list: List["TowerFloorRecord"] = betterproto.message_field(1)
    is_finished_entrance_floor: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class TowerFloorRecord(betterproto.Message):
    floor_id: int = betterproto.uint32_field(1)
    passed_level_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    floor_star_reward_progress: int = betterproto.uint32_field(3)
    passed_level_record_list: List["TowerLevelRecord"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TowerGetFloorStarRewardReq(betterproto.Message):
    floor_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TowerGetFloorStarRewardRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    floor_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TowerLevelEndNotify(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    finished_star_cond_list: List[int] = betterproto.uint32_field(2)
    reward_item_list: List["ItemParam"] = betterproto.message_field(3)
    continue_state: int = betterproto.uint32_field(4)
    next_floor_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class TowerLevelRecord(betterproto.Message):
    level_id: int = betterproto.uint32_field(1)
    satisfied_cond_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TowerLevelStarCondData(betterproto.Message):
    star_cond_index: int = betterproto.uint32_field(3)
    cond_value: int = betterproto.uint32_field(4)
    is_pause: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class TowerLevelStarCondNotify(betterproto.Message):
    floor_id: int = betterproto.uint32_field(1)
    level_index: int = betterproto.uint32_field(2)
    cond_data_list: List["TowerLevelStarCondData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TowerMiddleLevelChangeTeamNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TowerMonthlyBrief(betterproto.Message):
    tower_schedule_id: int = betterproto.uint32_field(1)
    best_floor_index: int = betterproto.uint32_field(2)
    best_level_index: int = betterproto.uint32_field(3)
    total_star_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TowerMonthlyCombatRecord(betterproto.Message):
    most_reveal_avatar_list: List["TowerFightRecordPair"] = betterproto.message_field(1)
    most_kill_avatar_pair: "TowerFightRecordPair" = betterproto.message_field(2)
    highest_dps_avatr_pair: "TowerFightRecordPair" = betterproto.message_field(3)
    most_take_damage_avatar_pair: "TowerFightRecordPair" = betterproto.message_field(4)
    most_cast_normal_skill_avatar_pair: "TowerFightRecordPair" = (
        betterproto.message_field(5)
    )
    most_cast_energy_skill_avatar_pair: "TowerFightRecordPair" = (
        betterproto.message_field(6)
    )


@dataclass(eq=False, repr=False)
class TowerMonthlyDetail(betterproto.Message):
    monthly_brief: "TowerMonthlyBrief" = betterproto.message_field(1)
    monthly_combat_record: "TowerMonthlyCombatRecord" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TowerRecordHandbookReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TowerRecordHandbookRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    monthly_detail_list: List["TowerMonthlyDetail"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TowerSurrenderReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TowerSurrenderRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class TowerTeam(betterproto.Message):
    tower_team_id: int = betterproto.uint32_field(1)
    avatar_guid_list: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class TowerTeamSelectReq(betterproto.Message):
    floor_id: int = betterproto.uint32_field(1)
    tower_team_list: List["TowerTeam"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TowerTeamSelectRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class TrackingIoInfo(betterproto.Message):
    appid: str = betterproto.string_field(1)
    deviceid: str = betterproto.string_field(2)
    mac: str = betterproto.string_field(3)
    rydevicetype: str = betterproto.string_field(4)
    client_tz: str = betterproto.string_field(5)
    current_caid: str = betterproto.string_field(6)
    cached_caid: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class TreasureMapActivityDetailInfo(betterproto.Message):
    region_info_list: List["TreasureMapRegionInfo"] = betterproto.message_field(1)
    active_region_index: int = betterproto.uint32_field(2)
    treasure_close_time: int = betterproto.uint32_field(3)
    preview_reward_id: int = betterproto.uint32_field(4)
    min_open_player_level: int = betterproto.uint32_field(5)
    currency_num: int = betterproto.uint32_field(6)
    bonus_challenge_list: List[
        "TreasureMapBonusChallengeInfo"
    ] = betterproto.message_field(7)
    is_mp_challenge_touched: bool = betterproto.bool_field(8)
    total_mp_spot_num: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TreasureMapBonusChallengeInfo(betterproto.Message):
    config_id: int = betterproto.uint32_field(1)
    is_active: bool = betterproto.bool_field(2)
    is_done: bool = betterproto.bool_field(3)
    fragment_map: Dict[int, bool] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_BOOL
    )
    solution_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class TreasureMapBonusChallengeNotify(betterproto.Message):
    info: "TreasureMapBonusChallengeInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TreasureMapCurrencyNotify(betterproto.Message):
    currency_num: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TreasureMapDetectorDataNotify(betterproto.Message):
    data: "TreasureMapDetectorData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TreasureMapDetectorData(betterproto.Message):
    region_id: int = betterproto.uint32_field(1)
    spot_list: List["Vector"] = betterproto.message_field(2)
    center_pos: "Vector" = betterproto.message_field(3)
    radius: int = betterproto.uint32_field(4)
    is_region_detected: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class TreasureMapGuideTaskDoneNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TreasureMapHostInfoNotify(betterproto.Message):
    mp_challenge_region_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TreasureMapMpChallengeNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TreasureMapPreTaskDoneNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TreasureMapRegionActiveNotify(betterproto.Message):
    active_region_index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TreasureMapRegionInfoNotify(betterproto.Message):
    region_info: "TreasureMapRegionInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TreasureMapRegionInfo(betterproto.Message):
    region_id: int = betterproto.uint32_field(1)
    start_time: int = betterproto.uint32_field(3)
    region_center_pos: "Vector" = betterproto.message_field(4)
    region_radius: int = betterproto.uint32_field(5)
    current_progress: int = betterproto.uint32_field(6)
    goal_points: int = betterproto.uint32_field(7)
    scene_id: int = betterproto.uint32_field(8)
    is_find_mp_spot: bool = betterproto.bool_field(9)
    is_done_mp_spot: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class TrialAvatarActivityDetailInfo(betterproto.Message):
    reward_info_list: List[
        "TrialAvatarActivityRewardDetailInfo"
    ] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TrialAvatarActivityRewardDetailInfo(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(1)
    passed_dungeon: bool = betterproto.bool_field(2)
    received_reward: bool = betterproto.bool_field(3)
    reward_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TrialAvatarFirstPassDungeonNotify(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TrialAvatarGrantRecord(betterproto.Message):
    grant_reason: int = betterproto.uint32_field(1)
    from_parent_quest_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TrialAvatarInDungeonIndexNotify(betterproto.Message):
    trial_avatar_index_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TrialAvatarInfo(betterproto.Message):
    trial_avatar_id: int = betterproto.uint32_field(1)
    trial_equip_list: List["Item"] = betterproto.message_field(2)
    grant_record: "TrialAvatarGrantRecord" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TriggerCreateGadgetToEquipPartNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    gadget_entity_id: int = betterproto.uint32_field(2)
    gadget_id: int = betterproto.uint32_field(3)
    equip_part: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class TriggerRoguelikeCurseNotify(betterproto.Message):
    is_trigger_curse: bool = betterproto.bool_field(1)
    curse_group_id: int = betterproto.uint32_field(2)
    curse_level: int = betterproto.uint32_field(3)
    effect_param_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TriggerRoguelikeRuneReq(betterproto.Message):
    rune_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TriggerRoguelikeRuneRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    rune_id: int = betterproto.uint32_field(2)
    available_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TryEnterHomeReq(betterproto.Message):
    target_uid: int = betterproto.uint32_field(1)
    target_point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TryEnterHomeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_uid: int = betterproto.uint32_field(2)
    param_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class Uint32Pair(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnfreezeGroupLimitNotify(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)
    scene_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnionCmdNotify(betterproto.Message):
    cmd_list: List["UnionCmd"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UnionCmd(betterproto.Message):
    message_id: int = betterproto.uint32_field(1)
    body: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class UnlockAvatarTalentReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    talent_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockAvatarTalentRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    talent_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class UnlockCoopChapterReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockCoopChapterRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    chapter_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockedFurnitureFormulaDataNotify(betterproto.Message):
    is_all: bool = betterproto.bool_field(1)
    furniture_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockedFurnitureSuiteDataNotify(betterproto.Message):
    is_all: bool = betterproto.bool_field(1)
    furniture_suite_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockNameCardNotify(betterproto.Message):
    name_card_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockPersonalLineReq(betterproto.Message):
    personal_line_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockPersonalLineRsp(betterproto.Message):
    level: int = betterproto.uint32_field(3, group="Param")
    chapter_id: int = betterproto.uint32_field(4, group="Param")
    retcode: int = betterproto.int32_field(1)
    personal_line_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockTransPointReq(betterproto.Message):
    scene_id: int = betterproto.uint32_field(1)
    point_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UnlockTransPointRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class UnmarkEntityInMinMapNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UpdateAbilityCreatedMovingPlatformNotify(betterproto.Message):
    op_type: "UpdateAbilityCreatedMovingPlatformNotifyOpType" = betterproto.enum_field(
        1
    )
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UpdatePlayerShowAvatarListReq(betterproto.Message):
    show_avatar_id_list: List[int] = betterproto.uint32_field(1)
    is_show_avatar: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class UpdatePlayerShowAvatarListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    show_avatar_id_list: List[int] = betterproto.uint32_field(2)
    is_show_avatar: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class UpdatePlayerShowNameCardListReq(betterproto.Message):
    show_name_card_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UpdatePlayerShowNameCardListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    show_name_card_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UpdatePs4BlockListReq(betterproto.Message):
    psn_id_list: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdatePs4BlockListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class UpdatePs4FriendListNotify(betterproto.Message):
    psn_id_list: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdatePs4FriendListReq(betterproto.Message):
    psn_id_list: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdatePs4FriendListRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    psn_id_list: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateRedPointNotify(betterproto.Message):
    red_point_list: List["RedPointData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateReunionWatcherNotify(betterproto.Message):
    mission_id: int = betterproto.uint32_field(1)
    watcher_info: "ReunionWatcherInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UpgradeRoguelikeShikigamiReq(betterproto.Message):
    shikigami_group_id: int = betterproto.uint32_field(1)
    upgrade_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UpgradeRoguelikeShikigamiRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    shikigami_group_id: int = betterproto.uint32_field(2)
    cur_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class UseItemReq(betterproto.Message):
    guid: int = betterproto.uint64_field(1)
    count: int = betterproto.uint32_field(2)
    target_guid: int = betterproto.uint64_field(3)
    option_idx: int = betterproto.uint32_field(4)
    is_enter_mp_dungeon_team: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class UseItemRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    guid: int = betterproto.uint64_field(2)
    item_id: int = betterproto.uint32_field(3)
    target_guid: int = betterproto.uint64_field(4)
    option_idx: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class UseMiracleRingReq(betterproto.Message):
    miracle_ring_op_type: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class UseMiracleRingRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    miracle_ring_op_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UseWidgetCreateGadgetReq(betterproto.Message):
    material_id: int = betterproto.uint32_field(1)
    pos: "Vector" = betterproto.message_field(2)
    rot: "Vector" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class UseWidgetCreateGadgetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    material_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UseWidgetRetractGadgetReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UseWidgetRetractGadgetRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Vector3Int(betterproto.Message):
    x: int = betterproto.int32_field(1)
    y: int = betterproto.int32_field(2)
    z: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class VectorPlane(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class Vector(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class VehicleInfo(betterproto.Message):
    member_list: List["VehicleMember"] = betterproto.message_field(1)
    owner_uid: int = betterproto.uint32_field(2)
    cur_stamina: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class VehicleInteractReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    interact_type: "VehicleInteractType" = betterproto.enum_field(2)
    pos: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VehicleInteractRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    interact_type: "VehicleInteractType" = betterproto.enum_field(3)
    member: "VehicleMember" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class VehicleLocationInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    gadget_id: int = betterproto.uint32_field(2)
    owner_uid: int = betterproto.uint32_field(3)
    pos: "Vector" = betterproto.message_field(4)
    rot: "Vector" = betterproto.message_field(5)
    cur_hp: float = betterproto.float_field(6)
    max_hp: float = betterproto.float_field(7)
    uid_list: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class VehicleMember(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    pos: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class VehicleStaminaNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    cur_stamina: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class ViewCodexReq(betterproto.Message):
    type_data_list: List["CodexTypeData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ViewCodexRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    type_data_list: List["CodexTypeData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WatcherAllDataNotify(betterproto.Message):
    watcher_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WatcherChangeNotify(betterproto.Message):
    new_watcher_list: List[int] = betterproto.uint32_field(1)
    removed_watcher_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WatcherEventNotify(betterproto.Message):
    watcher_id: int = betterproto.uint32_field(1)
    add_progress: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WatcherEventTypeNotify(betterproto.Message):
    watcher_trigger_type: int = betterproto.uint32_field(1)
    param_list: List[int] = betterproto.uint32_field(2)
    add_progress: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WaterSpiritActivityDetailInfo(betterproto.Message):
    region_search_id: int = betterproto.uint32_field(1)
    mp_play_id: int = betterproto.uint32_field(2)
    search_time_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class WaterSpritePhaseFinishNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WeaponAwakenReq(betterproto.Message):
    target_weapon_guid: int = betterproto.uint64_field(1)
    item_guid: int = betterproto.uint64_field(2)
    affix_level_map: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class WeaponAwakenRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_weapon_guid: int = betterproto.uint64_field(2)
    target_weapon_awaken_level: int = betterproto.uint32_field(3)
    old_affix_level_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    cur_affix_level_map: Dict[int, int] = betterproto.map_field(
        5, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )
    avatar_guid: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class WeaponPromoteReq(betterproto.Message):
    target_weapon_guid: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class WeaponPromoteRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_weapon_guid: int = betterproto.uint64_field(2)
    old_promote_level: int = betterproto.uint32_field(3)
    cur_promote_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class Weapon(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    promote_level: int = betterproto.uint32_field(3)
    affix_map: Dict[int, int] = betterproto.map_field(
        4, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class WeaponUpgradeReq(betterproto.Message):
    target_weapon_guid: int = betterproto.uint64_field(1)
    food_weapon_guid_list: List[int] = betterproto.uint64_field(2)
    item_param_list: List["ItemParam"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WeaponUpgradeRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    target_weapon_guid: int = betterproto.uint64_field(2)
    old_level: int = betterproto.uint32_field(3)
    cur_level: int = betterproto.uint32_field(4)
    item_param_list: List["ItemParam"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WearEquipReq(betterproto.Message):
    avatar_guid: int = betterproto.uint64_field(1)
    equip_guid: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class WearEquipRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    avatar_guid: int = betterproto.uint64_field(2)
    equip_guid: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class WeatherInfo(betterproto.Message):
    weather_area_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WeekendDjinnInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WeeklyBossResinDiscountInfo(betterproto.Message):
    discount_num: int = betterproto.uint32_field(1)
    discount_num_limit: int = betterproto.uint32_field(2)
    resin_cost: int = betterproto.uint32_field(3)
    original_resin_cost: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class WidgetActiveChangeNotify(betterproto.Message):
    widget_data_list: List["WidgetSlotData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WidgetCameraInfo(betterproto.Message):
    target_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WidgetCoolDownData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    cool_down_time: int = betterproto.uint64_field(2)
    is_success: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class WidgetCoolDownNotify(betterproto.Message):
    group_cool_down_data_list: List["WidgetCoolDownData"] = betterproto.message_field(1)
    normal_cool_down_data_list: List["WidgetCoolDownData"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class WidgetCreateLocationInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WidgetCreatorInfo(betterproto.Message):
    op_type: "WidgetCreatorOpType" = betterproto.enum_field(1)
    entity_id: int = betterproto.uint32_field(2)
    location_info: "WidgetCreateLocationInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WidgetDoBagReq(betterproto.Message):
    location_info: "WidgetCreateLocationInfo" = betterproto.message_field(
        20, group="OpInfo"
    )
    widget_creator_info: "WidgetCreatorInfo" = betterproto.message_field(
        21, group="OpInfo"
    )
    material_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WidgetDoBagRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    material_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WidgetGadgetAllDataNotify(betterproto.Message):
    widget_gadget_data: List["WidgetGadgetData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WidgetGadgetDataNotify(betterproto.Message):
    widget_gadget_data: "WidgetGadgetData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WidgetGadgetData(betterproto.Message):
    gadget_id: int = betterproto.uint32_field(1)
    gadget_entity_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WidgetGadgetDestroyNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WidgetReportReq(betterproto.Message):
    material_id: int = betterproto.uint32_field(1)
    is_clear_hint: bool = betterproto.bool_field(2)
    is_client_collect: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class WidgetReportRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)
    material_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WidgetSlotChangeNotify(betterproto.Message):
    op: "WidgetSlotOp" = betterproto.enum_field(1)
    slot: "WidgetSlotData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WidgetSlotData(betterproto.Message):
    tag: "WidgetSlotTag" = betterproto.enum_field(1)
    material_id: int = betterproto.uint32_field(2)
    cd_over_time: int = betterproto.uint32_field(3)
    is_active: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class WidgetSlotTagComparer(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WidgetThunderBirdFeatherInfo(betterproto.Message):
    entity_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WidgetUseAttachAbilityGroupChangeNotify(betterproto.Message):
    material_id: int = betterproto.uint32_field(1)
    is_attach: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WindSeedClientNotify(betterproto.Message):
    refresh_notify: "WindSeedClientNotifyRefreshNotify" = betterproto.message_field(
        1, group="Notify"
    )
    add_wind_bullet_notify: "WindSeedClientNotifyAddWindBulletNotify" = (
        betterproto.message_field(2, group="Notify")
    )
    area_notify: "WindSeedClientNotifyAreaNotify" = betterproto.message_field(
        3, group="Notify"
    )


@dataclass(eq=False, repr=False)
class WindSeedClientNotifyRefreshNotify(betterproto.Message):
    refresh_num: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WindSeedClientNotifyAddWindBulletNotify(betterproto.Message):
    seed_entity_id: int = betterproto.uint32_field(1)
    seed_pos: "Vector" = betterproto.message_field(2)
    catch_player_uid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WindSeedClientNotifyAreaNotify(betterproto.Message):
    area_id: int = betterproto.uint32_field(1)
    area_code: bytes = betterproto.bytes_field(2)
    area_type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WorktopInfo(betterproto.Message):
    option_list: List[int] = betterproto.uint32_field(1)
    is_guest_can_operate: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WorktopOptionNotify(betterproto.Message):
    gadget_entity_id: int = betterproto.uint32_field(1)
    option_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WorldAllRoutineTypeNotify(betterproto.Message):
    world_routine_type_list: List["WorldRoutineTypeInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WorldDataNotify(betterproto.Message):
    world_prop_map: Dict[int, "PropValue"] = betterproto.map_field(
        1, betterproto.TYPE_UINT32, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class WorldOwnerBlossomBriefInfoNotify(betterproto.Message):
    brief_info_list: List["BlossomBriefInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WorldOwnerBlossomScheduleInfoNotify(betterproto.Message):
    schedule_info: "BlossomScheduleInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WorldOwnerDailyTaskNotify(betterproto.Message):
    task_list: List["DailyTaskInfo"] = betterproto.message_field(1)
    filter_city_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WorldPlayerDieNotify(betterproto.Message):
    monster_id: int = betterproto.uint32_field(3, group="Entity")
    gadget_id: int = betterproto.uint32_field(4, group="Entity")
    die_type: "PlayerDieType" = betterproto.enum_field(1)
    murderer_entity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WorldPlayerInfoNotify(betterproto.Message):
    player_info_list: List["OnlinePlayerInfo"] = betterproto.message_field(1)
    player_uid_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WorldPlayerLocationNotify(betterproto.Message):
    player_loc_list: List["PlayerLocationInfo"] = betterproto.message_field(1)
    player_world_loc_list: List["PlayerWorldLocationInfo"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class WorldPlayerReviveReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WorldPlayerReviveRsp(betterproto.Message):
    retcode: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class WorldPlayerRTTNotify(betterproto.Message):
    player_rtt_list: List["PlayerRTTInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WorldRoutineChangeNotify(betterproto.Message):
    routine_type: int = betterproto.uint32_field(1)
    routine_info: "WorldRoutineInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WorldRoutineInfo(betterproto.Message):
    routine_id: int = betterproto.uint32_field(1)
    progress: int = betterproto.uint32_field(2)
    finish_progress: int = betterproto.uint32_field(3)
    is_finished: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class WorldRoutineTypeCloseNotify(betterproto.Message):
    routine_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class WorldRoutineTypeInfo(betterproto.Message):
    routine_type: int = betterproto.uint32_field(1)
    world_routine_info_list: List["WorldRoutineInfo"] = betterproto.message_field(2)
    next_refresh_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WorldRoutineTypeRefreshNotify(betterproto.Message):
    world_routine_type: "WorldRoutineTypeInfo" = betterproto.message_field(1)
